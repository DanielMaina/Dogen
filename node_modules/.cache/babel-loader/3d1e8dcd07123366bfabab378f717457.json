{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/NumericalInput/NumericalInput.tsx\";\nimport React from 'react';\nimport { escapeRegExp } from 'utils';\nimport 'components/styles/NumericalInput.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = /*#__PURE__*/React.memo(_c = function InnerInput(_ref) {\n  let {\n    value,\n    onUserInput,\n    placeholder,\n    fontSize,\n    color,\n    fontWeight,\n    align,\n    ...rest\n  } = _ref;\n\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"input\", { ...rest,\n    className: \"styledInput\",\n    value: value,\n    style: {\n      textAlign: align,\n      color,\n      fontSize,\n      fontWeight\n    },\n    onChange: event => {\n      // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n      enforcer(event.target.value.replace(/,/g, '.'));\n    } // universal input options\n    ,\n    inputMode: \"decimal\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\" // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0.0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n});\n_c2 = Input;\nexport default Input;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input$React.memo\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/NumericalInput/NumericalInput.tsx"],"names":["React","escapeRegExp","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","fontSize","color","fontWeight","align","rest","enforcer","nextUserInput","test","textAlign","event","target","replace"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,OAA7B;AACA,OAAO,uCAAP;;AAEA,MAAMC,UAAU,GAAGC,MAAM,CAAE,wBAAF,CAAzB,C,CAAqD;;AAErD,OAAO,MAAMC,KAAK,gBAAGJ,KAAK,CAACK,IAAN,MAAW,SAASC,UAAT,OAgBwC;AAAA,MAhBpB;AAClDC,IAAAA,KADkD;AAElDC,IAAAA,WAFkD;AAGlDC,IAAAA,WAHkD;AAIlDC,IAAAA,QAJkD;AAKlDC,IAAAA,KALkD;AAMlDC,IAAAA,UANkD;AAOlDC,IAAAA,KAPkD;AAQlD,OAAGC;AAR+C,GAgBoB;;AACtE,QAAMC,QAAQ,GAAIC,aAAD,IAA2B;AAC1C,QAAIA,aAAa,KAAK,EAAlB,IAAwBd,UAAU,CAACe,IAAX,CAAgBhB,YAAY,CAACe,aAAD,CAA5B,CAA5B,EAA0E;AACxER,MAAAA,WAAW,CAACQ,aAAD,CAAX;AACD;AACF,GAJD;;AAMA,sBACE,sBACMF,IADN;AAEE,IAAA,SAAS,EAAC,aAFZ;AAGE,IAAA,KAAK,EAAEP,KAHT;AAIE,IAAA,KAAK,EAAE;AAAEW,MAAAA,SAAS,EAAEL,KAAb;AAAoBF,MAAAA,KAApB;AAA2BD,MAAAA,QAA3B;AAAqCE,MAAAA;AAArC,KAJT;AAKE,IAAA,QAAQ,EAAGO,KAAD,IAAW;AACnB;AACAJ,MAAAA,QAAQ,CAACI,KAAK,CAACC,MAAN,CAAab,KAAb,CAAmBc,OAAnB,CAA2B,IAA3B,EAAiC,GAAjC,CAAD,CAAR;AACD,KARH,CASE;AATF;AAUE,IAAA,SAAS,EAAC,SAVZ;AAWE,IAAA,YAAY,EAAC,KAXf;AAYE,IAAA,WAAW,EAAC,KAZd,CAaE;AAbF;AAcE,IAAA,IAAI,EAAC,MAdP;AAeE,IAAA,OAAO,EAAC,qBAfV;AAgBE,IAAA,WAAW,EAAEZ,WAAW,IAAI,KAhB9B;AAiBE,IAAA,SAAS,EAAE,CAjBb;AAkBE,IAAA,SAAS,EAAE,EAlBb;AAmBE,IAAA,UAAU,EAAC;AAnBb;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CA9CoB,CAAd;MAAML,K;AAgDb,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport { escapeRegExp } from 'utils';\nimport 'components/styles/NumericalInput.scss';\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  fontSize,\n  color,\n  fontWeight,\n  align,\n  ...rest\n}: {\n  value: string | number;\n  onUserInput: (input: string) => void;\n  error?: boolean;\n  fontSize?: number;\n  fontWeight?: string | number;\n  align?: 'right' | 'left';\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n\n  return (\n    <input\n      {...rest}\n      className='styledInput'\n      value={value}\n      style={{ textAlign: align, color, fontSize, fontWeight }}\n      onChange={(event) => {\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'));\n      }}\n      // universal input options\n      inputMode='decimal'\n      autoComplete='off'\n      autoCorrect='off'\n      // text-specific options\n      type='text'\n      pattern='^[0-9]*[.,]?[0-9]*$'\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck='false'\n    />\n  );\n});\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}