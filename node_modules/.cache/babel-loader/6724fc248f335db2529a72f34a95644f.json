{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/SwapPage/SwapProInfo.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, Divider } from '@material-ui/core';\nimport { SwapHoriz } from '@material-ui/icons';\nimport { CurrencyLogo } from 'components';\nimport { getTokenInfo, formatNumber } from 'utils';\nimport { unwrappedToken } from 'utils/wrappedCurrency';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport SwapInfoTx from './SwapInfoTx';\nimport { useTranslation } from 'react-i18next';\nimport { useEthPrice } from 'state/application/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SwapProInfo = _ref => {\n  _s();\n\n  let {\n    token1,\n    token2,\n    transactions\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [token1Data, setToken1Data] = useState(null);\n  const [token2Data, setToken2Data] = useState(null);\n  const token1Address = token1 === null || token1 === void 0 ? void 0 : token1.address;\n  const token2Address = token2 === null || token2 === void 0 ? void 0 : token2.address;\n  const currency1 = token1 ? unwrappedToken(token1) : undefined;\n  const currency2 = token2 ? unwrappedToken(token2) : undefined;\n  const {\n    ethPrice\n  } = useEthPrice();\n  useEffect(() => {\n    (async () => {\n      if (ethPrice.price && ethPrice.oneDayPrice) {\n        if (token1Address) {\n          const tokenInfo = await getTokenInfo(ethPrice.price, ethPrice.oneDayPrice, token1Address);\n\n          if (tokenInfo) {\n            setToken1Data(tokenInfo[0]);\n          }\n        }\n\n        if (token2Address) {\n          const tokenInfo = await getTokenInfo(ethPrice.price, ethPrice.oneDayPrice, token2Address);\n\n          if (tokenInfo) {\n            setToken2Data(tokenInfo[0]);\n          }\n        }\n      }\n    })();\n  }, [token1Address, token2Address, ethPrice.price, ethPrice.oneDayPrice]);\n\n  const TokenInfo = _ref2 => {\n    let {\n      currency,\n      tokenData\n    } = _ref2;\n    const priceUpPercent = Number(tokenData === null || tokenData === void 0 ? void 0 : tokenData.priceChangeUSD);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        p: 1,\n        display: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(CurrencyLogo, {\n          currency: currency\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          ml: 1,\n          flex: 1,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"small\", {\n              children: currency.symbol\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), tokenData ? /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"$\", formatNumber(tokenData === null || tokenData === void 0 ? void 0 : tokenData.priceUSD)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n              width: 60,\n              height: 14\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), tokenData ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [t('24h'), \":\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n              className: priceUpPercent > 0 ? 'text-success' : 'text-error',\n              children: [formatNumber(priceUpPercent), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: 60,\n            height: 12\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      p: 1,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-uppercase\",\n        children: [t('info'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), currency1 && /*#__PURE__*/_jsxDEV(TokenInfo, {\n      currency: currency1,\n      tokenData: token1Data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }, this), currency2 && /*#__PURE__*/_jsxDEV(TokenInfo, {\n      currency: currency2,\n      tokenData: token2Data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }, this), currency1 && currency2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        py: 2,\n        px: 1,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          mb: 1,\n          px: 1,\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: [currency1.symbol, \" / \", currency2.symbol]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: \"swapIcon\",\n            children: /*#__PURE__*/_jsxDEV(SwapHoriz, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SwapInfoTx, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(SwapProInfo, \"YmMq8Y2YKSyvEKVxaL8nc1GwPNQ=\", false, function () {\n  return [useTranslation, useEthPrice];\n});\n\n_c = SwapProInfo;\nexport default _c2 = /*#__PURE__*/React.memo(SwapProInfo);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SwapProInfo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/SwapPage/SwapProInfo.tsx"],"names":["React","useState","useEffect","Box","Divider","SwapHoriz","CurrencyLogo","getTokenInfo","formatNumber","unwrappedToken","Skeleton","SwapInfoTx","useTranslation","useEthPrice","SwapProInfo","token1","token2","transactions","t","token1Data","setToken1Data","token2Data","setToken2Data","token1Address","address","token2Address","currency1","undefined","currency2","ethPrice","price","oneDayPrice","tokenInfo","TokenInfo","currency","tokenData","priceUpPercent","Number","priceChangeUSD","symbol","priceUSD","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Divider } from '@material-ui/core';\nimport { SwapHoriz } from '@material-ui/icons';\nimport { Currency, Token } from '@uniswap/sdk';\nimport { CurrencyLogo } from 'components';\nimport { getTokenInfo, formatNumber } from 'utils';\nimport { unwrappedToken } from 'utils/wrappedCurrency';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport SwapInfoTx from './SwapInfoTx';\nimport { useTranslation } from 'react-i18next';\nimport { useEthPrice } from 'state/application/hooks';\n\nconst SwapProInfo: React.FC<{\n  token1?: Token;\n  token2?: Token;\n  transactions?: any[];\n}> = ({ token1, token2, transactions }) => {\n  const { t } = useTranslation();\n  const [token1Data, setToken1Data] = useState<any>(null);\n  const [token2Data, setToken2Data] = useState<any>(null);\n  const token1Address = token1?.address;\n  const token2Address = token2?.address;\n  const currency1 = token1 ? unwrappedToken(token1) : undefined;\n  const currency2 = token2 ? unwrappedToken(token2) : undefined;\n  const { ethPrice } = useEthPrice();\n\n  useEffect(() => {\n    (async () => {\n      if (ethPrice.price && ethPrice.oneDayPrice) {\n        if (token1Address) {\n          const tokenInfo = await getTokenInfo(\n            ethPrice.price,\n            ethPrice.oneDayPrice,\n            token1Address,\n          );\n          if (tokenInfo) {\n            setToken1Data(tokenInfo[0]);\n          }\n        }\n        if (token2Address) {\n          const tokenInfo = await getTokenInfo(\n            ethPrice.price,\n            ethPrice.oneDayPrice,\n            token2Address,\n          );\n          if (tokenInfo) {\n            setToken2Data(tokenInfo[0]);\n          }\n        }\n      }\n    })();\n  }, [token1Address, token2Address, ethPrice.price, ethPrice.oneDayPrice]);\n\n  const TokenInfo: React.FC<{ currency: Currency; tokenData: any }> = ({\n    currency,\n    tokenData,\n  }) => {\n    const priceUpPercent = Number(tokenData?.priceChangeUSD);\n    return (\n      <>\n        <Box p={1} display='flex'>\n          <CurrencyLogo currency={currency} />\n          <Box ml={1} flex={1}>\n            <Box className='flex justify-between'>\n              <small>{currency.symbol}</small>\n              {tokenData ? (\n                <small>${formatNumber(tokenData?.priceUSD)}</small>\n              ) : (\n                <Skeleton width={60} height={14} />\n              )}\n            </Box>\n            {tokenData ? (\n              <span>\n                {t('24h')}:{' '}\n                <span\n                  className={priceUpPercent > 0 ? 'text-success' : 'text-error'}\n                >\n                  {formatNumber(priceUpPercent)}%\n                </span>\n              </span>\n            ) : (\n              <Skeleton width={60} height={12} />\n            )}\n          </Box>\n        </Box>\n        <Divider />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <Box p={1}>\n        <p className='text-uppercase'>{t('info')}:</p>\n      </Box>\n      <Divider />\n      {currency1 && <TokenInfo currency={currency1} tokenData={token1Data} />}\n      {currency2 && <TokenInfo currency={currency2} tokenData={token2Data} />}\n      {currency1 && currency2 && (\n        <>\n          <Box py={2} px={1}>\n            <Box mb={1} px={1} className='flex items-center justify-between'>\n              <small>\n                {currency1.symbol} / {currency2.symbol}\n              </small>\n              <Box className='swapIcon'>\n                <SwapHoriz />\n              </Box>\n            </Box>\n            <SwapInfoTx transactions={transactions} />\n          </Box>\n          <Divider />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(SwapProInfo);\n"]},"metadata":{},"sourceType":"module"}