{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/ConfirmSwapModal/ConfirmSwapModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { currencyEquals } from '@uniswap/sdk';\nimport React, { useCallback, useMemo } from 'react';\nimport { TransactionConfirmationModal, TransactionErrorContent, ConfirmationModalContent } from 'components';\nimport SwapModalHeader from './SwapModalHeader';\nimport { formatTokenAmount } from 'utils';\nimport 'components/styles/ConfirmSwapModal.scss';\nimport { useTranslation } from 'react-i18next';\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction tradeMeaningfullyDiffers(tradeA, tradeB) {\n  return tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !tradeA.inputAmount.equalTo(tradeB.inputAmount) || !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) || !tradeA.outputAmount.equalTo(tradeB.outputAmount);\n}\n\nconst ConfirmSwapModal = _ref => {\n  _s();\n\n  var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n  let {\n    trade,\n    originalTrade,\n    onAcceptChanges,\n    allowedSlippage,\n    onConfirm,\n    onDismiss,\n    swapErrorMessage,\n    isOpen,\n    attemptingTxn,\n    txHash,\n    txPending\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const showAcceptChanges = useMemo(() => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)), [originalTrade, trade]);\n  const modalHeader = useCallback(() => {\n    return trade ? /*#__PURE__*/_jsxDEV(SwapModalHeader, {\n      trade: trade,\n      allowedSlippage: allowedSlippage,\n      onConfirm: onConfirm,\n      showAcceptChanges: showAcceptChanges,\n      onAcceptChanges: onAcceptChanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this) : null;\n  }, [allowedSlippage, onAcceptChanges, showAcceptChanges, trade, onConfirm]); // text to show while loading\n\n  const pendingText = t('swappingFor', {\n    amount1: formatTokenAmount(trade === null || trade === void 0 ? void 0 : trade.inputAmount),\n    symbol1: trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol,\n    amount2: formatTokenAmount(trade === null || trade === void 0 ? void 0 : trade.outputAmount),\n    symbol2: trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol\n  });\n  const confirmationContent = useCallback(() => swapErrorMessage ? /*#__PURE__*/_jsxDEV(TransactionErrorContent, {\n    onDismiss: onDismiss,\n    message: swapErrorMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n    title: t('confirmTx'),\n    onDismiss: onDismiss,\n    content: modalHeader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this), [t, onDismiss, modalHeader, swapErrorMessage]);\n  return /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    attemptingTxn: attemptingTxn,\n    hash: txHash,\n    txPending: txPending,\n    content: confirmationContent,\n    pendingText: pendingText,\n    modalContent: txPending ? t('submittedTxSwap') : t('swapSuccess')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfirmSwapModal, \"7/dC08OOchqcJ6XA35EpgyZWBug=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ConfirmSwapModal;\nexport default ConfirmSwapModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmSwapModal\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/ConfirmSwapModal/ConfirmSwapModal.tsx"],"names":["currencyEquals","React","useCallback","useMemo","TransactionConfirmationModal","TransactionErrorContent","ConfirmationModalContent","SwapModalHeader","formatTokenAmount","useTranslation","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","swapErrorMessage","isOpen","attemptingTxn","txHash","txPending","t","showAcceptChanges","Boolean","modalHeader","pendingText","amount1","symbol1","symbol","amount2","symbol2","confirmationContent"],"mappings":"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","sourcesContent":["import { currencyEquals, Trade } from '@uniswap/sdk';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  TransactionConfirmationModal,\n  TransactionErrorContent,\n  ConfirmationModalContent,\n} from 'components';\nimport SwapModalHeader from './SwapModalHeader';\nimport { formatTokenAmount } from 'utils';\nimport 'components/styles/ConfirmSwapModal.scss';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !currencyEquals(\n      tradeA.outputAmount.currency,\n      tradeB.outputAmount.currency,\n    ) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  );\n}\n\ninterface ConfirmSwapModalProps {\n  isOpen: boolean;\n  trade: Trade | undefined;\n  originalTrade: Trade | undefined;\n  attemptingTxn: boolean;\n  txPending?: boolean;\n  txHash: string | undefined;\n  recipient: string | null;\n  allowedSlippage: number;\n  onAcceptChanges: () => void;\n  onConfirm: () => void;\n  swapErrorMessage: string | undefined;\n  onDismiss: () => void;\n}\n\nconst ConfirmSwapModal: React.FC<ConfirmSwapModalProps> = ({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash,\n  txPending,\n}) => {\n  const { t } = useTranslation();\n  const showAcceptChanges = useMemo(\n    () =>\n      Boolean(\n        trade &&\n          originalTrade &&\n          tradeMeaningfullyDiffers(trade, originalTrade),\n      ),\n    [originalTrade, trade],\n  );\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        allowedSlippage={allowedSlippage}\n        onConfirm={onConfirm}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null;\n  }, [allowedSlippage, onAcceptChanges, showAcceptChanges, trade, onConfirm]);\n\n  // text to show while loading\n  const pendingText = t('swappingFor', {\n    amount1: formatTokenAmount(trade?.inputAmount),\n    symbol1: trade?.inputAmount?.currency?.symbol,\n    amount2: formatTokenAmount(trade?.outputAmount),\n    symbol2: trade?.outputAmount?.currency?.symbol,\n  });\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent\n          onDismiss={onDismiss}\n          message={swapErrorMessage}\n        />\n      ) : (\n        <ConfirmationModalContent\n          title={t('confirmTx')}\n          onDismiss={onDismiss}\n          content={modalHeader}\n        />\n      ),\n    [t, onDismiss, modalHeader, swapErrorMessage],\n  );\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      txPending={txPending}\n      content={confirmationContent}\n      pendingText={pendingText}\n      modalContent={txPending ? t('submittedTxSwap') : t('swapSuccess')}\n    />\n  );\n};\n\nexport default ConfirmSwapModal;\n"]},"metadata":{},"sourceType":"module"}