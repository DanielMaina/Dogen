{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaValidator = void 0;\n\nconst AJV = require(\"ajv\"); // namespace and constructor\n\n\nconst values = require(\"lodash.values\");\n\nconst schemas_1 = require(\"./schemas\");\n/**\n * A validator wrapping (AJV) [https://github.com/ajv-validator/ajv]\n */\n\n\nclass SchemaValidator {\n  /**\n   * Instantiates a SchemaValidator instance\n   */\n  constructor() {\n    let newSchemas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this._validator = new AJV({\n      schemaId: 'auto',\n      allErrors: true\n    });\n\n    this._validator.addSchema(values(schemas_1.schemas).filter(s => s !== undefined && s.id !== undefined));\n\n    this._validator.addSchema(newSchemas.filter(s => s !== undefined));\n  }\n  /**\n   * Add a schema to the validator. All schemas and sub-schemas must be added to\n   * the validator before the `validate` and `isValid` methods can be called with\n   * instances of that schema.\n   * @param schema The schema to add\n   */\n\n\n  addSchema(schemaObjectOrArray) {\n    const _schemas = Array.isArray(schemaObjectOrArray) ? schemaObjectOrArray : [schemaObjectOrArray];\n\n    for (const s of _schemas) {\n      try {\n        this._validator.addSchema(s); // AJV validates upon adding\n\n      } catch (err) {\n        // Ignore duplicate errors.\n        if (!err.message.endsWith('already exists')) {\n          throw err;\n        }\n      }\n    }\n  } // In order to validate a complex JS object using jsonschema, we must replace any complex\n  // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n  // complex types implement the `toString` method, we can stringify the object and\n  // then parse it. The resultant object can then be checked using jsonschema.\n\n  /**\n   * Validate the JS object conforms to a specific JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns The results of the validation\n   */\n\n\n  validate(instance, schema) {\n    this.isValid(instance, schema);\n    return this._validator; // errors field is returned here. Will be overwritten on the next validation.\n  }\n  /**\n   * Check whether an instance properly adheres to a JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns Whether or not the instance adheres to the schema\n   */\n\n\n  isValid(instance, schema) {\n    return this._validator.validate(schema, JSON.parse(JSON.stringify(instance)));\n  }\n\n}\n\nexports.SchemaValidator = SchemaValidator;","map":{"version":3,"sources":["../../src/schema_validator.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA,C,CAA4B;;;AAG5B,MAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AACA;;AAEG;;;AACH,MAAa,eAAb,CAA4B;AAExB;;AAEG;AACH,EAAA,WAAA,GAAqC;AAAA,QAAzB,UAAyB,uEAAF,EAAE;AACjC,SAAK,UAAL,GAAkB,IAAI,GAAJ,CAAQ;AAAE,MAAA,QAAQ,EAAE,MAAZ;AAAoB,MAAA,SAAS,EAAE;AAA/B,KAAR,CAAlB;;AACA,SAAK,UAAL,CAAgB,SAAhB,CAA0B,MAAM,CAAC,SAAA,CAAA,OAAD,CAAN,CAAgB,MAAhB,CAAuB,CAAC,IAAI,CAAC,KAAK,SAAN,IAAmB,CAAC,CAAC,EAAF,KAAS,SAAxD,CAA1B;;AACA,SAAK,UAAL,CAAgB,SAAhB,CAA0B,UAAU,CAAC,MAAX,CAAkB,CAAC,IAAI,CAAC,KAAK,SAA7B,CAA1B;AACH;AACD;;;;;AAKG;;;AACI,EAAA,SAAS,CAAC,mBAAD,EAAuC;AACnD,UAAM,QAAQ,GAAG,KAAK,CAAC,OAAN,CAAc,mBAAd,IAAqC,mBAArC,GAA2D,CAAC,mBAAD,CAA5E;;AACA,SAAK,MAAM,CAAX,IAAgB,QAAhB,EAA0B;AACtB,UAAI;AACA,aAAK,UAAL,CAAgB,SAAhB,CAA0B,CAA1B,EADA,CAC8B;;AACjC,OAFD,CAEE,OAAO,GAAP,EAAY;AACV;AACA,YAAI,CAAC,GAAG,CAAC,OAAJ,CAAY,QAAZ,CAAqB,gBAArB,CAAL,EAA6C;AACzC,gBAAM,GAAN;AACH;AACJ;AACJ;AACJ,GA5BuB,CA6BxB;AACA;AACA;AACA;;AACA;;;;;AAKG;;;AACI,EAAA,QAAQ,CAAC,QAAD,EAAgB,MAAhB,EAA8B;AACzC,SAAK,OAAL,CAAa,QAAb,EAAuB,MAAvB;AACA,WAAO,KAAK,UAAZ,CAFyC,CAEjB;AAC3B;AACD;;;;;AAKG;;;AACI,EAAA,OAAO,CAAC,QAAD,EAAgB,MAAhB,EAA8B;AACxC,WAAO,KAAK,UAAL,CAAgB,QAAhB,CAAyB,MAAzB,EAAiC,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,QAAf,CAAX,CAAjC,CAAP;AACH;;AAnDuB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaValidator = void 0;\nconst AJV = require(\"ajv\"); // namespace and constructor\nconst values = require(\"lodash.values\");\nconst schemas_1 = require(\"./schemas\");\n/**\n * A validator wrapping (AJV) [https://github.com/ajv-validator/ajv]\n */\nclass SchemaValidator {\n    /**\n     * Instantiates a SchemaValidator instance\n     */\n    constructor(newSchemas = []) {\n        this._validator = new AJV({ schemaId: 'auto', allErrors: true });\n        this._validator.addSchema(values(schemas_1.schemas).filter(s => s !== undefined && s.id !== undefined));\n        this._validator.addSchema(newSchemas.filter(s => s !== undefined));\n    }\n    /**\n     * Add a schema to the validator. All schemas and sub-schemas must be added to\n     * the validator before the `validate` and `isValid` methods can be called with\n     * instances of that schema.\n     * @param schema The schema to add\n     */\n    addSchema(schemaObjectOrArray) {\n        const _schemas = Array.isArray(schemaObjectOrArray) ? schemaObjectOrArray : [schemaObjectOrArray];\n        for (const s of _schemas) {\n            try {\n                this._validator.addSchema(s); // AJV validates upon adding\n            }\n            catch (err) {\n                // Ignore duplicate errors.\n                if (!err.message.endsWith('already exists')) {\n                    throw err;\n                }\n            }\n        }\n    }\n    // In order to validate a complex JS object using jsonschema, we must replace any complex\n    // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n    // complex types implement the `toString` method, we can stringify the object and\n    // then parse it. The resultant object can then be checked using jsonschema.\n    /**\n     * Validate the JS object conforms to a specific JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns The results of the validation\n     */\n    validate(instance, schema) {\n        this.isValid(instance, schema);\n        return this._validator; // errors field is returned here. Will be overwritten on the next validation.\n    }\n    /**\n     * Check whether an instance properly adheres to a JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns Whether or not the instance adheres to the schema\n     */\n    isValid(instance, schema) {\n        return this._validator.validate(schema, JSON.parse(JSON.stringify(instance)));\n    }\n}\nexports.SchemaValidator = SchemaValidator;\n//# sourceMappingURL=schema_validator.js.map"]},"metadata":{},"sourceType":"script"}