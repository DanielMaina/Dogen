{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport resolveENSContentHash from 'utils/resolveENSContentHash';\nimport { useActiveWeb3React } from 'hooks';\nimport { fetchDualFarmList } from 'state/dualfarms/actions';\nimport getDualFarmList from 'utils/getDualFarmList';\nexport function useFetchDualFarmListCallback() {\n  _s();\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch(); //TODO: support multi chain\n\n  const ensResolver = useCallback(ensName => {\n    if (!library) {\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n\n    return resolveENSContentHash(ensName, library);\n  }, [library]);\n  return useCallback(async listUrl => {\n    const requestId = nanoid();\n    dispatch(fetchDualFarmList.pending({\n      requestId,\n      url: listUrl\n    }));\n    return getDualFarmList(listUrl, ensResolver).then(dualFarmList => {\n      dispatch(fetchDualFarmList.fulfilled({\n        url: listUrl,\n        dualFarmList,\n        requestId\n      }));\n      return dualFarmList;\n    }).catch(error => {\n      console.debug(`Failed to get list at url ${listUrl}`, error);\n      dispatch(fetchDualFarmList.rejected({\n        url: listUrl,\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch, ensResolver]);\n}\n\n_s(useFetchDualFarmListCallback, \"mZc6LfjUc8DdbP36J0O4A2tIKqg=\", false, function () {\n  return [useActiveWeb3React, useDispatch];\n});","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/hooks/useFetchDualFarmListCallback.ts"],"names":["nanoid","useCallback","useDispatch","resolveENSContentHash","useActiveWeb3React","fetchDualFarmList","getDualFarmList","useFetchDualFarmListCallback","library","dispatch","ensResolver","ensName","Error","listUrl","requestId","pending","url","then","dualFarmList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAGA,OAAO,SAASC,4BAAT,GAEwB;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,kBAAkB,EAAtC;AACA,QAAMK,QAAQ,GAAGP,WAAW,EAA5B,CAF6B,CAI7B;;AACA,QAAMQ,WAAW,GAAGT,WAAW,CAC5BU,OAAD,IAAqB;AACnB,QAAI,CAACH,OAAL,EAAc;AACZ,YAAM,IAAII,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,WAAOT,qBAAqB,CAACQ,OAAD,EAAUH,OAAV,CAA5B;AACD,GAN4B,EAO7B,CAACA,OAAD,CAP6B,CAA/B;AAUA,SAAOP,WAAW,CAChB,MAAOY,OAAP,IAA2B;AACzB,UAAMC,SAAS,GAAGd,MAAM,EAAxB;AACAS,IAAAA,QAAQ,CAACJ,iBAAiB,CAACU,OAAlB,CAA0B;AAAED,MAAAA,SAAF;AAAaE,MAAAA,GAAG,EAAEH;AAAlB,KAA1B,CAAD,CAAR;AACA,WAAOP,eAAe,CAACO,OAAD,EAAUH,WAAV,CAAf,CACJO,IADI,CACEC,YAAD,IAAkB;AACtBT,MAAAA,QAAQ,CACNJ,iBAAiB,CAACc,SAAlB,CAA4B;AAC1BH,QAAAA,GAAG,EAAEH,OADqB;AAE1BK,QAAAA,YAF0B;AAG1BJ,QAAAA;AAH0B,OAA5B,CADM,CAAR;AAOA,aAAOI,YAAP;AACD,KAVI,EAWJE,KAXI,CAWGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,KAAR,CAAe,6BAA4BV,OAAQ,EAAnD,EAAsDQ,KAAtD;AACAZ,MAAAA,QAAQ,CACNJ,iBAAiB,CAACmB,QAAlB,CAA2B;AACzBR,QAAAA,GAAG,EAAEH,OADoB;AAEzBC,QAAAA,SAFyB;AAGzBW,QAAAA,YAAY,EAAEJ,KAAK,CAACK;AAHK,OAA3B,CADM,CAAR;AAOA,YAAML,KAAN;AACD,KArBI,CAAP;AAsBD,GA1Be,EA2BhB,CAACZ,QAAD,EAAWC,WAAX,CA3BgB,CAAlB;AA6BD;;GA9CeH,4B;UAGMH,kB,EACHF,W","sourcesContent":["import { nanoid } from '@reduxjs/toolkit';\nimport { ChainId } from '@uniswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors';\nimport { AppDispatch } from 'state';\nimport resolveENSContentHash from 'utils/resolveENSContentHash';\nimport { useActiveWeb3React } from 'hooks';\nimport { fetchDualFarmList } from 'state/dualfarms/actions';\nimport getDualFarmList from 'utils/getDualFarmList';\nimport { DualFarmListInfo } from 'types';\n\nexport function useFetchDualFarmListCallback(): (\n  listUrl: string,\n) => Promise<DualFarmListInfo> {\n  const { library } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n\n  //TODO: support multi chain\n  const ensResolver = useCallback(\n    (ensName: string) => {\n      if (!library) {\n        throw new Error('Could not construct mainnet ENS resolver');\n      }\n      return resolveENSContentHash(ensName, library);\n    },\n    [library],\n  );\n\n  return useCallback(\n    async (listUrl: string) => {\n      const requestId = nanoid();\n      dispatch(fetchDualFarmList.pending({ requestId, url: listUrl }));\n      return getDualFarmList(listUrl, ensResolver)\n        .then((dualFarmList) => {\n          dispatch(\n            fetchDualFarmList.fulfilled({\n              url: listUrl,\n              dualFarmList,\n              requestId,\n            }),\n          );\n          return dualFarmList;\n        })\n        .catch((error) => {\n          console.debug(`Failed to get list at url ${listUrl}`, error);\n          dispatch(\n            fetchDualFarmList.rejected({\n              url: listUrl,\n              requestId,\n              errorMessage: error.message,\n            }),\n          );\n          throw error;\n        });\n    },\n    [dispatch, ensResolver],\n  );\n}\n"]},"metadata":{},"sourceType":"module"}