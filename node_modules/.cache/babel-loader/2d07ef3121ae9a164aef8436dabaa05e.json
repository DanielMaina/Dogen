{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/StakeSyrupModal/StakeSyrupModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport { TokenAmount } from '@uniswap/sdk';\nimport { CustomModal, ColoredSlider, NumericalInput } from 'components';\nimport { useDerivedSyrupInfo } from 'state/stake/hooks';\nimport { ReactComponent as CloseIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/CloseIcon.svg\";\nimport { useTokenBalance } from 'state/wallet/hooks';\nimport { useActiveWeb3React } from 'hooks';\nimport { useApproveCallback, ApprovalState } from 'hooks/useApproveCallback';\nimport { useStakingContract } from 'hooks/useContract';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\nimport { useTransactionAdder, useTransactionFinalizer } from 'state/transactions/hooks';\nimport { wrappedCurrencyAmount } from 'utils/wrappedCurrency';\nimport { formatTokenAmount, maxAmountSpend, formatNumber, getSecondsOneDay, getExactTokenAmount, getValueTokenDecimals, getPartialTokenAmount } from 'utils';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StakeSyrupModal = _ref => {\n  _s();\n\n  var _syrup$stakedAmount, _syrup$stakedAmount2;\n\n  let {\n    open,\n    onClose,\n    syrup\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [attempting, setAttempting] = useState(false);\n  const [hash, setHash] = useState('');\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n  const finalizedTransaction = useTransactionFinalizer();\n  const userLiquidityUnstaked = useTokenBalance(account !== null && account !== void 0 ? account : undefined, (_syrup$stakedAmount = syrup.stakedAmount) === null || _syrup$stakedAmount === void 0 ? void 0 : _syrup$stakedAmount.token);\n  const [typedValue, setTypedValue] = useState('');\n  const [stakePercent, setStakePercent] = useState(0);\n  const [approving, setApproving] = useState(false);\n  const maxAmountInput = maxAmountSpend(userLiquidityUnstaked);\n  const {\n    parsedAmount,\n    error\n  } = useDerivedSyrupInfo(typedValue, (_syrup$stakedAmount2 = syrup.stakedAmount) === null || _syrup$stakedAmount2 === void 0 ? void 0 : _syrup$stakedAmount2.token, userLiquidityUnstaked);\n  const parsedAmountWrapped = wrappedCurrencyAmount(parsedAmount, chainId);\n  let hypotheticalRewardRate = syrup.rewardRate ? new TokenAmount(syrup.rewardRate.token, '0') : undefined;\n\n  if (parsedAmountWrapped && parsedAmountWrapped.greaterThan('0')) {\n    hypotheticalRewardRate = syrup.stakedAmount && syrup.totalStakedAmount ? syrup.getHypotheticalRewardRate(syrup.stakedAmount.add(parsedAmountWrapped), syrup.totalStakedAmount.add(parsedAmountWrapped)) : undefined;\n  }\n\n  const deadline = useTransactionDeadline();\n  const [approval, approveCallback] = useApproveCallback(parsedAmount, syrup.stakingRewardAddress);\n  const [signatureData, setSignatureData] = useState(null);\n  const stakingContract = useStakingContract(syrup.stakingRewardAddress);\n\n  const onAttemptToApprove = async () => {\n    if (!library || !deadline) throw new Error(t('missingdependencies'));\n    const liquidityAmount = parsedAmount;\n    if (!liquidityAmount) throw new Error(t('missingliquidity'));\n    return approveCallback();\n  };\n\n  const onStake = async () => {\n    setAttempting(true);\n\n    if (stakingContract && parsedAmount && deadline) {\n      if (approval === ApprovalState.APPROVED) {\n        stakingContract.stake(`0x${parsedAmount.raw.toString(16)}`, {\n          gasLimit: 350000\n        }).then(async response => {\n          addTransaction(response, {\n            summary: `${t('deposit')} ${syrup.stakingToken.symbol}`\n          });\n\n          try {\n            const receipt = await response.wait();\n            finalizedTransaction(receipt, {\n              summary: `${t('deposit')} ${syrup.stakingToken.symbol}`\n            });\n            setAttempting(false);\n            setStakePercent(0);\n            setTypedValue('');\n          } catch (e) {\n            setAttempting(false);\n            setStakePercent(0);\n            setTypedValue('');\n          }\n        }).catch(error => {\n          setAttempting(false);\n          console.log(error);\n        });\n      } else if (signatureData) {\n        stakingContract.stakeWithPermit(`0x${parsedAmount.raw.toString(16)}`, signatureData.deadline, signatureData.v, signatureData.r, signatureData.s, {\n          gasLimit: 350000\n        }).then(response => {\n          addTransaction(response, {\n            summary: t('depositliquidity')\n          });\n          setHash(response.hash);\n        }).catch(error => {\n          setAttempting(false);\n          console.log(error);\n        });\n      } else {\n        setAttempting(false);\n        throw new Error(t('stakewithoutapproval'));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CustomModal, {\n    open: open,\n    onClose: onClose,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      paddingX: 3,\n      paddingY: 4,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [t('stake'), \" \", syrup.stakingToken.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          className: \"cursor-pointer\",\n          onClick: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 3,\n        className: \"bg-default border-gray14\",\n        borderRadius: \"10px\",\n        padding: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: syrup.stakingToken.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [t('balance'), \": \", formatTokenAmount(maxAmountInput)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(NumericalInput, {\n            placeholder: \"0\",\n            value: typedValue,\n            fontSize: 28,\n            onUserInput: value => {\n              var _syrup$stakedAmount3;\n\n              setSignatureData(null);\n              const totalBalance = getExactTokenAmount(maxAmountInput);\n              const exactTypedValue = getValueTokenDecimals(value, (_syrup$stakedAmount3 = syrup.stakedAmount) === null || _syrup$stakedAmount3 === void 0 ? void 0 : _syrup$stakedAmount3.token); // this is to avoid input amount more than balance\n\n              if (Number(exactTypedValue) <= totalBalance) {\n                setTypedValue(exactTypedValue);\n                setStakePercent(totalBalance > 0 ? Number(exactTypedValue) / totalBalance * 100 : 0);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-primary text-bold cursor-pointer\",\n            onClick: () => {\n              setTypedValue(maxAmountInput ? maxAmountInput.toExact() : '0');\n              setStakePercent(100);\n            },\n            children: t('max')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            flex: 1,\n            mr: 2,\n            mt: 0.5,\n            children: /*#__PURE__*/_jsxDEV(ColoredSlider, {\n              min: 1,\n              max: 100,\n              step: 1,\n              value: stakePercent,\n              handleChange: (_, value) => {\n                const percent = value;\n                setStakePercent(percent);\n                setTypedValue(getPartialTokenAmount(percent, maxAmountInput));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [Math.min(stakePercent, 100).toLocaleString(), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: t('dailyRewards')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [hypotheticalRewardRate ? formatNumber(Number(hypotheticalRewardRate.toExact()) * getSecondsOneDay()) : '-', ' ', syrup.token.symbol, \" / \", t('day')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 3,\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: \"48%\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"stakeButton\",\n            disabled: approving || approval !== ApprovalState.NOT_APPROVED,\n            onClick: async () => {\n              setApproving(true);\n\n              try {\n                await onAttemptToApprove();\n                setApproving(false);\n              } catch (e) {\n                setApproving(false);\n              }\n            },\n            children: approving ? `${t('approving')}...` : t('approve')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: \"48%\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"stakeButton\",\n            disabled: !!error || attempting || approval !== ApprovalState.APPROVED,\n            onClick: onStake,\n            children: attempting ? `${t('staking')}...` : t('stake')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeSyrupModal, \"CKfoXF38fOc1A2ZpeO5rAlAF+lI=\", false, function () {\n  return [useTranslation, useActiveWeb3React, useTransactionAdder, useTransactionFinalizer, useTokenBalance, useDerivedSyrupInfo, useTransactionDeadline, useApproveCallback, useStakingContract];\n});\n\n_c = StakeSyrupModal;\nexport default StakeSyrupModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeSyrupModal\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/StakeSyrupModal/StakeSyrupModal.tsx"],"names":["React","useState","Box","Button","TokenAmount","CustomModal","ColoredSlider","NumericalInput","useDerivedSyrupInfo","useTokenBalance","useActiveWeb3React","useApproveCallback","ApprovalState","useStakingContract","useTransactionDeadline","useTransactionAdder","useTransactionFinalizer","wrappedCurrencyAmount","formatTokenAmount","maxAmountSpend","formatNumber","getSecondsOneDay","getExactTokenAmount","getValueTokenDecimals","getPartialTokenAmount","useTranslation","StakeSyrupModal","open","onClose","syrup","t","attempting","setAttempting","hash","setHash","account","chainId","library","addTransaction","finalizedTransaction","userLiquidityUnstaked","undefined","stakedAmount","token","typedValue","setTypedValue","stakePercent","setStakePercent","approving","setApproving","maxAmountInput","parsedAmount","error","parsedAmountWrapped","hypotheticalRewardRate","rewardRate","greaterThan","totalStakedAmount","getHypotheticalRewardRate","add","deadline","approval","approveCallback","stakingRewardAddress","signatureData","setSignatureData","stakingContract","onAttemptToApprove","Error","liquidityAmount","onStake","APPROVED","stake","raw","toString","gasLimit","then","response","summary","stakingToken","symbol","receipt","wait","e","catch","console","log","stakeWithPermit","v","r","s","value","totalBalance","exactTypedValue","Number","toExact","_","percent","Math","min","toLocaleString","NOT_APPROVED"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport { TokenAmount } from '@uniswap/sdk';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { CustomModal, ColoredSlider, NumericalInput } from 'components';\nimport { useDerivedSyrupInfo } from 'state/stake/hooks';\nimport { SyrupInfo } from 'types';\nimport { ReactComponent as CloseIcon } from 'assets/images/CloseIcon.svg';\nimport { useTokenBalance } from 'state/wallet/hooks';\nimport { useActiveWeb3React } from 'hooks';\nimport { useApproveCallback, ApprovalState } from 'hooks/useApproveCallback';\nimport { useStakingContract } from 'hooks/useContract';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\nimport {\n  useTransactionAdder,\n  useTransactionFinalizer,\n} from 'state/transactions/hooks';\nimport { wrappedCurrencyAmount } from 'utils/wrappedCurrency';\nimport {\n  formatTokenAmount,\n  maxAmountSpend,\n  formatNumber,\n  getSecondsOneDay,\n  getExactTokenAmount,\n  getValueTokenDecimals,\n  getPartialTokenAmount,\n} from 'utils';\nimport { useTranslation } from 'react-i18next';\n\ninterface StakeSyrupModalProps {\n  open: boolean;\n  onClose: () => void;\n  syrup: SyrupInfo;\n}\n\nconst StakeSyrupModal: React.FC<StakeSyrupModalProps> = ({\n  open,\n  onClose,\n  syrup,\n}) => {\n  const { t } = useTranslation();\n  const [attempting, setAttempting] = useState(false);\n  const [hash, setHash] = useState('');\n  const { account, chainId, library } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n  const finalizedTransaction = useTransactionFinalizer();\n  const userLiquidityUnstaked = useTokenBalance(\n    account ?? undefined,\n    syrup.stakedAmount?.token,\n  );\n  const [typedValue, setTypedValue] = useState('');\n  const [stakePercent, setStakePercent] = useState(0);\n  const [approving, setApproving] = useState(false);\n  const maxAmountInput = maxAmountSpend(userLiquidityUnstaked);\n  const { parsedAmount, error } = useDerivedSyrupInfo(\n    typedValue,\n    syrup.stakedAmount?.token,\n    userLiquidityUnstaked,\n  );\n\n  const parsedAmountWrapped = wrappedCurrencyAmount(parsedAmount, chainId);\n\n  let hypotheticalRewardRate = syrup.rewardRate\n    ? new TokenAmount(syrup.rewardRate.token, '0')\n    : undefined;\n  if (parsedAmountWrapped && parsedAmountWrapped.greaterThan('0')) {\n    hypotheticalRewardRate =\n      syrup.stakedAmount && syrup.totalStakedAmount\n        ? syrup.getHypotheticalRewardRate(\n            syrup.stakedAmount.add(parsedAmountWrapped),\n            syrup.totalStakedAmount.add(parsedAmountWrapped),\n          )\n        : undefined;\n  }\n\n  const deadline = useTransactionDeadline();\n\n  const [approval, approveCallback] = useApproveCallback(\n    parsedAmount,\n    syrup.stakingRewardAddress,\n  );\n  const [signatureData, setSignatureData] = useState<{\n    v: number;\n    r: string;\n    s: string;\n    deadline: number;\n  } | null>(null);\n\n  const stakingContract = useStakingContract(syrup.stakingRewardAddress);\n\n  const onAttemptToApprove = async () => {\n    if (!library || !deadline) throw new Error(t('missingdependencies'));\n    const liquidityAmount = parsedAmount;\n    if (!liquidityAmount) throw new Error(t('missingliquidity'));\n    return approveCallback();\n  };\n\n  const onStake = async () => {\n    setAttempting(true);\n    if (stakingContract && parsedAmount && deadline) {\n      if (approval === ApprovalState.APPROVED) {\n        stakingContract\n          .stake(`0x${parsedAmount.raw.toString(16)}`, { gasLimit: 350000 })\n          .then(async (response: TransactionResponse) => {\n            addTransaction(response, {\n              summary: `${t('deposit')} ${syrup.stakingToken.symbol}`,\n            });\n            try {\n              const receipt = await response.wait();\n              finalizedTransaction(receipt, {\n                summary: `${t('deposit')} ${syrup.stakingToken.symbol}`,\n              });\n              setAttempting(false);\n              setStakePercent(0);\n              setTypedValue('');\n            } catch (e) {\n              setAttempting(false);\n              setStakePercent(0);\n              setTypedValue('');\n            }\n          })\n          .catch((error: any) => {\n            setAttempting(false);\n            console.log(error);\n          });\n      } else if (signatureData) {\n        stakingContract\n          .stakeWithPermit(\n            `0x${parsedAmount.raw.toString(16)}`,\n            signatureData.deadline,\n            signatureData.v,\n            signatureData.r,\n            signatureData.s,\n            { gasLimit: 350000 },\n          )\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              summary: t('depositliquidity'),\n            });\n            setHash(response.hash);\n          })\n          .catch((error: any) => {\n            setAttempting(false);\n            console.log(error);\n          });\n      } else {\n        setAttempting(false);\n        throw new Error(t('stakewithoutapproval'));\n      }\n    }\n  };\n\n  return (\n    <CustomModal open={open} onClose={onClose}>\n      <Box paddingX={3} paddingY={4}>\n        <Box className='flex justify-between items-center'>\n          <h5>\n            {t('stake')} {syrup.stakingToken.symbol}\n          </h5>\n          <CloseIcon className='cursor-pointer' onClick={onClose} />\n        </Box>\n        <Box\n          mt={3}\n          className='bg-default border-gray14'\n          borderRadius='10px'\n          padding='16px'\n        >\n          <Box className='flex items-center justify-between'>\n            <small>{syrup.stakingToken.symbol}</small>\n            <small>\n              {t('balance')}: {formatTokenAmount(maxAmountInput)}\n            </small>\n          </Box>\n          <Box mt={2} className='flex items-center'>\n            <NumericalInput\n              placeholder='0'\n              value={typedValue}\n              fontSize={28}\n              onUserInput={(value) => {\n                setSignatureData(null);\n                const totalBalance = getExactTokenAmount(maxAmountInput);\n                const exactTypedValue = getValueTokenDecimals(\n                  value,\n                  syrup.stakedAmount?.token,\n                );\n                // this is to avoid input amount more than balance\n                if (Number(exactTypedValue) <= totalBalance) {\n                  setTypedValue(exactTypedValue);\n                  setStakePercent(\n                    totalBalance > 0\n                      ? (Number(exactTypedValue) / totalBalance) * 100\n                      : 0,\n                  );\n                }\n              }}\n            />\n            <span\n              className='text-primary text-bold cursor-pointer'\n              onClick={() => {\n                setTypedValue(maxAmountInput ? maxAmountInput.toExact() : '0');\n                setStakePercent(100);\n              }}\n            >\n              {t('max')}\n            </span>\n          </Box>\n          <Box className='flex items-center'>\n            <Box flex={1} mr={2} mt={0.5}>\n              <ColoredSlider\n                min={1}\n                max={100}\n                step={1}\n                value={stakePercent}\n                handleChange={(_, value) => {\n                  const percent = value as number;\n                  setStakePercent(percent);\n                  setTypedValue(getPartialTokenAmount(percent, maxAmountInput));\n                }}\n              />\n            </Box>\n            <small>{Math.min(stakePercent, 100).toLocaleString()}%</small>\n          </Box>\n        </Box>\n        <Box mt={2} className='flex items-center justify-between'>\n          <p>{t('dailyRewards')}</p>\n          <p>\n            {hypotheticalRewardRate\n              ? formatNumber(\n                  Number(hypotheticalRewardRate.toExact()) * getSecondsOneDay(),\n                )\n              : '-'}{' '}\n            {syrup.token.symbol} / {t('day')}\n          </p>\n        </Box>\n        <Box mt={3} className='flex justify-between items-center'>\n          <Box width='48%'>\n            <Button\n              className='stakeButton'\n              disabled={approving || approval !== ApprovalState.NOT_APPROVED}\n              onClick={async () => {\n                setApproving(true);\n                try {\n                  await onAttemptToApprove();\n                  setApproving(false);\n                } catch (e) {\n                  setApproving(false);\n                }\n              }}\n            >\n              {approving ? `${t('approving')}...` : t('approve')}\n            </Button>\n          </Box>\n          <Box width='48%'>\n            <Button\n              className='stakeButton'\n              disabled={\n                !!error || attempting || approval !== ApprovalState.APPROVED\n              }\n              onClick={onStake}\n            >\n              {attempting ? `${t('staking')}...` : t('stake')}\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    </CustomModal>\n  );\n};\n\nexport default StakeSyrupModal;\n"]},"metadata":{},"sourceType":"module"}