{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/StakeQuickModal/StakeQuickModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport { CustomModal, ColoredSlider, NumericalInput } from 'components';\nimport { useDerivedLairInfo } from 'state/stake/hooks';\nimport { ReactComponent as CloseIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/CloseIcon.svg\";\nimport { useCurrencyBalance, useTokenBalance } from 'state/wallet/hooks';\nimport { useActiveWeb3React } from 'hooks';\nimport { GlobalConst, GlobalValue } from 'constants/index';\nimport { useApproveCallback, ApprovalState } from 'hooks/useApproveCallback';\nimport { useLairContract } from 'hooks/useContract';\nimport { useTransactionAdder, useTransactionFinalizer } from 'state/transactions/hooks';\nimport { formatTokenAmount } from 'utils';\nimport 'components/styles/StakeModal.scss';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StakeQuickModal = _ref => {\n  _s();\n\n  let {\n    open,\n    onClose\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [attempting, setAttempting] = useState(false);\n  const {\n    account\n  } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n  const finalizedTransaction = useTransactionFinalizer();\n  const quickToken = GlobalValue.tokens.COMMON.OLD_QUICK;\n  const quickBalance = useCurrencyBalance(account !== null && account !== void 0 ? account : undefined, quickToken);\n  const userLiquidityUnstaked = useTokenBalance(account !== null && account !== void 0 ? account : undefined, quickToken);\n  const [typedValue, setTypedValue] = useState('');\n  const [stakePercent, setStakePercent] = useState(0);\n  const [approving, setApproving] = useState(false);\n  const {\n    parsedAmount,\n    error\n  } = useDerivedLairInfo(typedValue, quickToken, userLiquidityUnstaked);\n  const lairContract = useLairContract();\n  const [approval, approveCallback] = useApproveCallback(parsedAmount, GlobalConst.addresses.LAIR_ADDRESS);\n\n  const onAttemptToApprove = async () => {\n    if (!lairContract) throw new Error(t('missingdependencies'));\n    const liquidityAmount = parsedAmount;\n    if (!liquidityAmount) throw new Error(t('missingliquidity'));\n    return approveCallback();\n  };\n\n  const onStake = async () => {\n    setAttempting(true);\n\n    if (lairContract && parsedAmount) {\n      if (approval === ApprovalState.APPROVED) {\n        try {\n          const response = await lairContract.enter(`0x${parsedAmount.raw.toString(16)}`, {\n            gasLimit: 350000\n          });\n          addTransaction(response, {\n            summary: `${t('stake')} QUICK`\n          });\n          const receipt = await response.wait();\n          finalizedTransaction(receipt, {\n            summary: `${t('deposit')} dQUICK`\n          });\n          setAttempting(false);\n          setStakePercent(0);\n          setTypedValue('');\n        } catch (err) {\n          setAttempting(false);\n        }\n      } else {\n        setAttempting(false);\n        throw new Error(t('stakewithoutapproval'));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CustomModal, {\n    open: open,\n    onClose: onClose,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      paddingX: 3,\n      paddingY: 4,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [t('stake'), \" QUICK\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          className: \"cursor-pointer\",\n          onClick: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 3,\n        className: \"bg-default border-gray14\",\n        borderRadius: \"10px\",\n        padding: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          className: \"flex items-center justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"QUICK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [t('balance'), \": \", formatTokenAmount(quickBalance)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(NumericalInput, {\n            placeholder: \"0\",\n            value: typedValue,\n            fontSize: 28,\n            onUserInput: value => {\n              const totalBalance = quickBalance ? Number(quickBalance.toExact()) : 0;\n              setTypedValue(value);\n              setStakePercent(totalBalance > 0 ? Number(value) / totalBalance * 100 : 0);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-primary text-bold cursor-pointer\",\n            onClick: () => {\n              setTypedValue(quickBalance ? quickBalance.toExact() : '0');\n              setStakePercent(100);\n            },\n            children: t('max')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            flex: 1,\n            mr: 2,\n            mt: 0.5,\n            children: /*#__PURE__*/_jsxDEV(ColoredSlider, {\n              min: 1,\n              max: 100,\n              step: 1,\n              value: stakePercent,\n              handleChange: (evt, value) => {\n                setStakePercent(value);\n                setTypedValue(quickBalance ? stakePercent < 100 ? (Number(quickBalance.toExact()) * stakePercent / 100).toString() : quickBalance.toExact() : '0');\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [Math.min(stakePercent, 100).toLocaleString(), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 3,\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          width: \"48%\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"stakeButton\",\n            disabled: approving || approval !== ApprovalState.NOT_APPROVED,\n            onClick: async () => {\n              setApproving(true);\n\n              try {\n                await onAttemptToApprove();\n                setApproving(false);\n              } catch (e) {\n                setApproving(false);\n              }\n            },\n            children: approving ? `${t('approving')}...` : t('approve')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          width: \"48%\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"stakeButton\",\n            disabled: !!error || attempting || approval !== ApprovalState.APPROVED,\n            onClick: onStake,\n            children: attempting ? `${t('staking')}...` : t('stake')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeQuickModal, \"uTNRjrYzfXB6FjYZRe/3fJQxjNw=\", false, function () {\n  return [useTranslation, useActiveWeb3React, useTransactionAdder, useTransactionFinalizer, useCurrencyBalance, useTokenBalance, useDerivedLairInfo, useLairContract, useApproveCallback];\n});\n\n_c = StakeQuickModal;\nexport default StakeQuickModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeQuickModal\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/StakeQuickModal/StakeQuickModal.tsx"],"names":["React","useState","Box","Button","CustomModal","ColoredSlider","NumericalInput","useDerivedLairInfo","useCurrencyBalance","useTokenBalance","useActiveWeb3React","GlobalConst","GlobalValue","useApproveCallback","ApprovalState","useLairContract","useTransactionAdder","useTransactionFinalizer","formatTokenAmount","useTranslation","StakeQuickModal","open","onClose","t","attempting","setAttempting","account","addTransaction","finalizedTransaction","quickToken","tokens","COMMON","OLD_QUICK","quickBalance","undefined","userLiquidityUnstaked","typedValue","setTypedValue","stakePercent","setStakePercent","approving","setApproving","parsedAmount","error","lairContract","approval","approveCallback","addresses","LAIR_ADDRESS","onAttemptToApprove","Error","liquidityAmount","onStake","APPROVED","response","enter","raw","toString","gasLimit","summary","receipt","wait","err","value","totalBalance","Number","toExact","evt","Math","min","toLocaleString","NOT_APPROVED","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { CustomModal, ColoredSlider, NumericalInput } from 'components';\nimport { useDerivedLairInfo } from 'state/stake/hooks';\nimport { ReactComponent as CloseIcon } from 'assets/images/CloseIcon.svg';\nimport { useCurrencyBalance, useTokenBalance } from 'state/wallet/hooks';\nimport { useActiveWeb3React } from 'hooks';\nimport { GlobalConst, GlobalValue } from 'constants/index';\nimport { useApproveCallback, ApprovalState } from 'hooks/useApproveCallback';\nimport { useLairContract } from 'hooks/useContract';\nimport {\n  useTransactionAdder,\n  useTransactionFinalizer,\n} from 'state/transactions/hooks';\nimport { formatTokenAmount } from 'utils';\nimport 'components/styles/StakeModal.scss';\nimport { useTranslation } from 'react-i18next';\n\ninterface StakeQuickModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nconst StakeQuickModal: React.FC<StakeQuickModalProps> = ({ open, onClose }) => {\n  const { t } = useTranslation();\n  const [attempting, setAttempting] = useState(false);\n  const { account } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n  const finalizedTransaction = useTransactionFinalizer();\n  const quickToken = GlobalValue.tokens.COMMON.OLD_QUICK;\n  const quickBalance = useCurrencyBalance(account ?? undefined, quickToken);\n  const userLiquidityUnstaked = useTokenBalance(\n    account ?? undefined,\n    quickToken,\n  );\n\n  const [typedValue, setTypedValue] = useState('');\n  const [stakePercent, setStakePercent] = useState(0);\n  const [approving, setApproving] = useState(false);\n  const { parsedAmount, error } = useDerivedLairInfo(\n    typedValue,\n    quickToken,\n    userLiquidityUnstaked,\n  );\n\n  const lairContract = useLairContract();\n  const [approval, approveCallback] = useApproveCallback(\n    parsedAmount,\n    GlobalConst.addresses.LAIR_ADDRESS,\n  );\n\n  const onAttemptToApprove = async () => {\n    if (!lairContract) throw new Error(t('missingdependencies'));\n    const liquidityAmount = parsedAmount;\n    if (!liquidityAmount) throw new Error(t('missingliquidity'));\n    return approveCallback();\n  };\n\n  const onStake = async () => {\n    setAttempting(true);\n    if (lairContract && parsedAmount) {\n      if (approval === ApprovalState.APPROVED) {\n        try {\n          const response: TransactionResponse = await lairContract.enter(\n            `0x${parsedAmount.raw.toString(16)}`,\n            {\n              gasLimit: 350000,\n            },\n          );\n          addTransaction(response, {\n            summary: `${t('stake')} QUICK`,\n          });\n          const receipt = await response.wait();\n          finalizedTransaction(receipt, {\n            summary: `${t('deposit')} dQUICK`,\n          });\n          setAttempting(false);\n          setStakePercent(0);\n          setTypedValue('');\n        } catch (err) {\n          setAttempting(false);\n        }\n      } else {\n        setAttempting(false);\n        throw new Error(t('stakewithoutapproval'));\n      }\n    }\n  };\n\n  return (\n    <CustomModal open={open} onClose={onClose}>\n      <Box paddingX={3} paddingY={4}>\n        <Box className='flex items-center justify-between'>\n          <h5>{t('stake')} QUICK</h5>\n          <CloseIcon className='cursor-pointer' onClick={onClose} />\n        </Box>\n        <Box\n          mt={3}\n          className='bg-default border-gray14'\n          borderRadius='10px'\n          padding='16px'\n        >\n          <Box className='flex items-center justify-between'>\n            <small>QUICK</small>\n            <small>\n              {t('balance')}: {formatTokenAmount(quickBalance)}\n            </small>\n          </Box>\n          <Box mt={2} className='flex items-center'>\n            <NumericalInput\n              placeholder='0'\n              value={typedValue}\n              fontSize={28}\n              onUserInput={(value) => {\n                const totalBalance = quickBalance\n                  ? Number(quickBalance.toExact())\n                  : 0;\n                setTypedValue(value);\n                setStakePercent(\n                  totalBalance > 0 ? (Number(value) / totalBalance) * 100 : 0,\n                );\n              }}\n            />\n            <span\n              className='text-primary text-bold cursor-pointer'\n              onClick={() => {\n                setTypedValue(quickBalance ? quickBalance.toExact() : '0');\n                setStakePercent(100);\n              }}\n            >\n              {t('max')}\n            </span>\n          </Box>\n          <Box className='flex items-center'>\n            <Box flex={1} mr={2} mt={0.5}>\n              <ColoredSlider\n                min={1}\n                max={100}\n                step={1}\n                value={stakePercent}\n                handleChange={(evt: any, value) => {\n                  setStakePercent(value as number);\n                  setTypedValue(\n                    quickBalance\n                      ? stakePercent < 100\n                        ? (\n                            (Number(quickBalance.toExact()) * stakePercent) /\n                            100\n                          ).toString()\n                        : quickBalance.toExact()\n                      : '0',\n                  );\n                }}\n              />\n            </Box>\n            <small>{Math.min(stakePercent, 100).toLocaleString()}%</small>\n          </Box>\n        </Box>\n        <Box mt={3} className='flex items-center justify-between'>\n          <Box width='48%'>\n            <Button\n              className='stakeButton'\n              disabled={approving || approval !== ApprovalState.NOT_APPROVED}\n              onClick={async () => {\n                setApproving(true);\n                try {\n                  await onAttemptToApprove();\n                  setApproving(false);\n                } catch (e) {\n                  setApproving(false);\n                }\n              }}\n            >\n              {approving ? `${t('approving')}...` : t('approve')}\n            </Button>\n          </Box>\n          <Box width='48%'>\n            <Button\n              className='stakeButton'\n              disabled={\n                !!error || attempting || approval !== ApprovalState.APPROVED\n              }\n              onClick={onStake}\n            >\n              {attempting ? `${t('staking')}...` : t('stake')}\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    </CustomModal>\n  );\n};\n\nexport default StakeQuickModal;\n"]},"metadata":{},"sourceType":"module"}