{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport SafeAppsSDK from '@gnosis.pm/safe-apps-sdk'; // taken from ethers.js, compatible interface with web3 provider\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nclass SafeAppProvider {\n  constructor(safe, sdk) {\n    this.safe = void 0;\n    this.sdk = void 0;\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  get chainId() {\n    return this.safe.chainId;\n  }\n\n  sendAsync(request, callback) {\n    this.send(request, callback);\n  }\n\n  send(request, callback) {\n    if (!request) callback('Undefined request');\n    this.request(request).then(result => callback(null, {\n      jsonrpc: '2.0',\n      id: request.id,\n      result\n    })).catch(error => callback(error, null));\n  }\n\n  async request(request) {\n    const params = request.params;\n\n    switch (request.method) {\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'eth_sendTransaction':\n        console.error({\n          params\n        });\n        const tx = await this.sdk.txs.send({\n          txs: params.map(tx => {\n            return {\n              value: '0',\n              data: '0x',\n              ...tx\n            };\n          })\n        });\n        return tx.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n\n        return this.sdk.eth.getTransactionByHash([txHash]);\n\n      case 'eth_getTransactionReceipt':\n        {\n          let txHash = params[0];\n\n          try {\n            const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n            txHash = resp.txHash || txHash;\n          } catch (e) {}\n\n          return this.sdk.eth.getTransactionReceipt([txHash]);\n        }\n\n      case 'eth_estimateGas':\n        {\n          return 0;\n        }\n\n      case 'eth_call':\n        {\n          return this.sdk.eth.call([params[0], params[1]]);\n        }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n\n}\n\nexport class SafeAppConnector extends AbstractConnector {\n  constructor() {\n    super(...arguments);\n    this.sdk = new SafeAppsSDK();\n    this.safe = void 0;\n    this.provider = void 0;\n  }\n\n  async activate() {\n    this.safe = await this.sdk.safe.getInfo();\n    return {\n      provider: await this.getProvider(),\n      chainId: await this.getChainId(),\n      account: await this.getAccount()\n    };\n  }\n\n  async getSafeInfo() {\n    if (!this.safe) {\n      this.safe = await this.sdk.safe.getInfo();\n    }\n\n    return this.safe;\n  }\n\n  async getProvider() {\n    if (!this.provider) {\n      const safe = await this.getSafeInfo();\n      this.provider = new SafeAppProvider(safe, this.sdk);\n    }\n\n    return this.provider;\n  }\n\n  async getChainId() {\n    const provider = await this.getProvider();\n    return provider.chainId;\n  }\n\n  async getAccount() {\n    const safe = await this.getSafeInfo();\n    return safe.safeAddress;\n  }\n\n  deactivate() {\n    return;\n  }\n\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/connectors/SafeApp.ts"],"names":["AbstractConnector","SafeAppsSDK","getLowerCase","value","toLowerCase","SafeAppProvider","constructor","safe","sdk","chainId","sendAsync","request","callback","send","then","result","jsonrpc","id","catch","error","params","method","toString","console","tx","txs","map","data","safeTxHash","block","eth","getBlockByNumber","number","getBalance","getCode","getStorageAt","getBlockByHash","txHash","resp","getBySafeTxHash","e","getTransactionByHash","getTransactionReceipt","call","getPastLogs","Error","SafeAppConnector","provider","activate","getInfo","getProvider","getChainId","account","getAccount","getSafeInfo","safeAddress","deactivate"],"mappings":"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","sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector';\nimport SafeAppsSDK, { SafeInfo } from '@gnosis.pm/safe-apps-sdk';\n\n// taken from ethers.js, compatible interface with web3 provider\ntype AsyncSendable = {\n  isMetaMask?: boolean;\n  host?: string;\n  path?: string;\n  sendAsync?: (\n    request: any,\n    callback: (error: any, response: any) => void,\n  ) => void;\n  send?: (request: any, callback: (error: any, response: any) => void) => void;\n};\n\nfunction getLowerCase(value: string): string {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\n\nclass SafeAppProvider implements AsyncSendable {\n  private readonly safe: SafeInfo;\n  private readonly sdk: SafeAppsSDK;\n\n  constructor(safe: SafeInfo, sdk: SafeAppsSDK) {\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  public get chainId(): number {\n    return this.safe.chainId;\n  }\n\n  sendAsync(request: any, callback: (error: any, response: any) => void): void {\n    this.send(request, callback);\n  }\n\n  send(request: any, callback: (error: any, response?: any) => void): void {\n    if (!request) callback('Undefined request');\n    this.request(request)\n      .then((result) =>\n        callback(null, { jsonrpc: '2.0', id: request.id, result }),\n      )\n      .catch((error) => callback(error, null));\n  }\n\n  async request(request: { method: string; params: any[] }): Promise<any> {\n    const params = request.params;\n    switch (request.method) {\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'eth_sendTransaction':\n        console.error({ params });\n        const tx = await this.sdk.txs.send({\n          txs: params.map((tx) => {\n            return {\n              value: '0',\n              data: '0x',\n              ...tx,\n            };\n          }),\n        });\n        return tx.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([\n          getLowerCase(params[0]),\n          params[1],\n          params[2],\n        ]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionByHash([txHash]);\n\n      case 'eth_getTransactionReceipt': {\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionReceipt([txHash]);\n      }\n\n      case 'eth_estimateGas': {\n        return 0;\n      }\n\n      case 'eth_call': {\n        return this.sdk.eth.call([params[0], params[1]]);\n      }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n}\n\nexport class SafeAppConnector extends AbstractConnector {\n  private readonly sdk = new SafeAppsSDK();\n  private safe: SafeInfo | undefined;\n  private provider: SafeAppProvider | undefined;\n\n  async activate(): Promise<{\n    provider: SafeAppProvider;\n    chainId: number;\n    account: string;\n  }> {\n    this.safe = await this.sdk.safe.getInfo();\n    return {\n      provider: await this.getProvider(),\n      chainId: await this.getChainId(),\n      account: await this.getAccount(),\n    };\n  }\n\n  public async getSafeInfo(): Promise<SafeInfo> {\n    if (!this.safe) {\n      this.safe = await this.sdk.safe.getInfo();\n    }\n    return this.safe;\n  }\n\n  public async getProvider(): Promise<SafeAppProvider> {\n    if (!this.provider) {\n      const safe = await this.getSafeInfo();\n      this.provider = new SafeAppProvider(safe, this.sdk);\n    }\n    return this.provider;\n  }\n\n  public async getChainId(): Promise<number> {\n    const provider = await this.getProvider();\n    return provider.chainId;\n  }\n\n  public async getAccount(): Promise<string> {\n    const safe = await this.getSafeInfo();\n    return safe.safeAddress;\n  }\n\n  public deactivate(): void {\n    return;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}