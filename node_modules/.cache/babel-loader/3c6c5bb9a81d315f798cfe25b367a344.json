{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/Web3ReactManager/Web3ReactManager.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'react-i18next';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport { network } from 'connectors';\nimport { useEagerConnect, useInactiveListener } from 'hooks';\nimport { GlobalConst } from 'constants/index';\nimport 'components/styles/Web3ReactManager.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Web3ReactManager = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const {\n    active\n  } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React(GlobalConst.utils.NetworkContextName); // try to eagerly connect to an injected provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]); // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n\n  useInactiveListener(!triedEager); // handle delayed loader state\n\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []); // on page load, do nothing until we've tried to connect to the injected connector\n\n  if (!triedEager) {\n    return null;\n  } // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n\n\n  if (!active && networkError) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      className: \"messageWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: t('unknownError')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  } // if neither context is active, spin\n\n\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/_jsxDEV(Box, {\n      className: \"messageWrapper\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this) : null;\n  }\n\n  return children;\n};\n\n_s(Web3ReactManager, \"ZKkBl0PSln7rz4oc0i55Qot6Cxc=\", false, function () {\n  return [useTranslation, useWeb3React, useWeb3React, useEagerConnect, useInactiveListener];\n});\n\n_c = Web3ReactManager;\nexport default Web3ReactManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3ReactManager\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/Web3ReactManager/Web3ReactManager.tsx"],"names":["React","useState","useEffect","useWeb3React","useTranslation","Box","CircularProgress","network","useEagerConnect","useInactiveListener","GlobalConst","Web3ReactManager","children","t","active","networkActive","error","networkError","activate","activateNetwork","utils","NetworkContextName","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,mBAAtC;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,OAArD;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAO,yCAAP;;;AAEA,MAAMC,gBAAqD,GAAG,QAExD;AAAA;;AAAA,MAFyD;AAC7DC,IAAAA;AAD6D,GAEzD;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQT,cAAc,EAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAaX,YAAY,EAA/B;AACA,QAAM;AACJW,IAAAA,MAAM,EAAEC,aADJ;AAEJC,IAAAA,KAAK,EAAEC,YAFH;AAGJC,IAAAA,QAAQ,EAAEC;AAHN,MAIFhB,YAAY,CAACO,WAAW,CAACU,KAAZ,CAAkBC,kBAAnB,CAJhB,CAHI,CASJ;;AACA,QAAMC,UAAU,GAAGd,eAAe,EAAlC,CAVI,CAYJ;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,UAAU,IAAI,CAACP,aAAf,IAAgC,CAACE,YAAjC,IAAiD,CAACH,MAAtD,EAA8D;AAC5DK,MAAAA,eAAe,CAACZ,OAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACe,UAAD,EAAaP,aAAb,EAA4BE,YAA5B,EAA0CE,eAA1C,EAA2DL,MAA3D,CAJM,CAAT,CAbI,CAmBJ;;AACAL,EAAAA,mBAAmB,CAAC,CAACa,UAAF,CAAnB,CApBI,CAsBJ;;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,KAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAFyB,EAEvB,GAFuB,CAA1B;AAIA,WAAO,MAAM;AACXG,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GARQ,EAQN,EARM,CAAT,CAxBI,CAkCJ;;AACA,MAAI,CAACH,UAAL,EAAiB;AACf,WAAO,IAAP;AACD,GArCG,CAuCJ;;;AACA,MAAI,CAACR,MAAD,IAAWG,YAAf,EAA6B;AAC3B,wBACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE;AAAG,QAAA,SAAS,EAAC,SAAb;AAAA,kBAAwBJ,CAAC,CAAC,cAAD;AAAzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GA9CG,CAgDJ;;;AACA,MAAI,CAACC,MAAD,IAAW,CAACC,aAAhB,EAA+B;AAC7B,WAAOQ,UAAU,gBACf,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADe,GAIb,IAJJ;AAKD;;AAED,SAAOX,QAAP;AACD,CA5DD;;GAAMD,gB;UAGUP,c,EACKD,Y,EAKfA,Y,EAGeK,e,EAUnBC,mB;;;KAtBIE,gB;AA8DN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'react-i18next';\nimport { Box, CircularProgress } from '@material-ui/core';\nimport { network } from 'connectors';\nimport { useEagerConnect, useInactiveListener } from 'hooks';\nimport { GlobalConst } from 'constants/index';\nimport 'components/styles/Web3ReactManager.scss';\n\nconst Web3ReactManager: React.FC<{ children: JSX.Element }> = ({\n  children,\n}) => {\n  const { t } = useTranslation();\n  const { active } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork,\n  } = useWeb3React(GlobalConst.utils.NetworkContextName);\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]);\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager);\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null;\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <Box className='messageWrapper'>\n        <p className='message'>{t('unknownError')}</p>\n      </Box>\n    );\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <Box className='messageWrapper'>\n        <CircularProgress />\n      </Box>\n    ) : null;\n  }\n\n  return children;\n};\n\nexport default Web3ReactManager;\n"]},"metadata":{},"sourceType":"module"}