{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/WalletModal/WalletModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport React, { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport ReactGA from 'react-ga';\nimport { Box } from '@material-ui/core';\nimport MetamaskIcon from 'assets/images/metamask.png';\nimport { ReactComponent as Close } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/CloseIcon.svg\";\nimport { fortmatic, injected, portis, safeApp } from 'connectors';\nimport { OVERLAY_READY } from 'connectors/Fortmatic';\nimport { GlobalConst, SUPPORTED_WALLETS } from 'constants/index';\nimport usePrevious from 'hooks/usePrevious';\nimport { ApplicationModal } from 'state/application/actions';\nimport { useModalOpen, useWalletModalToggle } from 'state/application/hooks';\nimport { AccountDetails, CustomModal } from 'components';\nimport { useTranslation } from 'react-i18next';\nimport Option from './Option';\nimport PendingView from './PendingView';\nimport 'components/styles/WalletModal.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WALLET_VIEWS = {\n  OPTIONS: 'options',\n  OPTIONS_SECONDARY: 'options_secondary',\n  ACCOUNT: 'account',\n  PENDING: 'pending'\n};\n\nconst WalletModal = _ref => {\n  _s();\n\n  let {\n    pendingTransactions,\n    confirmedTransactions,\n    ENSName\n  } = _ref;\n  const {\n    t\n  } = useTranslation(); // important that these are destructed from the account-specific web3-react context\n\n  const {\n    active,\n    account,\n    connector,\n    activate,\n    error,\n    deactivate\n  } = useWeb3React();\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\n  const [pendingWallet, setPendingWallet] = useState();\n  const [pendingError, setPendingError] = useState();\n  const walletModalOpen = useModalOpen(ApplicationModal.WALLET);\n  const toggleWalletModal = useWalletModalToggle();\n  const previousAccount = usePrevious(account); // close on connection, when logged out before\n\n  useEffect(() => {\n    if (account && !previousAccount && walletModalOpen) {\n      toggleWalletModal();\n    }\n\n    if (!walletModalOpen && error) {\n      deactivate();\n    }\n  }, [account, previousAccount, toggleWalletModal, walletModalOpen, deactivate, error]); // always reset to account view\n\n  useEffect(() => {\n    if (walletModalOpen) {\n      setPendingError(false);\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [walletModalOpen]); // close modal when a connection is successful\n\n  const activePrevious = usePrevious(active);\n  const connectorPrevious = usePrevious(connector);\n  useEffect(() => {\n    if (walletModalOpen && (active && !activePrevious || connector && connector !== connectorPrevious && !error)) {\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [setWalletView, active, error, connector, walletModalOpen, activePrevious, connectorPrevious]);\n\n  const tryActivation = async connector => {\n    var _connector$walletConn, _connector$walletConn2;\n\n    let name = '';\n    Object.keys(SUPPORTED_WALLETS).map(key => {\n      if (connector === SUPPORTED_WALLETS[key].connector) {\n        return name = SUPPORTED_WALLETS[key].name;\n      }\n\n      return true;\n    }); // log selected wallet\n\n    ReactGA.event({\n      category: 'Wallet',\n      action: 'Change Wallet',\n      label: name\n    });\n    setPendingWallet(connector); // set wallet for pending view\n\n    setWalletView(WALLET_VIEWS.PENDING); // if the connector is walletconnect and the user has already tried to connect, manually reset the connector\n\n    if (connector instanceof WalletConnectConnector && (_connector$walletConn = connector.walletConnectProvider) !== null && _connector$walletConn !== void 0 && (_connector$walletConn2 = _connector$walletConn.wc) !== null && _connector$walletConn2 !== void 0 && _connector$walletConn2.uri) {\n      connector.walletConnectProvider = undefined;\n    }\n\n    connector && activate(connector, undefined, true).catch(error => {\n      if (error instanceof UnsupportedChainIdError) {\n        activate(connector); // a little janky...can't use setError because the connector isn't set\n      } else {\n        setPendingError(true);\n      }\n    });\n  }; // close wallet modal if fortmatic modal is active\n\n\n  useEffect(() => {\n    fortmatic.on(OVERLAY_READY, () => {\n      toggleWalletModal();\n    });\n  }, [toggleWalletModal]); // get wallets user can switch too, depending on device/browser\n\n  function getOptions() {\n    const {\n      ethereum,\n      web3\n    } = window;\n    const isMetamask = ethereum && !ethereum.isBitKeep && ethereum.isMetaMask;\n    const isBlockWallet = ethereum && ethereum.isBlockWallet;\n    const isCypherD = ethereum && ethereum.isCypherD;\n    const isBitKeep = ethereum && ethereum.isBitKeep;\n    return Object.keys(SUPPORTED_WALLETS).map(key => {\n      const option = SUPPORTED_WALLETS[key]; //disable safe app by in the list\n\n      if (option.connector === safeApp) {\n        return null;\n      } // check for mobile options\n\n\n      if (isMobile) {\n        //disable portis on mobile for now\n        if (option.connector === portis) {\n          return null;\n        }\n\n        if (!web3 && !ethereum && option.mobile) {\n          return /*#__PURE__*/_jsxDEV(Option, {\n            onClick: () => {\n              option.connector !== connector && !option.href && tryActivation(option.connector);\n            },\n            id: `connect-${key}`,\n            active: option.connector === connector && (connector !== injected || isCypherD === (option.name === GlobalConst.walletName.CYPHERD) || isBlockWallet === (option.name === GlobalConst.walletName.BLOCKWALLET) || isBitKeep === (option.name === GlobalConst.walletName.BITKEEP) || isMetamask === (option.name === GlobalConst.walletName.METAMASK)),\n            color: option.color,\n            link: option.href,\n            header: option.name,\n            subheader: null,\n            icon: option.iconName\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this);\n        }\n\n        return null;\n      } // overwrite injected when needed\n\n\n      if (option.connector === injected) {\n        // don't show injected if there's no injected provider\n        if (!(web3 || ethereum)) {\n          if (option.name === GlobalConst.walletName.METAMASK) {\n            return /*#__PURE__*/_jsxDEV(Option, {\n              id: `connect-${key}`,\n              color: '#E8831D',\n              header: t('installMetamask'),\n              subheader: null,\n              link: 'https://metamask.io/',\n              icon: MetamaskIcon\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this);\n          } else {\n            return null; //dont want to return install twice\n          }\n        } // don't return metamask if injected provider isn't metamask\n        else if (option.name === GlobalConst.walletName.METAMASK && !isMetamask) {\n          return null;\n        } else if (option.name === GlobalConst.walletName.BITKEEP && !isBitKeep) {\n          return null;\n        } else if (option.name === GlobalConst.walletName.BLOCKWALLET && !isBlockWallet) {\n          return null;\n        } else if (option.name === GlobalConst.walletName.CYPHERD && !isCypherD) {\n          return null;\n        } // likewise for generic\n        else if (option.name === GlobalConst.walletName.INJECTED && (isMetamask || isBitKeep || isBlockWallet || isCypherD)) {\n          return null;\n        }\n      } // return rest of options\n\n\n      return !isMobile && !option.mobileOnly && /*#__PURE__*/_jsxDEV(Option, {\n        id: `connect-${key}`,\n        onClick: () => {\n          option.connector === connector ? setWalletView(WALLET_VIEWS.ACCOUNT) : !option.href && tryActivation(option.connector);\n        },\n        active: option.connector === connector && (connector !== injected || isCypherD === (option.name === GlobalConst.walletName.CYPHERD) || isBlockWallet === (option.name === GlobalConst.walletName.BLOCKWALLET) || isBitKeep === (option.name === GlobalConst.walletName.BITKEEP) || isMetamask === (option.name === GlobalConst.walletName.METAMASK)),\n        color: option.color,\n        link: option.href,\n        header: option.name,\n        subheader: null //use option.descriptio to bring back multi-line\n        ,\n        icon: option.iconName\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this);\n    });\n  }\n\n  function getModalContent() {\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        position: \"relative\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          position: \"absolute\",\n          top: \"16px\",\n          right: \"16px\",\n          display: \"flex\",\n          children: /*#__PURE__*/_jsxDEV(Close, {\n            className: \"cursor-pointer\",\n            onClick: toggleWalletModal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: error instanceof UnsupportedChainIdError ? t('wrongNetwork') : t('errorConnect')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 3,\n          mb: 2,\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: error instanceof UnsupportedChainIdError ? t('connectPolygonNetwork') : t('errorConnectRefresh')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (account && walletView === WALLET_VIEWS.ACCOUNT) {\n      return /*#__PURE__*/_jsxDEV(AccountDetails, {\n        toggleWalletModal: toggleWalletModal,\n        pendingTransactions: pendingTransactions,\n        confirmedTransactions: confirmedTransactions,\n        ENSName: ENSName,\n        openOptions: () => setWalletView(WALLET_VIEWS.OPTIONS)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      paddingX: 3,\n      paddingY: 4,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: t('connectWallet')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Close, {\n          className: \"cursor-pointer\",\n          onClick: toggleWalletModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 4,\n        children: [walletView === WALLET_VIEWS.PENDING ? /*#__PURE__*/_jsxDEV(PendingView, {\n          connector: pendingWallet,\n          error: pendingError,\n          setPendingError: setPendingError,\n          tryActivation: tryActivation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this) : getOptions(), walletView !== WALLET_VIEWS.PENDING && /*#__PURE__*/_jsxDEV(Box, {\n          className: \"blurb\",\n          children: [/*#__PURE__*/_jsxDEV(\"small\", {\n            children: t('newToMatic')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://docs.matic.network/docs/develop/wallets/getting-started\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [t('learnWallet'), \" \\u2197\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CustomModal, {\n    open: walletModalOpen,\n    onClose: toggleWalletModal,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: \"walletModalWrapper\",\n      children: getModalContent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WalletModal, \"9MI4/CzV5S6qLT+TIHP3VW9kWyI=\", false, function () {\n  return [useTranslation, useWeb3React, useModalOpen, useWalletModalToggle, usePrevious, usePrevious, usePrevious];\n});\n\n_c = WalletModal;\nexport default WalletModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletModal\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/WalletModal/WalletModal.tsx"],"names":["UnsupportedChainIdError","useWeb3React","WalletConnectConnector","React","useEffect","useState","isMobile","ReactGA","Box","MetamaskIcon","fortmatic","injected","portis","safeApp","OVERLAY_READY","GlobalConst","SUPPORTED_WALLETS","usePrevious","ApplicationModal","useModalOpen","useWalletModalToggle","AccountDetails","CustomModal","useTranslation","Option","PendingView","WALLET_VIEWS","OPTIONS","OPTIONS_SECONDARY","ACCOUNT","PENDING","WalletModal","pendingTransactions","confirmedTransactions","ENSName","t","active","account","connector","activate","error","deactivate","walletView","setWalletView","pendingWallet","setPendingWallet","pendingError","setPendingError","walletModalOpen","WALLET","toggleWalletModal","previousAccount","activePrevious","connectorPrevious","tryActivation","name","Object","keys","map","key","event","category","action","label","walletConnectProvider","wc","uri","undefined","catch","on","getOptions","ethereum","web3","window","isMetamask","isBitKeep","isMetaMask","isBlockWallet","isCypherD","option","mobile","href","walletName","CYPHERD","BLOCKWALLET","BITKEEP","METAMASK","color","iconName","INJECTED","mobileOnly","getModalContent"],"mappings":";;;AACA,SAASA,uBAAT,EAAkCC,YAAlC,QAAsD,kBAAtD;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAEA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,EAAsCC,OAAtC,QAAqD,YAArD;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,iBAA/C;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,yBAAnD;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,YAA5C;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,oCAAP;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,SADU;AAEnBC,EAAAA,iBAAiB,EAAE,mBAFA;AAGnBC,EAAAA,OAAO,EAAE,SAHU;AAInBC,EAAAA,OAAO,EAAE;AAJU,CAArB;;AAaA,MAAMC,WAAuC,GAAG,QAI1C;AAAA;;AAAA,MAJ2C;AAC/CC,IAAAA,mBAD+C;AAE/CC,IAAAA,qBAF+C;AAG/CC,IAAAA;AAH+C,GAI3C;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQZ,cAAc,EAA5B,CADI,CAEJ;;AACA,QAAM;AACJa,IAAAA,MADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA;AANI,MAOFxC,YAAY,EAPhB;AASA,QAAM,CAACyC,UAAD,EAAaC,aAAb,IAA8BtC,QAAQ,CAACqB,YAAY,CAACG,OAAd,CAA5C;AAEA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoCxC,QAAQ,EAAlD;AAIA,QAAM,CAACyC,YAAD,EAAeC,eAAf,IAAkC1C,QAAQ,EAAhD;AAEA,QAAM2C,eAAe,GAAG7B,YAAY,CAACD,gBAAgB,CAAC+B,MAAlB,CAApC;AACA,QAAMC,iBAAiB,GAAG9B,oBAAoB,EAA9C;AAEA,QAAM+B,eAAe,GAAGlC,WAAW,CAACoB,OAAD,CAAnC,CAvBI,CAyBJ;;AACAjC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiC,OAAO,IAAI,CAACc,eAAZ,IAA+BH,eAAnC,EAAoD;AAClDE,MAAAA,iBAAiB;AAClB;;AACD,QAAI,CAACF,eAAD,IAAoBR,KAAxB,EAA+B;AAC7BC,MAAAA,UAAU;AACX;AACF,GAPQ,EAON,CACDJ,OADC,EAEDc,eAFC,EAGDD,iBAHC,EAIDF,eAJC,EAKDP,UALC,EAMDD,KANC,CAPM,CAAT,CA1BI,CA0CJ;;AACApC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI4C,eAAJ,EAAqB;AACnBD,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAJ,MAAAA,aAAa,CAACjB,YAAY,CAACG,OAAd,CAAb;AACD;AACF,GALQ,EAKN,CAACmB,eAAD,CALM,CAAT,CA3CI,CAkDJ;;AACA,QAAMI,cAAc,GAAGnC,WAAW,CAACmB,MAAD,CAAlC;AACA,QAAMiB,iBAAiB,GAAGpC,WAAW,CAACqB,SAAD,CAArC;AACAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QACE4C,eAAe,KACbZ,MAAM,IAAI,CAACgB,cAAZ,IACEd,SAAS,IAAIA,SAAS,KAAKe,iBAA3B,IAAgD,CAACb,KAFrC,CADjB,EAIE;AACAG,MAAAA,aAAa,CAACjB,YAAY,CAACG,OAAd,CAAb;AACD;AACF,GARQ,EAQN,CACDc,aADC,EAEDP,MAFC,EAGDI,KAHC,EAIDF,SAJC,EAKDU,eALC,EAMDI,cANC,EAODC,iBAPC,CARM,CAAT;;AAkBA,QAAMC,aAAa,GAAG,MAAOhB,SAAP,IAAoD;AAAA;;AACxE,QAAIiB,IAAI,GAAG,EAAX;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYzC,iBAAZ,EAA+B0C,GAA/B,CAAoCC,GAAD,IAAS;AAC1C,UAAIrB,SAAS,KAAKtB,iBAAiB,CAAC2C,GAAD,CAAjB,CAAuBrB,SAAzC,EAAoD;AAClD,eAAQiB,IAAI,GAAGvC,iBAAiB,CAAC2C,GAAD,CAAjB,CAAuBJ,IAAtC;AACD;;AACD,aAAO,IAAP;AACD,KALD,EAFwE,CAQxE;;AACAhD,IAAAA,OAAO,CAACqD,KAAR,CAAc;AACZC,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,MAAM,EAAE,eAFI;AAGZC,MAAAA,KAAK,EAAER;AAHK,KAAd;AAKAV,IAAAA,gBAAgB,CAACP,SAAD,CAAhB,CAdwE,CAc3C;;AAC7BK,IAAAA,aAAa,CAACjB,YAAY,CAACI,OAAd,CAAb,CAfwE,CAiBxE;;AACA,QACEQ,SAAS,YAAYpC,sBAArB,6BACAoC,SAAS,CAAC0B,qBADV,4EACA,sBAAiCC,EADjC,mDACA,uBAAqCC,GAFvC,EAGE;AACA5B,MAAAA,SAAS,CAAC0B,qBAAV,GAAkCG,SAAlC;AACD;;AAED7B,IAAAA,SAAS,IACPC,QAAQ,CAACD,SAAD,EAAY6B,SAAZ,EAAuB,IAAvB,CAAR,CAAqCC,KAArC,CAA4C5B,KAAD,IAAW;AACpD,UAAIA,KAAK,YAAYxC,uBAArB,EAA8C;AAC5CuC,QAAAA,QAAQ,CAACD,SAAD,CAAR,CAD4C,CACvB;AACtB,OAFD,MAEO;AACLS,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,KAND,CADF;AAQD,GAjCD,CAvEI,CA0GJ;;;AACA3C,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,SAAS,CAAC2D,EAAV,CAAavD,aAAb,EAA4B,MAAM;AAChCoC,MAAAA,iBAAiB;AAClB,KAFD;AAGD,GAJQ,EAIN,CAACA,iBAAD,CAJM,CAAT,CA3GI,CAiHJ;;AACA,WAASoB,UAAT,GAAsB;AACpB,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAqBC,MAA3B;AACA,UAAMC,UAAU,GAAGH,QAAQ,IAAI,CAACA,QAAQ,CAACI,SAAtB,IAAmCJ,QAAQ,CAACK,UAA/D;AACA,UAAMC,aAAa,GAAGN,QAAQ,IAAIA,QAAQ,CAACM,aAA3C;AACA,UAAMC,SAAS,GAAGP,QAAQ,IAAIA,QAAQ,CAACO,SAAvC;AACA,UAAMH,SAAS,GAAGJ,QAAQ,IAAIA,QAAQ,CAACI,SAAvC;AACA,WAAOnB,MAAM,CAACC,IAAP,CAAYzC,iBAAZ,EAA+B0C,GAA/B,CAAoCC,GAAD,IAAS;AACjD,YAAMoB,MAAM,GAAG/D,iBAAiB,CAAC2C,GAAD,CAAhC,CADiD,CAEjD;;AACA,UAAIoB,MAAM,CAACzC,SAAP,KAAqBzB,OAAzB,EAAkC;AAChC,eAAO,IAAP;AACD,OALgD,CAMjD;;;AACA,UAAIP,QAAJ,EAAc;AACZ;AACA,YAAIyE,MAAM,CAACzC,SAAP,KAAqB1B,MAAzB,EAAiC;AAC/B,iBAAO,IAAP;AACD;;AAED,YAAI,CAAC4D,IAAD,IAAS,CAACD,QAAV,IAAsBQ,MAAM,CAACC,MAAjC,EAAyC;AACvC,8BACE,QAAC,MAAD;AACE,YAAA,OAAO,EAAE,MAAM;AACbD,cAAAA,MAAM,CAACzC,SAAP,KAAqBA,SAArB,IACE,CAACyC,MAAM,CAACE,IADV,IAEE3B,aAAa,CAACyB,MAAM,CAACzC,SAAR,CAFf;AAGD,aALH;AAME,YAAA,EAAE,EAAG,WAAUqB,GAAI,EANrB;AAQE,YAAA,MAAM,EACJoB,MAAM,CAACzC,SAAP,KAAqBA,SAArB,KACCA,SAAS,KAAK3B,QAAd,IACCmE,SAAS,MACNC,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBC,OADjC,CADV,IAGCN,aAAa,MACVE,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBE,WAD7B,CAHd,IAKCT,SAAS,MACNI,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBG,OADjC,CALV,IAOCX,UAAU,MACPK,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBI,QADhC,CARZ,CATJ;AAoBE,YAAA,KAAK,EAAEP,MAAM,CAACQ,KApBhB;AAqBE,YAAA,IAAI,EAAER,MAAM,CAACE,IArBf;AAsBE,YAAA,MAAM,EAAEF,MAAM,CAACxB,IAtBjB;AAuBE,YAAA,SAAS,EAAE,IAvBb;AAwBE,YAAA,IAAI,EAAEwB,MAAM,CAACS;AAxBf,aAOO7B,GAPP;AAAA;AAAA;AAAA;AAAA,kBADF;AA4BD;;AACD,eAAO,IAAP;AACD,OA5CgD,CA8CjD;;;AACA,UAAIoB,MAAM,CAACzC,SAAP,KAAqB3B,QAAzB,EAAmC;AACjC;AACA,YAAI,EAAE6D,IAAI,IAAID,QAAV,CAAJ,EAAyB;AACvB,cAAIQ,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBI,QAA3C,EAAqD;AACnD,gCACE,QAAC,MAAD;AACE,cAAA,EAAE,EAAG,WAAU3B,GAAI,EADrB;AAGE,cAAA,KAAK,EAAE,SAHT;AAIE,cAAA,MAAM,EAAExB,CAAC,CAAC,iBAAD,CAJX;AAKE,cAAA,SAAS,EAAE,IALb;AAME,cAAA,IAAI,EAAE,sBANR;AAOE,cAAA,IAAI,EAAE1B;AAPR,eAEOkD,GAFP;AAAA;AAAA;AAAA;AAAA,oBADF;AAWD,WAZD,MAYO;AACL,mBAAO,IAAP,CADK,CACQ;AACd;AACF,SAhBD,CAiBA;AAjBA,aAkBK,IACHoB,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBI,QAAvC,IACA,CAACZ,UAFE,EAGH;AACA,iBAAO,IAAP;AACD,SALI,MAKE,IACLK,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBG,OAAvC,IACA,CAACV,SAFI,EAGL;AACA,iBAAO,IAAP;AACD,SALM,MAKA,IACLI,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBE,WAAvC,IACA,CAACP,aAFI,EAGL;AACA,iBAAO,IAAP;AACD,SALM,MAKA,IACLE,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBC,OAAvC,IACA,CAACL,SAFI,EAGL;AACA,iBAAO,IAAP;AACD,SALM,CAMP;AANO,aAOF,IACHC,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBO,QAAvC,KACCf,UAAU,IAAIC,SAAd,IAA2BE,aAA3B,IAA4CC,SAD7C,CADG,EAGH;AACA,iBAAO,IAAP;AACD;AACF,OA/FgD,CAiGjD;;;AACA,aACE,CAACxE,QAAD,IACA,CAACyE,MAAM,CAACW,UADR,iBAEE,QAAC,MAAD;AACE,QAAA,EAAE,EAAG,WAAU/B,GAAI,EADrB;AAEE,QAAA,OAAO,EAAE,MAAM;AACboB,UAAAA,MAAM,CAACzC,SAAP,KAAqBA,SAArB,GACIK,aAAa,CAACjB,YAAY,CAACG,OAAd,CADjB,GAEI,CAACkD,MAAM,CAACE,IAAR,IAAgB3B,aAAa,CAACyB,MAAM,CAACzC,SAAR,CAFjC;AAGD,SANH;AAQE,QAAA,MAAM,EACJyC,MAAM,CAACzC,SAAP,KAAqBA,SAArB,KACCA,SAAS,KAAK3B,QAAd,IACCmE,SAAS,MACNC,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBC,OADjC,CADV,IAGCN,aAAa,MACVE,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBE,WAD7B,CAHd,IAKCT,SAAS,MACNI,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBG,OADjC,CALV,IAOCX,UAAU,MACPK,MAAM,CAACxB,IAAP,KAAgBxC,WAAW,CAACmE,UAAZ,CAAuBI,QADhC,CARZ,CATJ;AAoBE,QAAA,KAAK,EAAEP,MAAM,CAACQ,KApBhB;AAqBE,QAAA,IAAI,EAAER,MAAM,CAACE,IArBf;AAsBE,QAAA,MAAM,EAAEF,MAAM,CAACxB,IAtBjB;AAuBE,QAAA,SAAS,EAAE,IAvBb,CAuBmB;AAvBnB;AAwBE,QAAA,IAAI,EAAEwB,MAAM,CAACS;AAxBf,SAOO7B,GAPP;AAAA;AAAA;AAAA;AAAA,cAHJ;AA+BD,KAjIM,CAAP;AAkID;;AAED,WAASgC,eAAT,GAA2B;AACzB,QAAInD,KAAJ,EAAW;AACT,0BACE,QAAC,GAAD;AAAK,QAAA,QAAQ,EAAC,UAAd;AAAA,gCACE,QAAC,GAAD;AAAK,UAAA,QAAQ,EAAC,UAAd;AAAyB,UAAA,GAAG,EAAC,MAA7B;AAAoC,UAAA,KAAK,EAAC,MAA1C;AAAiD,UAAA,OAAO,EAAC,MAAzD;AAAA,iCACE,QAAC,KAAD;AAAO,YAAA,SAAS,EAAC,gBAAjB;AAAkC,YAAA,OAAO,EAAEU;AAA3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,SAAS,EAAC,QAAtB;AAAA,iCACE;AAAA,sBACGV,KAAK,YAAYxC,uBAAjB,GACGmC,CAAC,CAAC,cAAD,CADJ,GAEGA,CAAC,CAAC,cAAD;AAHP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF,eAWE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,EAAE,EAAE,CAAhB;AAAmB,UAAA,SAAS,EAAC,QAA7B;AAAA,iCACE;AAAA,sBACGK,KAAK,YAAYxC,uBAAjB,GACGmC,CAAC,CAAC,uBAAD,CADJ,GAEGA,CAAC,CAAC,qBAAD;AAHP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAqBD;;AACD,QAAIE,OAAO,IAAIK,UAAU,KAAKhB,YAAY,CAACG,OAA3C,EAAoD;AAClD,0BACE,QAAC,cAAD;AACE,QAAA,iBAAiB,EAAEqB,iBADrB;AAEE,QAAA,mBAAmB,EAAElB,mBAFvB;AAGE,QAAA,qBAAqB,EAAEC,qBAHzB;AAIE,QAAA,OAAO,EAAEC,OAJX;AAKE,QAAA,WAAW,EAAE,MAAMS,aAAa,CAACjB,YAAY,CAACC,OAAd;AALlC;AAAA;AAAA;AAAA;AAAA,cADF;AASD;;AACD,wBACE,QAAC,GAAD;AAAK,MAAA,QAAQ,EAAE,CAAf;AAAkB,MAAA,QAAQ,EAAE,CAA5B;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AAAA,oBAAKQ,CAAC,CAAC,eAAD;AAAN;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,SAAS,EAAC,gBAAjB;AAAkC,UAAA,OAAO,EAAEe;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,mBACGR,UAAU,KAAKhB,YAAY,CAACI,OAA5B,gBACC,QAAC,WAAD;AACE,UAAA,SAAS,EAAEc,aADb;AAEE,UAAA,KAAK,EAAEE,YAFT;AAGE,UAAA,eAAe,EAAEC,eAHnB;AAIE,UAAA,aAAa,EAAEO;AAJjB;AAAA;AAAA;AAAA;AAAA,gBADD,GAQCgB,UAAU,EATd,EAWG5B,UAAU,KAAKhB,YAAY,CAACI,OAA5B,iBACC,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,kCACE;AAAA,sBAAQK,CAAC,CAAC,YAAD;AAAT;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,YAAA,IAAI,EAAC,iEADP;AAEE,YAAA,MAAM,EAAC,QAFT;AAGE,YAAA,GAAG,EAAC,qBAHN;AAAA,mCAKE;AAAA,yBAAQA,CAAC,CAAC,aAAD,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgCD;;AAED,sBACE,QAAC,WAAD;AAAa,IAAA,IAAI,EAAEa,eAAnB;AAAoC,IAAA,OAAO,EAAEE,iBAA7C;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,gBAAqCyC,eAAe;AAApD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA1UD;;GAAM5D,W;UAKUR,c,EASVtB,Y,EAUoBkB,Y,EACEC,oB,EAEFH,W,EA4BDA,W,EACGA,W;;;KAxDtBc,W;AA4UN,eAAeA,WAAf","sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector';\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport React, { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport ReactGA from 'react-ga';\nimport { Box } from '@material-ui/core';\nimport MetamaskIcon from 'assets/images/metamask.png';\nimport { ReactComponent as Close } from 'assets/images/CloseIcon.svg';\nimport { fortmatic, injected, portis, safeApp } from 'connectors';\nimport { OVERLAY_READY } from 'connectors/Fortmatic';\nimport { GlobalConst, SUPPORTED_WALLETS } from 'constants/index';\nimport usePrevious from 'hooks/usePrevious';\nimport { ApplicationModal } from 'state/application/actions';\nimport { useModalOpen, useWalletModalToggle } from 'state/application/hooks';\nimport { AccountDetails, CustomModal } from 'components';\nimport { useTranslation } from 'react-i18next';\n\nimport Option from './Option';\nimport PendingView from './PendingView';\nimport 'components/styles/WalletModal.scss';\n\nconst WALLET_VIEWS = {\n  OPTIONS: 'options',\n  OPTIONS_SECONDARY: 'options_secondary',\n  ACCOUNT: 'account',\n  PENDING: 'pending',\n};\n\ninterface WalletModalProps {\n  pendingTransactions: string[]; // hashes of pending\n  confirmedTransactions: string[]; // hashes of confirmed\n  ENSName?: string;\n}\n\nconst WalletModal: React.FC<WalletModalProps> = ({\n  pendingTransactions,\n  confirmedTransactions,\n  ENSName,\n}) => {\n  const { t } = useTranslation();\n  // important that these are destructed from the account-specific web3-react context\n  const {\n    active,\n    account,\n    connector,\n    activate,\n    error,\n    deactivate,\n  } = useWeb3React();\n\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\n\n  const [pendingWallet, setPendingWallet] = useState<\n    AbstractConnector | undefined\n  >();\n\n  const [pendingError, setPendingError] = useState<boolean>();\n\n  const walletModalOpen = useModalOpen(ApplicationModal.WALLET);\n  const toggleWalletModal = useWalletModalToggle();\n\n  const previousAccount = usePrevious(account);\n\n  // close on connection, when logged out before\n  useEffect(() => {\n    if (account && !previousAccount && walletModalOpen) {\n      toggleWalletModal();\n    }\n    if (!walletModalOpen && error) {\n      deactivate();\n    }\n  }, [\n    account,\n    previousAccount,\n    toggleWalletModal,\n    walletModalOpen,\n    deactivate,\n    error,\n  ]);\n\n  // always reset to account view\n  useEffect(() => {\n    if (walletModalOpen) {\n      setPendingError(false);\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [walletModalOpen]);\n\n  // close modal when a connection is successful\n  const activePrevious = usePrevious(active);\n  const connectorPrevious = usePrevious(connector);\n  useEffect(() => {\n    if (\n      walletModalOpen &&\n      ((active && !activePrevious) ||\n        (connector && connector !== connectorPrevious && !error))\n    ) {\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [\n    setWalletView,\n    active,\n    error,\n    connector,\n    walletModalOpen,\n    activePrevious,\n    connectorPrevious,\n  ]);\n\n  const tryActivation = async (connector: AbstractConnector | undefined) => {\n    let name = '';\n    Object.keys(SUPPORTED_WALLETS).map((key) => {\n      if (connector === SUPPORTED_WALLETS[key].connector) {\n        return (name = SUPPORTED_WALLETS[key].name);\n      }\n      return true;\n    });\n    // log selected wallet\n    ReactGA.event({\n      category: 'Wallet',\n      action: 'Change Wallet',\n      label: name,\n    });\n    setPendingWallet(connector); // set wallet for pending view\n    setWalletView(WALLET_VIEWS.PENDING);\n\n    // if the connector is walletconnect and the user has already tried to connect, manually reset the connector\n    if (\n      connector instanceof WalletConnectConnector &&\n      connector.walletConnectProvider?.wc?.uri\n    ) {\n      connector.walletConnectProvider = undefined;\n    }\n\n    connector &&\n      activate(connector, undefined, true).catch((error) => {\n        if (error instanceof UnsupportedChainIdError) {\n          activate(connector); // a little janky...can't use setError because the connector isn't set\n        } else {\n          setPendingError(true);\n        }\n      });\n  };\n\n  // close wallet modal if fortmatic modal is active\n  useEffect(() => {\n    fortmatic.on(OVERLAY_READY, () => {\n      toggleWalletModal();\n    });\n  }, [toggleWalletModal]);\n\n  // get wallets user can switch too, depending on device/browser\n  function getOptions() {\n    const { ethereum, web3 } = window as any;\n    const isMetamask = ethereum && !ethereum.isBitKeep && ethereum.isMetaMask;\n    const isBlockWallet = ethereum && ethereum.isBlockWallet;\n    const isCypherD = ethereum && ethereum.isCypherD;\n    const isBitKeep = ethereum && ethereum.isBitKeep;\n    return Object.keys(SUPPORTED_WALLETS).map((key) => {\n      const option = SUPPORTED_WALLETS[key];\n      //disable safe app by in the list\n      if (option.connector === safeApp) {\n        return null;\n      }\n      // check for mobile options\n      if (isMobile) {\n        //disable portis on mobile for now\n        if (option.connector === portis) {\n          return null;\n        }\n\n        if (!web3 && !ethereum && option.mobile) {\n          return (\n            <Option\n              onClick={() => {\n                option.connector !== connector &&\n                  !option.href &&\n                  tryActivation(option.connector);\n              }}\n              id={`connect-${key}`}\n              key={key}\n              active={\n                option.connector === connector &&\n                (connector !== injected ||\n                  isCypherD ===\n                    (option.name === GlobalConst.walletName.CYPHERD) ||\n                  isBlockWallet ===\n                    (option.name === GlobalConst.walletName.BLOCKWALLET) ||\n                  isBitKeep ===\n                    (option.name === GlobalConst.walletName.BITKEEP) ||\n                  isMetamask ===\n                    (option.name === GlobalConst.walletName.METAMASK))\n              }\n              color={option.color}\n              link={option.href}\n              header={option.name}\n              subheader={null}\n              icon={option.iconName}\n            />\n          );\n        }\n        return null;\n      }\n\n      // overwrite injected when needed\n      if (option.connector === injected) {\n        // don't show injected if there's no injected provider\n        if (!(web3 || ethereum)) {\n          if (option.name === GlobalConst.walletName.METAMASK) {\n            return (\n              <Option\n                id={`connect-${key}`}\n                key={key}\n                color={'#E8831D'}\n                header={t('installMetamask')}\n                subheader={null}\n                link={'https://metamask.io/'}\n                icon={MetamaskIcon}\n              />\n            );\n          } else {\n            return null; //dont want to return install twice\n          }\n        }\n        // don't return metamask if injected provider isn't metamask\n        else if (\n          option.name === GlobalConst.walletName.METAMASK &&\n          !isMetamask\n        ) {\n          return null;\n        } else if (\n          option.name === GlobalConst.walletName.BITKEEP &&\n          !isBitKeep\n        ) {\n          return null;\n        } else if (\n          option.name === GlobalConst.walletName.BLOCKWALLET &&\n          !isBlockWallet\n        ) {\n          return null;\n        } else if (\n          option.name === GlobalConst.walletName.CYPHERD &&\n          !isCypherD\n        ) {\n          return null;\n        }\n        // likewise for generic\n        else if (\n          option.name === GlobalConst.walletName.INJECTED &&\n          (isMetamask || isBitKeep || isBlockWallet || isCypherD)\n        ) {\n          return null;\n        }\n      }\n\n      // return rest of options\n      return (\n        !isMobile &&\n        !option.mobileOnly && (\n          <Option\n            id={`connect-${key}`}\n            onClick={() => {\n              option.connector === connector\n                ? setWalletView(WALLET_VIEWS.ACCOUNT)\n                : !option.href && tryActivation(option.connector);\n            }}\n            key={key}\n            active={\n              option.connector === connector &&\n              (connector !== injected ||\n                isCypherD ===\n                  (option.name === GlobalConst.walletName.CYPHERD) ||\n                isBlockWallet ===\n                  (option.name === GlobalConst.walletName.BLOCKWALLET) ||\n                isBitKeep ===\n                  (option.name === GlobalConst.walletName.BITKEEP) ||\n                isMetamask ===\n                  (option.name === GlobalConst.walletName.METAMASK))\n            }\n            color={option.color}\n            link={option.href}\n            header={option.name}\n            subheader={null} //use option.descriptio to bring back multi-line\n            icon={option.iconName}\n          />\n        )\n      );\n    });\n  }\n\n  function getModalContent() {\n    if (error) {\n      return (\n        <Box position='relative'>\n          <Box position='absolute' top='16px' right='16px' display='flex'>\n            <Close className='cursor-pointer' onClick={toggleWalletModal} />\n          </Box>\n          <Box mt={2} textAlign='center'>\n            <h6>\n              {error instanceof UnsupportedChainIdError\n                ? t('wrongNetwork')\n                : t('errorConnect')}\n            </h6>\n          </Box>\n          <Box mt={3} mb={2} textAlign='center'>\n            <small>\n              {error instanceof UnsupportedChainIdError\n                ? t('connectPolygonNetwork')\n                : t('errorConnectRefresh')}\n            </small>\n          </Box>\n        </Box>\n      );\n    }\n    if (account && walletView === WALLET_VIEWS.ACCOUNT) {\n      return (\n        <AccountDetails\n          toggleWalletModal={toggleWalletModal}\n          pendingTransactions={pendingTransactions}\n          confirmedTransactions={confirmedTransactions}\n          ENSName={ENSName}\n          openOptions={() => setWalletView(WALLET_VIEWS.OPTIONS)}\n        />\n      );\n    }\n    return (\n      <Box paddingX={3} paddingY={4}>\n        <Box className='flex justify-between'>\n          <h5>{t('connectWallet')}</h5>\n          <Close className='cursor-pointer' onClick={toggleWalletModal} />\n        </Box>\n        <Box mt={4}>\n          {walletView === WALLET_VIEWS.PENDING ? (\n            <PendingView\n              connector={pendingWallet}\n              error={pendingError}\n              setPendingError={setPendingError}\n              tryActivation={tryActivation}\n            />\n          ) : (\n            getOptions()\n          )}\n          {walletView !== WALLET_VIEWS.PENDING && (\n            <Box className='blurb'>\n              <small>{t('newToMatic')}</small>\n              <a\n                href='https://docs.matic.network/docs/develop/wallets/getting-started'\n                target='_blank'\n                rel='noopener noreferrer'\n              >\n                <small>{t('learnWallet')} ↗</small>\n              </a>\n            </Box>\n          )}\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <CustomModal open={walletModalOpen} onClose={toggleWalletModal}>\n      <Box className='walletModalWrapper'>{getModalContent()}</Box>\n    </CustomModal>\n  );\n};\n\nexport default WalletModal;\n"]},"metadata":{},"sourceType":"module"}