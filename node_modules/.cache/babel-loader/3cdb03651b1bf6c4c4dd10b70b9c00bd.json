{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar BuildTransactionRequestType_1 = require(\"./BuildTransactionRequestType\");\n\nvar BuildTransferRequestBase_1 = require(\"./BuildTransferRequestBase\");\n\nvar BuildTransactionRequest =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BuildTransactionRequest, _super);\n\n  function BuildTransactionRequest(walletId, to, secretType, value, alias, tokenAddress, data, from, tokenId, network) {\n    var _this = this;\n\n    var type;\n\n    if (tokenAddress && tokenId) {\n      type = BuildTransactionRequestType_1.BuildTransactionRequestType.NFT_TRANSFER;\n    } else if (tokenAddress) {\n      type = BuildTransactionRequestType_1.BuildTransactionRequestType.TOKEN_TRANSFER;\n    } else {\n      type = BuildTransactionRequestType_1.BuildTransactionRequestType.TRANSFER;\n    }\n\n    _this = _super.call(this, type, walletId, to, secretType, alias, network) || this;\n    _this.value = value;\n    tokenAddress ? _this.tokenAddress = tokenAddress : undefined;\n    data ? _this.data = data : undefined;\n    from ? _this.from = from : undefined;\n    tokenId ? _this.tokenId = tokenId : undefined;\n    return _this;\n  }\n\n  BuildTransactionRequest.fromData = function (requestData) {\n    var walletId = requestData.walletId,\n        to = requestData.to,\n        secretType = requestData.secretType,\n        value = requestData.value,\n        alias = requestData.alias,\n        tokenAddress = requestData.tokenAddress,\n        data = requestData.data,\n        from = requestData.from,\n        tokenId = requestData.tokenId,\n        network = requestData.network;\n    return new this(walletId, to, secretType, value, alias, tokenAddress, data, from, tokenId, network);\n  };\n\n  return BuildTransactionRequest;\n}(BuildTransferRequestBase_1.BuildTransferRequestBase);\n\nexports.BuildTransactionRequest = BuildTransactionRequest;","map":{"version":3,"sources":["../../../../../src/models/transaction/build/BuildTransactionRequest.ts"],"names":[],"mappings":";;;;;;;;AAEA,IAAA,6BAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAGA,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,OAAA,CAAA,SAAA,CAAA,uBAAA,EAAA,MAAA;;AAYzC,WAAA,uBAAA,CACI,QADJ,EAEI,EAFJ,EAGI,UAHJ,EAII,KAJJ,EAKI,KALJ,EAMI,YANJ,EAOI,IAPJ,EAQI,IARJ,EASI,OATJ,EAUI,OAVJ,EAUqB;AAVrB,QAAA,KAAA,GAAA,IAAA;;AAYI,QAAI,IAAJ;;AACA,QAAI,YAAY,IAAI,OAApB,EAA6B;AACzB,MAAA,IAAI,GAAG,6BAAA,CAAA,2BAAA,CAA4B,YAAnC;AACH,KAFD,MAEO,IAAI,YAAJ,EAAkB;AACrB,MAAA,IAAI,GAAG,6BAAA,CAAA,2BAAA,CAA4B,cAAnC;AACH,KAFM,MAEA;AACH,MAAA,IAAI,GAAG,6BAAA,CAAA,2BAAA,CAA4B,QAAnC;AACH;;AACD,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,QAAZ,EAAsB,EAAtB,EAA0B,UAA1B,EAAsC,KAAtC,EAA6C,OAA7C,KAAqD,IAArD;AAEA,IAAA,KAAI,CAAC,KAAL,GAAa,KAAb;AACA,IAAA,YAAY,GAAG,KAAI,CAAC,YAAL,GAAoB,YAAvB,GAAsC,SAAlD;AACA,IAAA,IAAI,GAAG,KAAI,CAAC,IAAL,GAAY,IAAf,GAAsB,SAA1B;AACA,IAAA,IAAI,GAAG,KAAI,CAAC,IAAL,GAAY,IAAf,GAAsB,SAA1B;AACA,IAAA,OAAO,GAAG,KAAI,CAAC,OAAL,GAAe,OAAlB,GAA4B,SAAnC;;AACH;;AAhCa,EAAA,uBAAA,CAAA,QAAA,GAAd,UAAuB,WAAvB,EAAkE;AACvD,QAAA,QAAA,GAAA,WAAA,CAAA,QAAA;AAAA,QAAU,EAAA,GAAA,WAAA,CAAA,EAAV;AAAA,QAAc,UAAA,GAAA,WAAA,CAAA,UAAd;AAAA,QAA0B,KAAA,GAAA,WAAA,CAAA,KAA1B;AAAA,QAAiC,KAAA,GAAA,WAAA,CAAA,KAAjC;AAAA,QAAwC,YAAA,GAAA,WAAA,CAAA,YAAxC;AAAA,QAAsD,IAAA,GAAA,WAAA,CAAA,IAAtD;AAAA,QAA4D,IAAA,GAAA,WAAA,CAAA,IAA5D;AAAA,QAAkE,OAAA,GAAA,WAAA,CAAA,OAAlE;AAAA,QAA2E,OAAA,GAAA,WAAA,CAAA,OAA3E;AACP,WAAO,IAAI,IAAJ,CAAS,QAAT,EAAmB,EAAnB,EAAuB,UAAvB,EAAmC,KAAnC,EAA0C,KAA1C,EAAiD,YAAjD,EAA+D,IAA/D,EAAqE,IAArE,EAA2E,OAA3E,EAAoF,OAApF,CAAP;AACH,GAHa;;AAiClB,SAAA,uBAAA;AAAC,CAxCD,CAA6C,0BAAA,CAAA,wBAA7C,CAAA;;AAAa,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar BuildTransactionRequestType_1 = require(\"./BuildTransactionRequestType\");\nvar BuildTransferRequestBase_1 = require(\"./BuildTransferRequestBase\");\nvar BuildTransactionRequest = /** @class */ (function (_super) {\n    tslib_1.__extends(BuildTransactionRequest, _super);\n    function BuildTransactionRequest(walletId, to, secretType, value, alias, tokenAddress, data, from, tokenId, network) {\n        var _this = this;\n        var type;\n        if (tokenAddress && tokenId) {\n            type = BuildTransactionRequestType_1.BuildTransactionRequestType.NFT_TRANSFER;\n        }\n        else if (tokenAddress) {\n            type = BuildTransactionRequestType_1.BuildTransactionRequestType.TOKEN_TRANSFER;\n        }\n        else {\n            type = BuildTransactionRequestType_1.BuildTransactionRequestType.TRANSFER;\n        }\n        _this = _super.call(this, type, walletId, to, secretType, alias, network) || this;\n        _this.value = value;\n        tokenAddress ? _this.tokenAddress = tokenAddress : undefined;\n        data ? _this.data = data : undefined;\n        from ? _this.from = from : undefined;\n        tokenId ? _this.tokenId = tokenId : undefined;\n        return _this;\n    }\n    BuildTransactionRequest.fromData = function (requestData) {\n        var walletId = requestData.walletId, to = requestData.to, secretType = requestData.secretType, value = requestData.value, alias = requestData.alias, tokenAddress = requestData.tokenAddress, data = requestData.data, from = requestData.from, tokenId = requestData.tokenId, network = requestData.network;\n        return new this(walletId, to, secretType, value, alias, tokenAddress, data, from, tokenId, network);\n    };\n    return BuildTransactionRequest;\n}(BuildTransferRequestBase_1.BuildTransferRequestBase));\nexports.BuildTransactionRequest = BuildTransactionRequest;\n//# sourceMappingURL=BuildTransactionRequest.js.map"]},"metadata":{},"sourceType":"script"}