{"ast":null,"code":"const Backoff = require('backoff');\n\nconst EventEmitter = require('events');\n\nconst inherits = require('util').inherits;\n\nconst WebSocket = global.WebSocket || require('ws');\n\nconst Subprovider = require('./subprovider');\n\nconst createPayload = require('../util/create-payload');\n\nclass WebsocketSubprovider extends Subprovider {\n  constructor(_ref) {\n    let {\n      rpcUrl,\n      debug,\n      origin\n    } = _ref;\n    super(); // inherit from EventEmitter\n\n    EventEmitter.call(this);\n    Object.defineProperties(this, {\n      _backoff: {\n        value: Backoff.exponential({\n          randomisationFactor: 0.2,\n          maxDelay: 5000\n        })\n      },\n      _connectTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: debug ? function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return console.info.apply(console, ['[WSProvider]', ...args]);\n        } : () => {}\n      },\n      _origin: {\n        value: origin\n      },\n      _pendingRequests: {\n        value: new Map()\n      },\n      _socket: {\n        value: null,\n        writable: true\n      },\n      _unhandledRequests: {\n        value: []\n      },\n      _url: {\n        value: rpcUrl\n      },\n      _ignoredRpcCalls: {\n        value: new Set()\n      }\n    });\n    this._handleSocketClose = this._handleSocketClose.bind(this);\n    this._handleSocketMessage = this._handleSocketMessage.bind(this);\n    this._handleSocketOpen = this._handleSocketOpen.bind(this);\n\n    this._ignoredRpcCalls.add(\"eth_coinbase\");\n\n    this._ignoredRpcCalls.add(\"eth_accounts\");\n\n    this._ignoredRpcCalls.add(\"eth_sendTransaction\");\n\n    this._ignoredRpcCalls.add(\"eth_sendRawTransaction\");\n\n    this._ignoredRpcCalls.add(\"eth_sign\");\n\n    this._ignoredRpcCalls.add(\"eth_signTransaction\");\n\n    this._ignoredRpcCalls.add(\"eth_signTypedData\");\n\n    this._ignoredRpcCalls.add(\"eth_signTypedData_v3\");\n\n    this._ignoredRpcCalls.add(\"eth_signTypedData_v4\");\n\n    this._ignoredRpcCalls.add(\"personal_sign\");\n\n    this._ignoredRpcCalls.add(\"eth_decryptMessage\");\n\n    this._ignoredRpcCalls.add(\"encryption_public_key\");\n\n    this._ignoredRpcCalls.add(\"personal_ecRecover\");\n\n    this._ignoredRpcCalls.add(\"parity_postTransaction\");\n\n    this._ignoredRpcCalls.add(\"parity_checkRequest\");\n\n    this._ignoredRpcCalls.add(\"parity_defaultAccount\"); // Called when a backoff timeout has finished. Time to try reconnecting.\n\n\n    this._backoff.on('ready', () => {\n      this._openSocket();\n    });\n\n    this._openSocket();\n  }\n\n  handleRequest(payload, next, end) {\n    if (this._ignoredRpcCalls.has(payload.method) || !this._socket || this._socket.readyState !== WebSocket.OPEN) {\n      this._unhandledRequests.push(Array.from(arguments));\n\n      this._log('Socket not open. Request queued.');\n\n      next();\n      return;\n    }\n\n    this._pendingRequests.set(payload.id, [payload, end]);\n\n    const newPayload = createPayload(payload);\n    delete newPayload.origin;\n\n    this._socket.send(JSON.stringify(newPayload));\n\n    this._log(`Sent: ${newPayload.method} #${newPayload.id}`);\n  }\n\n  _handleSocketClose(_ref2) {\n    let {\n      reason,\n      code\n    } = _ref2;\n\n    this._log(`Socket closed, code ${code} (${reason || 'no reason'})`); // If the socket has been open for longer than 5 seconds, reset the backoff\n\n\n    if (this._connectTime && Date.now() - this._connectTime > 5000) {\n      this._backoff.reset();\n    }\n\n    this._socket.removeEventListener('close', this._handleSocketClose);\n\n    this._socket.removeEventListener('message', this._handleSocketMessage);\n\n    this._socket.removeEventListener('open', this._handleSocketOpen);\n\n    this._socket = null;\n\n    this._backoff.backoff();\n  }\n\n  _handleSocketMessage(message) {\n    let payload;\n\n    try {\n      payload = JSON.parse(message.data);\n    } catch (e) {\n      this._log('Received a message that is not valid JSON:', payload);\n\n      return;\n    } // check if server-sent notification\n\n\n    if (payload.id === undefined) {\n      return this.engine.emit('data', null, payload);\n    } // ignore if missing\n\n\n    if (!this._pendingRequests.has(payload.id)) {\n      return;\n    } // retrieve payload + arguments\n\n\n    const [originalReq, end] = this._pendingRequests.get(payload.id);\n\n    this._pendingRequests.delete(payload.id);\n\n    this._log(`Received: ${originalReq.method} #${payload.id}`); // forward response\n\n\n    if (payload.error) {\n      return end(new Error(payload.error.message));\n    }\n\n    end(null, payload.result);\n  }\n\n  _handleSocketOpen() {\n    this._log('Socket open.');\n\n    this._connectTime = Date.now(); // Any pending requests need to be resent because our session was lost\n    // and will not get responses for them in our new session.\n\n    this._pendingRequests.forEach(_ref3 => {\n      let [payload, end] = _ref3;\n\n      this._unhandledRequests.push([payload, null, end]);\n    });\n\n    this._pendingRequests.clear();\n\n    const unhandledRequests = this._unhandledRequests.splice(0, this._unhandledRequests.length);\n\n    unhandledRequests.forEach(request => {\n      this.handleRequest.apply(this, request);\n    });\n  }\n\n  _openSocket() {\n    this._log('Opening socket...');\n\n    this._socket = new WebSocket(this._url, [], this._origin ? {\n      headers: {\n        origin: this._origin\n      }\n    } : {});\n\n    this._socket.addEventListener('close', this._handleSocketClose);\n\n    this._socket.addEventListener('message', this._handleSocketMessage);\n\n    this._socket.addEventListener('open', this._handleSocketOpen);\n  }\n\n} // multiple inheritance\n\n\nObject.assign(WebsocketSubprovider.prototype, EventEmitter.prototype);\nmodule.exports = WebsocketSubprovider;","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/node_modules/@arkane-network/web3-provider-engine/subproviders/websocket.js"],"names":["Backoff","require","EventEmitter","inherits","WebSocket","global","Subprovider","createPayload","WebsocketSubprovider","constructor","rpcUrl","debug","origin","call","Object","defineProperties","_backoff","value","exponential","randomisationFactor","maxDelay","_connectTime","writable","_log","args","console","info","apply","_origin","_pendingRequests","Map","_socket","_unhandledRequests","_url","_ignoredRpcCalls","Set","_handleSocketClose","bind","_handleSocketMessage","_handleSocketOpen","add","on","_openSocket","handleRequest","payload","next","end","has","method","readyState","OPEN","push","Array","from","arguments","set","id","newPayload","send","JSON","stringify","reason","code","Date","now","reset","removeEventListener","backoff","message","parse","data","e","undefined","engine","emit","originalReq","get","delete","error","Error","result","forEach","clear","unhandledRequests","splice","length","request","headers","addEventListener","assign","prototype","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAA5B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBE,QAAjC;;AACA,MAAMC,SAAS,GAAGC,MAAM,CAACD,SAAP,IAAoBH,OAAO,CAAC,IAAD,CAA7C;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,wBAAD,CAA7B;;AAEA,MAAMO,oBAAN,SACSF,WADT,CACqB;AACnBG,EAAAA,WAAW,OAA4B;AAAA,QAA3B;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA;AAAjB,KAA2B;AACrC,YADqC,CAGrC;;AACAV,IAAAA,YAAY,CAACW,IAAb,CAAkB,IAAlB;AAEAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5BC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAEjB,OAAO,CAACkB,WAAR,CAAoB;AACzBC,UAAAA,mBAAmB,EAAE,GADI;AAEzBC,UAAAA,QAAQ,EAAE;AAFe,SAApB;AADC,OADkB;AAO5BC,MAAAA,YAAY,EAAE;AACZJ,QAAAA,KAAK,EAAE,IADK;AAEZK,QAAAA,QAAQ,EAAE;AAFE,OAPc;AAW5BC,MAAAA,IAAI,EAAE;AACJN,QAAAA,KAAK,EAAEN,KAAK,GACR;AAAA,4CAAIa,IAAJ;AAAIA,YAAAA,IAAJ;AAAA;;AAAA,iBAAaC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBF,OAAnB,EAA4B,CAAC,cAAD,EAAiB,GAAGD,IAApB,CAA5B,CAAb;AAAA,SADQ,GAER,MAAM,CAAG;AAHT,OAXsB;AAgB5BI,MAAAA,OAAO,EAAE;AACPX,QAAAA,KAAK,EAAEL;AADA,OAhBmB;AAmB5BiB,MAAAA,gBAAgB,EAAE;AAChBZ,QAAAA,KAAK,EAAE,IAAIa,GAAJ;AADS,OAnBU;AAsB5BC,MAAAA,OAAO,EAAE;AACPd,QAAAA,KAAK,EAAE,IADA;AAEPK,QAAAA,QAAQ,EAAE;AAFH,OAtBmB;AA0B5BU,MAAAA,kBAAkB,EAAE;AAClBf,QAAAA,KAAK,EAAE;AADW,OA1BQ;AA6B5BgB,MAAAA,IAAI,EAAE;AACJhB,QAAAA,KAAK,EAAEP;AADH,OA7BsB;AAgC5BwB,MAAAA,gBAAgB,EAAE;AAChBjB,QAAAA,KAAK,EAAE,IAAIkB,GAAJ;AADS;AAhCU,KAA9B;AAqCA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBF,IAAvB,CAA4B,IAA5B,CAAzB;;AAEA,SAAKH,gBAAL,CAAsBM,GAAtB,CAA0B,cAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,cAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,qBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,wBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,UAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,qBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,mBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,sBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,sBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,eAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,oBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,uBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,oBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,wBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,qBAA1B;;AACA,SAAKN,gBAAL,CAAsBM,GAAtB,CAA0B,uBAA1B,EA9DqC,CAgErC;;;AACA,SAAKxB,QAAL,CAAcyB,EAAd,CAAiB,OAAjB,EAA0B,MAAM;AAC9B,WAAKC,WAAL;AACD,KAFD;;AAIA,SAAKA,WAAL;AACD;;AAEDC,EAAAA,aAAa,CAACC,OAAD,EAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAChC,QAAI,KAAKZ,gBAAL,CAAsBa,GAAtB,CAA0BH,OAAO,CAACI,MAAlC,KAA6C,CAAC,KAAKjB,OAAnD,IAA8D,KAAKA,OAAL,CAAakB,UAAb,KAA4B7C,SAAS,CAAC8C,IAAxG,EAA8G;AAC5G,WAAKlB,kBAAL,CAAwBmB,IAAxB,CAA6BC,KAAK,CAACC,IAAN,CAAWC,SAAX,CAA7B;;AACA,WAAK/B,IAAL,CAAU,kCAAV;;AACAsB,MAAAA,IAAI;AACJ;AACD;;AAED,SAAKhB,gBAAL,CAAsB0B,GAAtB,CAA0BX,OAAO,CAACY,EAAlC,EAAsC,CAACZ,OAAD,EAAUE,GAAV,CAAtC;;AAEA,UAAMW,UAAU,GAAGlD,aAAa,CAACqC,OAAD,CAAhC;AACA,WAAOa,UAAU,CAAC7C,MAAlB;;AAEA,SAAKmB,OAAL,CAAa2B,IAAb,CAAkBC,IAAI,CAACC,SAAL,CAAeH,UAAf,CAAlB;;AACA,SAAKlC,IAAL,CAAW,SAAQkC,UAAU,CAACT,MAAO,KAAIS,UAAU,CAACD,EAAG,EAAvD;AACD;;AAEDpB,EAAAA,kBAAkB,QAAmB;AAAA,QAAlB;AAAEyB,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAkB;;AACnC,SAAKvC,IAAL,CAAW,uBAAsBuC,IAAK,KAAID,MAAM,IAAI,WAAY,GAAhE,EADmC,CAEnC;;;AACA,QAAI,KAAKxC,YAAL,IAAqB0C,IAAI,CAACC,GAAL,KAAa,KAAK3C,YAAlB,GAAiC,IAA1D,EAAgE;AAC9D,WAAKL,QAAL,CAAciD,KAAd;AACD;;AAED,SAAKlC,OAAL,CAAamC,mBAAb,CAAiC,OAAjC,EAA0C,KAAK9B,kBAA/C;;AACA,SAAKL,OAAL,CAAamC,mBAAb,CAAiC,SAAjC,EAA4C,KAAK5B,oBAAjD;;AACA,SAAKP,OAAL,CAAamC,mBAAb,CAAiC,MAAjC,EAAyC,KAAK3B,iBAA9C;;AAEA,SAAKR,OAAL,GAAe,IAAf;;AACA,SAAKf,QAAL,CAAcmD,OAAd;AACD;;AAED7B,EAAAA,oBAAoB,CAAC8B,OAAD,EAAU;AAC5B,QAAIxB,OAAJ;;AAEA,QAAI;AACFA,MAAAA,OAAO,GAAGe,IAAI,CAACU,KAAL,CAAWD,OAAO,CAACE,IAAnB,CAAV;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,WAAKhD,IAAL,CAAU,4CAAV,EAAwDqB,OAAxD;;AACA;AACD,KAR2B,CAU5B;;;AACA,QAAIA,OAAO,CAACY,EAAR,KAAegB,SAAnB,EAA8B;AAC5B,aAAO,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,MAAjB,EAAyB,IAAzB,EAA+B9B,OAA/B,CAAP;AACD,KAb2B,CAe5B;;;AACA,QAAI,CAAC,KAAKf,gBAAL,CAAsBkB,GAAtB,CAA0BH,OAAO,CAACY,EAAlC,CAAL,EAA4C;AAC1C;AACD,KAlB2B,CAoB5B;;;AACA,UAAM,CAACmB,WAAD,EAAc7B,GAAd,IAAqB,KAAKjB,gBAAL,CAAsB+C,GAAtB,CAA0BhC,OAAO,CAACY,EAAlC,CAA3B;;AACA,SAAK3B,gBAAL,CAAsBgD,MAAtB,CAA6BjC,OAAO,CAACY,EAArC;;AAEA,SAAKjC,IAAL,CAAW,aAAYoD,WAAW,CAAC3B,MAAO,KAAIJ,OAAO,CAACY,EAAG,EAAzD,EAxB4B,CA0B5B;;;AACA,QAAIZ,OAAO,CAACkC,KAAZ,EAAmB;AACjB,aAAOhC,GAAG,CAAC,IAAIiC,KAAJ,CAAUnC,OAAO,CAACkC,KAAR,CAAcV,OAAxB,CAAD,CAAV;AACD;;AACDtB,IAAAA,GAAG,CAAC,IAAD,EAAOF,OAAO,CAACoC,MAAf,CAAH;AACD;;AAEDzC,EAAAA,iBAAiB,GAAG;AAClB,SAAKhB,IAAL,CAAU,cAAV;;AACA,SAAKF,YAAL,GAAoB0C,IAAI,CAACC,GAAL,EAApB,CAFkB,CAIlB;AACA;;AACA,SAAKnC,gBAAL,CAAsBoD,OAAtB,CAA8B,SAAoB;AAAA,UAAnB,CAACrC,OAAD,EAAUE,GAAV,CAAmB;;AAChD,WAAKd,kBAAL,CAAwBmB,IAAxB,CAA6B,CAACP,OAAD,EAAU,IAAV,EAAgBE,GAAhB,CAA7B;AACD,KAFD;;AAGA,SAAKjB,gBAAL,CAAsBqD,KAAtB;;AAEA,UAAMC,iBAAiB,GAAG,KAAKnD,kBAAL,CAAwBoD,MAAxB,CAA+B,CAA/B,EAAkC,KAAKpD,kBAAL,CAAwBqD,MAA1D,CAA1B;;AACAF,IAAAA,iBAAiB,CAACF,OAAlB,CAA0BK,OAAO,IAAI;AACnC,WAAK3C,aAAL,CAAmBhB,KAAnB,CAAyB,IAAzB,EAA+B2D,OAA/B;AACD,KAFD;AAGD;;AAED5C,EAAAA,WAAW,GAAG;AACZ,SAAKnB,IAAL,CAAU,mBAAV;;AACA,SAAKQ,OAAL,GAAe,IAAI3B,SAAJ,CAAc,KAAK6B,IAAnB,EAAyB,EAAzB,EAA6B,KAAKL,OAAL,GAAe;AAAC2D,MAAAA,OAAO,EAAC;AAAC3E,QAAAA,MAAM,EAAE,KAAKgB;AAAd;AAAT,KAAf,GAAkD,EAA/E,CAAf;;AACA,SAAKG,OAAL,CAAayD,gBAAb,CAA8B,OAA9B,EAAuC,KAAKpD,kBAA5C;;AACA,SAAKL,OAAL,CAAayD,gBAAb,CAA8B,SAA9B,EAAyC,KAAKlD,oBAA9C;;AACA,SAAKP,OAAL,CAAayD,gBAAb,CAA8B,MAA9B,EAAsC,KAAKjD,iBAA3C;AACD;;AAjKkB,C,CAoKrB;;;AACAzB,MAAM,CAAC2E,MAAP,CAAcjF,oBAAoB,CAACkF,SAAnC,EAA8CxF,YAAY,CAACwF,SAA3D;AAEAC,MAAM,CAACC,OAAP,GAAiBpF,oBAAjB","sourcesContent":["const Backoff = require('backoff')\nconst EventEmitter = require('events')\nconst inherits = require('util').inherits\nconst WebSocket = global.WebSocket || require('ws')\nconst Subprovider = require('./subprovider')\nconst createPayload = require('../util/create-payload')\n\nclass WebsocketSubprovider\n extends Subprovider {\n  constructor({ rpcUrl, debug, origin }) {\n    super()\n\n    // inherit from EventEmitter\n    EventEmitter.call(this)\n\n    Object.defineProperties(this, {\n      _backoff: {\n        value: Backoff.exponential({\n          randomisationFactor: 0.2,\n          maxDelay: 5000\n        })\n      },\n      _connectTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: debug\n          ? (...args) => console.info.apply(console, ['[WSProvider]', ...args])\n          : () => { }\n      },\n      _origin: {\n        value: origin\n      },\n      _pendingRequests: {\n        value: new Map()\n      },\n      _socket: {\n        value: null,\n        writable: true\n      },\n      _unhandledRequests: {\n        value: []\n      },\n      _url: {\n        value: rpcUrl\n      },\n      _ignoredRpcCalls: {\n        value: new Set()\n      }\n    })\n\n    this._handleSocketClose = this._handleSocketClose.bind(this)\n    this._handleSocketMessage = this._handleSocketMessage.bind(this)\n    this._handleSocketOpen = this._handleSocketOpen.bind(this)\n\n    this._ignoredRpcCalls.add(\"eth_coinbase\");\n    this._ignoredRpcCalls.add(\"eth_accounts\");\n    this._ignoredRpcCalls.add(\"eth_sendTransaction\");\n    this._ignoredRpcCalls.add(\"eth_sendRawTransaction\");\n    this._ignoredRpcCalls.add(\"eth_sign\");\n    this._ignoredRpcCalls.add(\"eth_signTransaction\");\n    this._ignoredRpcCalls.add(\"eth_signTypedData\");\n    this._ignoredRpcCalls.add(\"eth_signTypedData_v3\");\n    this._ignoredRpcCalls.add(\"eth_signTypedData_v4\");\n    this._ignoredRpcCalls.add(\"personal_sign\");\n    this._ignoredRpcCalls.add(\"eth_decryptMessage\");\n    this._ignoredRpcCalls.add(\"encryption_public_key\");\n    this._ignoredRpcCalls.add(\"personal_ecRecover\");\n    this._ignoredRpcCalls.add(\"parity_postTransaction\");\n    this._ignoredRpcCalls.add(\"parity_checkRequest\");\n    this._ignoredRpcCalls.add(\"parity_defaultAccount\");\n\n    // Called when a backoff timeout has finished. Time to try reconnecting.\n    this._backoff.on('ready', () => {\n      this._openSocket()\n    })\n\n    this._openSocket()\n  }\n\n  handleRequest(payload, next, end) {\n    if (this._ignoredRpcCalls.has(payload.method) || !this._socket || this._socket.readyState !== WebSocket.OPEN) {\n      this._unhandledRequests.push(Array.from(arguments))\n      this._log('Socket not open. Request queued.')\n      next()\n      return\n    }\n\n    this._pendingRequests.set(payload.id, [payload, end])\n\n    const newPayload = createPayload(payload)\n    delete newPayload.origin\n\n    this._socket.send(JSON.stringify(newPayload))\n    this._log(`Sent: ${newPayload.method} #${newPayload.id}`)\n  }\n\n  _handleSocketClose({ reason, code }) {\n    this._log(`Socket closed, code ${code} (${reason || 'no reason'})`)\n    // If the socket has been open for longer than 5 seconds, reset the backoff\n    if (this._connectTime && Date.now() - this._connectTime > 5000) {\n      this._backoff.reset()\n    }\n\n    this._socket.removeEventListener('close', this._handleSocketClose)\n    this._socket.removeEventListener('message', this._handleSocketMessage)\n    this._socket.removeEventListener('open', this._handleSocketOpen)\n\n    this._socket = null\n    this._backoff.backoff()\n  }\n\n  _handleSocketMessage(message) {\n    let payload\n\n    try {\n      payload = JSON.parse(message.data)\n    } catch (e) {\n      this._log('Received a message that is not valid JSON:', payload)\n      return\n    }\n\n    // check if server-sent notification\n    if (payload.id === undefined) {\n      return this.engine.emit('data', null, payload)\n    }\n\n    // ignore if missing\n    if (!this._pendingRequests.has(payload.id)) {\n      return\n    }\n\n    // retrieve payload + arguments\n    const [originalReq, end] = this._pendingRequests.get(payload.id)\n    this._pendingRequests.delete(payload.id)\n\n    this._log(`Received: ${originalReq.method} #${payload.id}`)\n\n    // forward response\n    if (payload.error) {\n      return end(new Error(payload.error.message))\n    }\n    end(null, payload.result)\n  }\n\n  _handleSocketOpen() {\n    this._log('Socket open.')\n    this._connectTime = Date.now()\n\n    // Any pending requests need to be resent because our session was lost\n    // and will not get responses for them in our new session.\n    this._pendingRequests.forEach(([payload, end]) => {\n      this._unhandledRequests.push([payload, null, end])\n    })\n    this._pendingRequests.clear()\n\n    const unhandledRequests = this._unhandledRequests.splice(0, this._unhandledRequests.length)\n    unhandledRequests.forEach(request => {\n      this.handleRequest.apply(this, request)\n    })\n  }\n\n  _openSocket() {\n    this._log('Opening socket...')\n    this._socket = new WebSocket(this._url, [], this._origin ? {headers:{origin: this._origin}} : {})\n    this._socket.addEventListener('close', this._handleSocketClose)\n    this._socket.addEventListener('message', this._handleSocketMessage)\n    this._socket.addEventListener('open', this._handleSocketOpen)\n  }\n}\n\n// multiple inheritance\nObject.assign(WebsocketSubprovider.prototype, EventEmitter.prototype)\n\nmodule.exports = WebsocketSubprovider\n"]},"metadata":{},"sourceType":"script"}