{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport { useFetchListCallback } from 'hooks/useFetchListCallback';\nimport useInterval from 'hooks/useInterval';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { addPopup } from 'state/application/actions';\nimport { acceptListUpdate } from './actions';\nexport default function Updater() {\n  _s();\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const lists = useSelector(state => state.lists.byUrl);\n  const isWindowVisible = useIsWindowVisible();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => fetchList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchList, isWindowVisible, lists]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens); // automatically update minor/patch as long as bump matches the min update\n\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl));\n              dispatch(addPopup({\n                key: listUrl,\n                content: {\n                  listUpdate: {\n                    listUrl,\n                    oldList: list.current,\n                    newList: list.pendingUpdate,\n                    auto: true\n                  }\n                }\n              }));\n            } else {\n              console.error(`List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`);\n            }\n\n            break;\n\n          case VersionUpgrade.MAJOR:\n            dispatch(addPopup({\n              key: listUrl,\n              content: {\n                listUpdate: {\n                  listUrl,\n                  auto: false,\n                  oldList: list.current,\n                  newList: list.pendingUpdate\n                }\n              },\n              removeAfterMs: null\n            }));\n        }\n      }\n    });\n  }, [dispatch, lists]);\n  return null;\n}\n\n_s(Updater, \"igoRxB83c/UenJzv1nZA8K+H65M=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useSelector, useIsWindowVisible, useFetchListCallback, useInterval];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/lists/updater.ts"],"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","useCallback","useEffect","useDispatch","useSelector","useActiveWeb3React","useFetchListCallback","useInterval","useIsWindowVisible","addPopup","acceptListUpdate","Updater","library","dispatch","lists","state","byUrl","isWindowVisible","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","key","content","listUpdate","oldList","newList","auto","MAJOR","removeAfterMs"],"mappings":"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","sourcesContent":["import {\n  getVersionUpgrade,\n  minVersionBump,\n  VersionUpgrade,\n} from '@uniswap/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport { useFetchListCallback } from 'hooks/useFetchListCallback';\nimport useInterval from 'hooks/useInterval';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { addPopup } from 'state/application/actions';\nimport { AppDispatch, AppState } from 'state';\nimport { acceptListUpdate } from './actions';\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(\n    (state) => state.lists.byUrl,\n  );\n\n  const isWindowVisible = useIsWindowVisible();\n\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach((url) =>\n      fetchList(url).catch((error) =>\n        console.debug('interval list fetching error', error),\n      ),\n    );\n  }, [fetchList, isWindowVisible, lists]);\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null);\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) =>\n          console.debug('list added fetching error', error),\n        );\n      }\n    });\n  }, [dispatch, fetchList, library, lists]);\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl];\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(\n          list.current.version,\n          list.pendingUpdate.version,\n        );\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(\n              list.current.tokens,\n              list.pendingUpdate.tokens,\n            );\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl));\n              dispatch(\n                addPopup({\n                  key: listUrl,\n                  content: {\n                    listUpdate: {\n                      listUrl,\n                      oldList: list.current,\n                      newList: list.pendingUpdate,\n                      auto: true,\n                    },\n                  },\n                }),\n              );\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`,\n              );\n            }\n            break;\n\n          case VersionUpgrade.MAJOR:\n            dispatch(\n              addPopup({\n                key: listUrl,\n                content: {\n                  listUpdate: {\n                    listUrl,\n                    auto: false,\n                    oldList: list.current,\n                    newList: list.pendingUpdate,\n                  },\n                },\n                removeAfterMs: null,\n              }),\n            );\n        }\n      }\n    });\n  }, [dispatch, lists]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}