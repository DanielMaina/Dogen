{"ast":null,"code":"import contenthashToUri from './contenthashToUri';\nimport { parseENSAddress } from './parseENSAddress';\nimport uriToHttp from './uriToHttp';\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\n\nexport default async function getDualFarmList(listUrl, resolveENSContentHash) {\n  const parsedENS = parseENSAddress(listUrl);\n  let urls;\n\n  if (parsedENS) {\n    var _parsedENS$ensPath;\n\n    let contentHashUri;\n\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName);\n    } catch (error) {\n      console.debug(`Failed to resolve ENS name: ${parsedENS.ensName}`, error);\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`);\n    }\n\n    let translatedUri;\n\n    try {\n      translatedUri = contenthashToUri(contentHashUri);\n    } catch (error) {\n      console.debug('Failed to translate contenthash to URI', contentHashUri);\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`);\n    }\n\n    urls = uriToHttp(`${translatedUri}${(_parsedENS$ensPath = parsedENS.ensPath) !== null && _parsedENS$ensPath !== void 0 ? _parsedENS$ensPath : ''}`);\n  } else {\n    urls = uriToHttp(listUrl);\n  }\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const isLast = i === urls.length - 1;\n    let response;\n\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error);\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n\n    const json = await response.json(); //TODO: consider validating Json Response\n\n    return json;\n  }\n\n  throw new Error('Unrecognized list URL protocol.');\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/utils/getDualFarmList.ts"],"names":["contenthashToUri","parseENSAddress","uriToHttp","getDualFarmList","listUrl","resolveENSContentHash","parsedENS","urls","contentHashUri","ensName","error","console","debug","Error","translatedUri","ensPath","i","length","url","isLast","response","fetch","ok","json"],"mappings":"AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,eAAeC,eAAf,CACbC,OADa,EAEbC,qBAFa,EAGc;AAC3B,QAAMC,SAAS,GAAGL,eAAe,CAACG,OAAD,CAAjC;AACA,MAAIG,IAAJ;;AACA,MAAID,SAAJ,EAAe;AAAA;;AACb,QAAIE,cAAJ;;AACA,QAAI;AACFA,MAAAA,cAAc,GAAG,MAAMH,qBAAqB,CAACC,SAAS,CAACG,OAAX,CAA5C;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,KAAR,CAAe,+BAA8BN,SAAS,CAACG,OAAQ,EAA/D,EAAkEC,KAAlE;AACA,YAAM,IAAIG,KAAJ,CAAW,+BAA8BP,SAAS,CAACG,OAAQ,EAA3D,CAAN;AACD;;AACD,QAAIK,aAAJ;;AACA,QAAI;AACFA,MAAAA,aAAa,GAAGd,gBAAgB,CAACQ,cAAD,CAAhC;AACD,KAFD,CAEE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,KAAR,CAAc,wCAAd,EAAwDJ,cAAxD;AACA,YAAM,IAAIK,KAAJ,CACH,2CAA0CL,cAAe,EADtD,CAAN;AAGD;;AACDD,IAAAA,IAAI,GAAGL,SAAS,CAAE,GAAEY,aAAc,GAAjB,sBAAmBR,SAAS,CAACS,OAA7B,mEAAwC,EAAG,EAA5C,CAAhB;AACD,GAlBD,MAkBO;AACLR,IAAAA,IAAI,GAAGL,SAAS,CAACE,OAAD,CAAhB;AACD;;AACD,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,CAACU,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAME,GAAG,GAAGX,IAAI,CAACS,CAAD,CAAhB;AACA,UAAMG,MAAM,GAAGH,CAAC,KAAKT,IAAI,CAACU,MAAL,GAAc,CAAnC;AACA,QAAIG,QAAJ;;AACA,QAAI;AACFA,MAAAA,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAAtB;AACD,KAFD,CAEE,OAAOR,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCR,OAAtC,EAA+CM,KAA/C;AACA,UAAIS,MAAJ,EAAY,MAAM,IAAIN,KAAJ,CAAW,2BAA0BT,OAAQ,EAA7C,CAAN;AACZ;AACD;;AAED,QAAI,CAACgB,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAIH,MAAJ,EAAY,MAAM,IAAIN,KAAJ,CAAW,2BAA0BT,OAAQ,EAA7C,CAAN;AACZ;AACD;;AAED,UAAMmB,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB,CAjBoC,CAkBpC;;AACA,WAAOA,IAAP;AACD;;AACD,QAAM,IAAIV,KAAJ,CAAU,iCAAV,CAAN;AACD","sourcesContent":["import { DualFarmListInfo } from 'types';\nimport contenthashToUri from './contenthashToUri';\nimport { parseENSAddress } from './parseENSAddress';\nimport uriToHttp from './uriToHttp';\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getDualFarmList(\n  listUrl: string,\n  resolveENSContentHash: (ensName: string) => Promise<string>,\n): Promise<DualFarmListInfo> {\n  const parsedENS = parseENSAddress(listUrl);\n  let urls: string[];\n  if (parsedENS) {\n    let contentHashUri;\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName);\n    } catch (error) {\n      console.debug(`Failed to resolve ENS name: ${parsedENS.ensName}`, error);\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`);\n    }\n    let translatedUri;\n    try {\n      translatedUri = contenthashToUri(contentHashUri);\n    } catch (error) {\n      console.debug('Failed to translate contenthash to URI', contentHashUri);\n      throw new Error(\n        `Failed to translate contenthash to URI: ${contentHashUri}`,\n      );\n    }\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`);\n  } else {\n    urls = uriToHttp(listUrl);\n  }\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const isLast = i === urls.length - 1;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error);\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n\n    const json = await response.json();\n    //TODO: consider validating Json Response\n    return json;\n  }\n  throw new Error('Unrecognized list URL protocol.');\n}\n"]},"metadata":{},"sourceType":"module"}