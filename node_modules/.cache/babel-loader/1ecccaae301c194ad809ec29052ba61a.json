{"ast":null,"code":"import { ChainId } from '@uniswap/sdk';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\nexport const OVERLAY_READY = 'OVERLAY_READY';\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.TESTNET]: 'mumbai'\n};\nexport class FortmaticConnector extends AbstractConnector {\n  constructor(_ref) {\n    let {\n      apiKey,\n      chainId\n    } = _ref;\n    invariant(Object.keys(CHAIN_ID_NETWORK_ARGUMENT).includes(chainId.toString()), `Unsupported chainId ${chainId}`);\n    super({\n      supportedChainIds: [chainId]\n    });\n    this.apiKey = void 0;\n    this.chainId = void 0;\n    this.fortmatic = void 0;\n    this.apiKey = apiKey;\n    this.chainId = chainId;\n  }\n\n  async activate() {\n    if (!this.fortmatic) {\n      const {\n        default: Fortmatic\n      } = await import('fortmatic');\n\n      if (this.chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(this.apiKey);\n      } else {\n        throw new Error(`Unsupported network ID: ${this.chainId}`);\n      }\n    }\n\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlay.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve(OVERLAY_READY);\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n\n  async getProvider() {\n    return this.fortmatic.getProvider();\n  }\n\n  async getChainId() {\n    return this.chainId;\n  }\n\n  async getAccount() {\n    return this.fortmatic.getProvider().send('eth_accounts').then(accounts => accounts[0]);\n  }\n\n  deactivate() {\n    console.log('deactivate');\n  }\n\n  async close() {\n    await this.fortmatic.user.logout();\n    this.emitDeactivate();\n  }\n\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/connectors/Fortmatic.ts"],"names":["ChainId","AbstractConnector","invariant","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","undefined","TESTNET","FortmaticConnector","constructor","apiKey","chainId","Object","keys","includes","toString","supportedChainIds","fortmatic","activate","default","Fortmatic","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlay","overlayReady","clearInterval","emit","account","all","enable","then","accounts","getChainId","getAccount","send","deactivate","console","log","close","user","logout","emitDeactivate"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAYP,MAAMC,yBAEL,GAAG;AACF,GAACJ,OAAO,CAACK,OAAT,GAAmBC,SADjB;AAEF,GAACN,OAAO,CAACO,OAAT,GAAmB;AAFjB,CAFJ;AAOA,OAAO,MAAMC,kBAAN,SAAiCP,iBAAjC,CAAmD;AAMxDQ,EAAAA,WAAW,OAAmD;AAAA,QAAlD;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAkD;AAC5DT,IAAAA,SAAS,CACPU,MAAM,CAACC,IAAP,CAAYT,yBAAZ,EAAuCU,QAAvC,CAAgDH,OAAO,CAACI,QAAR,EAAhD,CADO,EAEN,uBAAsBJ,OAAQ,EAFxB,CAAT;AAIA,UAAM;AAAEK,MAAAA,iBAAiB,EAAE,CAACL,OAAD;AAArB,KAAN;AAL4D,SAL7CD,MAK6C;AAAA,SAJ7CC,OAI6C;AAAA,SAFvDM,SAEuD;AAO5D,SAAKP,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;AAEa,QAARO,QAAQ,GAIX;AACD,QAAI,CAAC,KAAKD,SAAV,EAAqB;AACnB,YAAM;AAAEE,QAAAA,OAAO,EAAEC;AAAX,UAAyB,MAAM,OAAO,WAAP,CAArC;;AAEA,UAAI,KAAKT,OAAL,IAAgBP,yBAApB,EAA+C;AAC7C,aAAKa,SAAL,GAAiB,IAAIG,SAAJ,CAAc,KAAKV,MAAnB,CAAjB;AACD,OAFD,MAEO;AACL,cAAM,IAAIW,KAAJ,CAAW,2BAA0B,KAAKV,OAAQ,EAAlD,CAAN;AACD;AACF;;AAED,UAAMW,QAAQ,GAAG,KAAKL,SAAL,CAAeM,WAAf,EAAjB;AAEA,UAAMC,mBAAmB,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACnD,YAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAIN,QAAQ,CAACO,OAAT,CAAiBC,YAArB,EAAmC;AACjCC,UAAAA,aAAa,CAACJ,QAAD,CAAb;AACA,eAAKK,IAAL,CAAU7B,aAAV;AACAuB,UAAAA,OAAO,CAACvB,aAAD,CAAP;AACD;AACF,OAN2B,EAMzB,GANyB,CAA5B;AAOD,KAR2B,CAA5B;AAUA,UAAM,CAAC8B,OAAD,IAAY,MAAMR,OAAO,CAACS,GAAR,CAAY,CAClCZ,QAAQ,CAACa,MAAT,GAAkBC,IAAlB,CAAwBC,QAAD,IAAwBA,QAAQ,CAAC,CAAD,CAAvD,CADkC,EAElCb,mBAFkC,CAAZ,CAAxB;AAKA,WAAO;AACLF,MAAAA,QAAQ,EAAE,KAAKL,SAAL,CAAeM,WAAf,EADL;AAELZ,MAAAA,OAAO,EAAG,IAAD,CAAcA,OAFlB;AAGLsB,MAAAA;AAHK,KAAP;AAKD;;AAEuB,QAAXV,WAAW,GAAiB;AACvC,WAAO,KAAKN,SAAL,CAAeM,WAAf,EAAP;AACD;;AAEsB,QAAVe,UAAU,GAA6B;AAClD,WAAO,KAAK3B,OAAZ;AACD;;AAEsB,QAAV4B,UAAU,GAA2B;AAChD,WAAO,KAAKtB,SAAL,CACJM,WADI,GAEJiB,IAFI,CAEC,cAFD,EAGJJ,IAHI,CAGEC,QAAD,IAAgCA,QAAQ,CAAC,CAAD,CAHzC,CAAP;AAID;;AAEMI,EAAAA,UAAU,GAAS;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD;;AAEiB,QAALC,KAAK,GAAkB;AAClC,UAAM,KAAK3B,SAAL,CAAe4B,IAAf,CAAoBC,MAApB,EAAN;AACA,SAAKC,cAAL;AACD;;AA9EuD","sourcesContent":["import { ChainId } from '@uniswap/sdk';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nexport const OVERLAY_READY = 'OVERLAY_READY';\n\ntype FormaticSupportedChains = Extract<\n  ChainId,\n  ChainId.MAINNET | ChainId.TESTNET\n>;\n\ninterface FortmaticConnectorArguments {\n  apiKey: string;\n  chainId: number;\n}\n\nconst CHAIN_ID_NETWORK_ARGUMENT: {\n  readonly [chainId in FormaticSupportedChains]: string | undefined;\n} = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.TESTNET]: 'mumbai',\n};\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string;\n  private readonly chainId: number;\n\n  public fortmatic: any;\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(\n      Object.keys(CHAIN_ID_NETWORK_ARGUMENT).includes(chainId.toString()),\n      `Unsupported chainId ${chainId}`,\n    );\n    super({ supportedChainIds: [chainId] });\n\n    this.apiKey = apiKey;\n    this.chainId = chainId;\n  }\n\n  async activate(): Promise<{\n    provider: any;\n    chainId: any;\n    account: any;\n  }> {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic');\n\n      if (this.chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(this.apiKey);\n      } else {\n        throw new Error(`Unsupported network ID: ${this.chainId}`);\n      }\n    }\n\n    const provider = this.fortmatic.getProvider();\n\n    const pollForOverlayReady = new Promise((resolve) => {\n      const interval = setInterval(() => {\n        if (provider.overlay.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve(OVERLAY_READY);\n        }\n      }, 200);\n    });\n\n    const [account] = await Promise.all([\n      provider.enable().then((accounts: string[]) => accounts[0]),\n      pollForOverlayReady,\n    ]);\n\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: (this as any).chainId,\n      account,\n    };\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider();\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId;\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0]);\n  }\n\n  public deactivate(): void {\n    console.log('deactivate');\n  }\n\n  public async close(): Promise<void> {\n    await this.fortmatic.user.logout();\n    this.emitDeactivate();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}