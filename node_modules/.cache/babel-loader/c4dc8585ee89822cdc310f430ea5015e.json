{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addTransaction, checkedTransaction, clearAllTransactions, finalizeTransaction } from './actions';\n\nconst now = () => new Date().getTime();\n\nexport const initialState = {};\nexport default createReducer(initialState, builder => builder.addCase(addTransaction, (transactions, _ref) => {\n  var _transactions$chainId, _transactions$chainId2;\n\n  let {\n    payload: {\n      chainId,\n      from,\n      hash,\n      approval,\n      summary,\n      claim\n    }\n  } = _ref;\n\n  if ((_transactions$chainId = transactions[chainId]) !== null && _transactions$chainId !== void 0 && _transactions$chainId[hash]) {\n    throw Error('Attempted to add existing transaction.');\n  }\n\n  const txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n  txs[hash] = {\n    hash,\n    approval,\n    summary,\n    claim,\n    from,\n    addedTime: now()\n  };\n  transactions[chainId] = txs;\n}).addCase(clearAllTransactions, (transactions, _ref2) => {\n  let {\n    payload: {\n      chainId\n    }\n  } = _ref2;\n  if (!transactions[chainId]) return;\n  transactions[chainId] = {};\n}).addCase(checkedTransaction, (transactions, _ref3) => {\n  var _transactions$chainId3;\n\n  let {\n    payload: {\n      chainId,\n      hash,\n      blockNumber\n    }\n  } = _ref3;\n  const tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n\n  if (!tx) {\n    return;\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    tx.lastCheckedBlockNumber = blockNumber;\n  } else {\n    tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n  }\n}).addCase(finalizeTransaction, (transactions, _ref4) => {\n  var _transactions$chainId4;\n\n  let {\n    payload: {\n      hash,\n      chainId,\n      receipt\n    }\n  } = _ref4;\n  const tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n\n  if (!tx) {\n    return;\n  }\n\n  if (receipt !== 'failed') {\n    tx.receipt = receipt;\n  }\n\n  tx.confirmedTime = now();\n}));","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/transactions/reducer.ts"],"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","payload","chainId","from","hash","approval","summary","claim","Error","txs","addedTime","blockNumber","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SACEC,cADF,EAEEC,kBAFF,EAGEC,oBAHF,EAIEC,mBAJF,QAMO,WANP;;AAQA,MAAMC,GAAG,GAAG,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AAoBA,OAAO,MAAMC,YAA8B,GAAG,EAAvC;AAEP,eAAeR,aAAa,CAACQ,YAAD,EAAgBC,OAAD,IACzCA,OAAO,CACJC,OADH,CAEIT,cAFJ,EAGI,CACEU,YADF,WAGK;AAAA;;AAAA,MADH;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,IAAX;AAAiBC,MAAAA,IAAjB;AAAuBC,MAAAA,QAAvB;AAAiCC,MAAAA,OAAjC;AAA0CC,MAAAA;AAA1C;AAAX,GACG;;AACH,+BAAIP,YAAY,CAACE,OAAD,CAAhB,kDAAI,sBAAwBE,IAAxB,CAAJ,EAAmC;AACjC,UAAMI,KAAK,CAAC,wCAAD,CAAX;AACD;;AACD,QAAMC,GAAG,6BAAGT,YAAY,CAACE,OAAD,CAAf,2EAA4B,EAArC;AACAO,EAAAA,GAAG,CAACL,IAAD,CAAH,GAAY;AAAEA,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA,KAA3B;AAAkCJ,IAAAA,IAAlC;AAAwCO,IAAAA,SAAS,EAAEhB,GAAG;AAAtD,GAAZ;AACAM,EAAAA,YAAY,CAACE,OAAD,CAAZ,GAAwBO,GAAxB;AACD,CAbL,EAeGV,OAfH,CAeWP,oBAfX,EAeiC,CAACQ,YAAD,YAA4C;AAAA,MAA7B;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAAX,GAA6B;AACzE,MAAI,CAACF,YAAY,CAACE,OAAD,CAAjB,EAA4B;AAC5BF,EAAAA,YAAY,CAACE,OAAD,CAAZ,GAAwB,EAAxB;AACD,CAlBH,EAmBGH,OAnBH,CAoBIR,kBApBJ,EAqBI,CAACS,YAAD,YAA+D;AAAA;;AAAA,MAAhD;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,OAAF;AAAWE,MAAAA,IAAX;AAAiBO,MAAAA;AAAjB;AAAX,GAAgD;AAC7D,QAAMC,EAAE,6BAAGZ,YAAY,CAACE,OAAD,CAAf,2DAAG,uBAAwBE,IAAxB,CAAX;;AACA,MAAI,CAACQ,EAAL,EAAS;AACP;AACD;;AACD,MAAI,CAACA,EAAE,CAACC,sBAAR,EAAgC;AAC9BD,IAAAA,EAAE,CAACC,sBAAH,GAA4BF,WAA5B;AACD,GAFD,MAEO;AACLC,IAAAA,EAAE,CAACC,sBAAH,GAA4BC,IAAI,CAACC,GAAL,CAC1BJ,WAD0B,EAE1BC,EAAE,CAACC,sBAFuB,CAA5B;AAID;AACF,CAlCL,EAoCGd,OApCH,CAqCIN,mBArCJ,EAsCI,CAACO,YAAD,YAA2D;AAAA;;AAAA,MAA5C;AAAEC,IAAAA,OAAO,EAAE;AAAEG,MAAAA,IAAF;AAAQF,MAAAA,OAAR;AAAiBc,MAAAA;AAAjB;AAAX,GAA4C;AACzD,QAAMJ,EAAE,6BAAGZ,YAAY,CAACE,OAAD,CAAf,2DAAG,uBAAwBE,IAAxB,CAAX;;AACA,MAAI,CAACQ,EAAL,EAAS;AACP;AACD;;AACD,MAAII,OAAO,KAAK,QAAhB,EAA0B;AACxBJ,IAAAA,EAAE,CAACI,OAAH,GAAaA,OAAb;AACD;;AACDJ,EAAAA,EAAE,CAACK,aAAH,GAAmBvB,GAAG,EAAtB;AACD,CA/CL,CAD0B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: { tokenAddress: string; spender: string };\n  summary?: string;\n  claim?: { recipient: string };\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      addTransaction,\n      (\n        transactions,\n        { payload: { chainId, from, hash, approval, summary, claim } },\n      ) => {\n        if (transactions[chainId]?.[hash]) {\n          throw Error('Attempted to add existing transaction.');\n        }\n        const txs = transactions[chainId] ?? {};\n        txs[hash] = { hash, approval, summary, claim, from, addedTime: now() };\n        transactions[chainId] = txs;\n      },\n    )\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(\n      checkedTransaction,\n      (transactions, { payload: { chainId, hash, blockNumber } }) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (!tx.lastCheckedBlockNumber) {\n          tx.lastCheckedBlockNumber = blockNumber;\n        } else {\n          tx.lastCheckedBlockNumber = Math.max(\n            blockNumber,\n            tx.lastCheckedBlockNumber,\n          );\n        }\n      },\n    )\n    .addCase(\n      finalizeTransaction,\n      (transactions, { payload: { hash, chainId, receipt } }) => {\n        const tx = transactions[chainId]?.[hash];\n        if (!tx) {\n          return;\n        }\n        if (receipt !== 'failed') {\n          tx.receipt = receipt;\n        }\n        tx.confirmedTime = now();\n      },\n    ),\n);\n"]},"metadata":{},"sourceType":"module"}