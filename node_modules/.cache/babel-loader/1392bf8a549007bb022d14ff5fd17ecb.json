{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport { useFetchFarmListCallback } from 'hooks/useFetchFarmListCallback';\nimport useInterval from 'hooks/useInterval';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { acceptFarmUpdate } from './actions';\nexport default function Updater() {\n  _s();\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const farms = useSelector(state => state.farms.byUrl);\n  const isWindowVisible = useIsWindowVisible();\n  const fetchFarmList = useFetchFarmListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(farms).forEach(url => fetchFarmList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchFarmList, isWindowVisible, farms]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(farms).forEach(listUrl => {\n      const farm = farms[listUrl];\n\n      if (!farm.current && !farm.loadingRequestId && !farm.error) {\n        fetchFarmList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchFarmList, library, farms]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(farms).forEach(listUrl => {\n      const farm = farms[listUrl];\n\n      if (farm.current && farm.pendingUpdate) {\n        //Auto update farms until we create the versioning infrastructure that the tokens list has\n        dispatch(acceptFarmUpdate(listUrl));\n      }\n    });\n  }, [dispatch, farms]);\n  return null;\n}\n\n_s(Updater, \"6esXrDISIQYWIXj6QaqMvpmcwYU=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useSelector, useIsWindowVisible, useFetchFarmListCallback, useInterval];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/farms/updater.ts"],"names":["useCallback","useEffect","useDispatch","useSelector","useActiveWeb3React","useFetchFarmListCallback","useInterval","useIsWindowVisible","acceptFarmUpdate","Updater","library","dispatch","farms","state","byUrl","isWindowVisible","fetchFarmList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","farm","current","loadingRequestId","pendingUpdate"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,wBAAT,QAAyC,gCAAzC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AAEA,eAAe,SAASC,OAAT,GAAyB;AAAA;;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAcN,kBAAkB,EAAtC;AACA,QAAMO,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,KAAK,GAAGT,WAAW,CACtBU,KAAD,IAAWA,KAAK,CAACD,KAAN,CAAYE,KADA,CAAzB;AAIA,QAAMC,eAAe,GAAGR,kBAAkB,EAA1C;AAEA,QAAMS,aAAa,GAAGX,wBAAwB,EAA9C;AACA,QAAMY,qBAAqB,GAAGjB,WAAW,CAAC,MAAM;AAC9C,QAAI,CAACe,eAAL,EAAsB;AACtBG,IAAAA,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBQ,OAAnB,CAA4BC,GAAD,IACzBL,aAAa,CAACK,GAAD,CAAb,CAAmBC,KAAnB,CAA0BC,KAAD,IACvBC,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CF,KAA9C,CADF,CADF;AAKD,GAPwC,EAOtC,CAACP,aAAD,EAAgBD,eAAhB,EAAiCH,KAAjC,CAPsC,CAAzC,CAVsC,CAmBtC;;AACAN,EAAAA,WAAW,CAACW,qBAAD,EAAwBP,OAAO,GAAG,OAAO,EAAP,GAAY,EAAf,GAAoB,IAAnD,CAAX,CApBsC,CAsBtC;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBQ,OAAnB,CAA4BM,OAAD,IAAa;AACtC,YAAMC,IAAI,GAAGf,KAAK,CAACc,OAAD,CAAlB;;AAEA,UAAI,CAACC,IAAI,CAACC,OAAN,IAAiB,CAACD,IAAI,CAACE,gBAAvB,IAA2C,CAACF,IAAI,CAACJ,KAArD,EAA4D;AAC1DP,QAAAA,aAAa,CAACU,OAAD,CAAb,CAAuBJ,KAAvB,CAA8BC,KAAD,IAC3BC,OAAO,CAACC,KAAR,CAAc,2BAAd,EAA2CF,KAA3C,CADF;AAGD;AACF,KARD;AASD,GAVQ,EAUN,CAACZ,QAAD,EAAWK,aAAX,EAA0BN,OAA1B,EAAmCE,KAAnC,CAVM,CAAT,CAvBsC,CAmCtC;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBQ,OAAnB,CAA4BM,OAAD,IAAa;AACtC,YAAMC,IAAI,GAAGf,KAAK,CAACc,OAAD,CAAlB;;AACA,UAAIC,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACG,aAAzB,EAAwC;AACtC;AACAnB,QAAAA,QAAQ,CAACH,gBAAgB,CAACkB,OAAD,CAAjB,CAAR;AACD;AACF,KAND;AAOD,GARQ,EAQN,CAACf,QAAD,EAAWC,KAAX,CARM,CAAT;AAUA,SAAO,IAAP;AACD;;GA/CuBH,O;UACFL,kB,EACHF,W,EACHC,W,EAIUI,kB,EAEFF,wB,EAWtBC,W;;;KApBsBG,O","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport { useFetchFarmListCallback } from 'hooks/useFetchFarmListCallback';\nimport useInterval from 'hooks/useInterval';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { AppDispatch, AppState } from 'state';\nimport { acceptFarmUpdate } from './actions';\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n  const farms = useSelector<AppState, AppState['farms']['byUrl']>(\n    (state) => state.farms.byUrl,\n  );\n\n  const isWindowVisible = useIsWindowVisible();\n\n  const fetchFarmList = useFetchFarmListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(farms).forEach((url) =>\n      fetchFarmList(url).catch((error) =>\n        console.debug('interval list fetching error', error),\n      ),\n    );\n  }, [fetchFarmList, isWindowVisible, farms]);\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null);\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(farms).forEach((listUrl) => {\n      const farm = farms[listUrl];\n\n      if (!farm.current && !farm.loadingRequestId && !farm.error) {\n        fetchFarmList(listUrl).catch((error) =>\n          console.debug('list added fetching error', error),\n        );\n      }\n    });\n  }, [dispatch, fetchFarmList, library, farms]);\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(farms).forEach((listUrl) => {\n      const farm = farms[listUrl];\n      if (farm.current && farm.pendingUpdate) {\n        //Auto update farms until we create the versioning infrastructure that the tokens list has\n        dispatch(acceptFarmUpdate(listUrl));\n      }\n    });\n  }, [dispatch, farms]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}