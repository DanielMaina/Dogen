{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar BuildTransactionRequestType_1 = require(\"./BuildTransactionRequestType\");\n\nvar BuildTransferRequestBase_1 = require(\"./BuildTransferRequestBase\");\n\nvar BuildNftTransferRequest =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BuildNftTransferRequest, _super);\n\n  function BuildNftTransferRequest(walletId, to, secretType, tokenAddress, tokenId, amount, from, alias, network) {\n    var _this = _super.call(this, BuildTransactionRequestType_1.BuildTransactionRequestType.NFT_TRANSFER, walletId, to, secretType, alias, network) || this;\n\n    _this.tokenAddress = tokenAddress;\n    _this.tokenId = tokenId;\n    _this.amount = amount ? amount : 1;\n    from ? _this.from = from : undefined;\n    return _this;\n  }\n\n  BuildNftTransferRequest.fromData = function (requestData) {\n    var walletId = requestData.walletId,\n        to = requestData.to,\n        secretType = requestData.secretType,\n        tokenAddress = requestData.tokenAddress,\n        tokenId = requestData.tokenId,\n        amount = requestData.amount,\n        from = requestData.from,\n        alias = requestData.alias,\n        network = requestData.network;\n    return new this(walletId, to, secretType, tokenAddress, tokenId, amount, from, alias, network);\n  };\n\n  return BuildNftTransferRequest;\n}(BuildTransferRequestBase_1.BuildTransferRequestBase);\n\nexports.BuildNftTransferRequest = BuildNftTransferRequest;","map":{"version":3,"sources":["../../../../../src/models/transaction/build/BuildNftTransferRequest.ts"],"names":[],"mappings":";;;;;;;;AAEA,IAAA,6BAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,IAAA,0BAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAGA,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,OAAA,CAAA,SAAA,CAAA,uBAAA,EAAA,MAAA;;AAWzC,WAAA,uBAAA,CAAY,QAAZ,EAA8B,EAA9B,EAA0C,UAA1C,EAAkE,YAAlE,EAAwF,OAAxF,EAAyG,MAAzG,EAA0H,IAA1H,EAAyI,KAAzI,EAAyJ,OAAzJ,EAA0K;AAA1K,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,6BAAA,CAAA,2BAAA,CAA4B,YAAlC,EAAgD,QAAhD,EAA0D,EAA1D,EAA8D,UAA9D,EAA0E,KAA1E,EAAiF,OAAjF,KAAyF,IAD7F;;AAEI,IAAA,KAAI,CAAC,YAAL,GAAoB,YAApB;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAf;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAM,GAAG,MAAH,GAAY,CAAhC;AACA,IAAA,IAAI,GAAG,KAAI,CAAC,IAAL,GAAY,IAAf,GAAsB,SAA1B;;AACH;;AAXa,EAAA,uBAAA,CAAA,QAAA,GAAd,UAAuB,WAAvB,EAA8D;AACnD,QAAA,QAAA,GAAA,WAAA,CAAA,QAAA;AAAA,QAAU,EAAA,GAAA,WAAA,CAAA,EAAV;AAAA,QAAc,UAAA,GAAA,WAAA,CAAA,UAAd;AAAA,QAA0B,YAAA,GAAA,WAAA,CAAA,YAA1B;AAAA,QAAwC,OAAA,GAAA,WAAA,CAAA,OAAxC;AAAA,QAAiD,MAAA,GAAA,WAAA,CAAA,MAAjD;AAAA,QAAyD,IAAA,GAAA,WAAA,CAAA,IAAzD;AAAA,QAA+D,KAAA,GAAA,WAAA,CAAA,KAA/D;AAAA,QAAsE,OAAA,GAAA,WAAA,CAAA,OAAtE;AACP,WAAO,IAAI,IAAJ,CAAS,QAAT,EAAmB,EAAnB,EAAuB,UAAvB,EAAmC,YAAnC,EAAiD,OAAjD,EAA0D,MAA1D,EAAkE,IAAlE,EAAwE,KAAxE,EAA+E,OAA/E,CAAP;AACH,GAHa;;AAYlB,SAAA,uBAAA;AAAC,CAlBD,CAA6C,0BAAA,CAAA,wBAA7C,CAAA;;AAAa,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar BuildTransactionRequestType_1 = require(\"./BuildTransactionRequestType\");\nvar BuildTransferRequestBase_1 = require(\"./BuildTransferRequestBase\");\nvar BuildNftTransferRequest = /** @class */ (function (_super) {\n    tslib_1.__extends(BuildNftTransferRequest, _super);\n    function BuildNftTransferRequest(walletId, to, secretType, tokenAddress, tokenId, amount, from, alias, network) {\n        var _this = _super.call(this, BuildTransactionRequestType_1.BuildTransactionRequestType.NFT_TRANSFER, walletId, to, secretType, alias, network) || this;\n        _this.tokenAddress = tokenAddress;\n        _this.tokenId = tokenId;\n        _this.amount = amount ? amount : 1;\n        from ? _this.from = from : undefined;\n        return _this;\n    }\n    BuildNftTransferRequest.fromData = function (requestData) {\n        var walletId = requestData.walletId, to = requestData.to, secretType = requestData.secretType, tokenAddress = requestData.tokenAddress, tokenId = requestData.tokenId, amount = requestData.amount, from = requestData.from, alias = requestData.alias, network = requestData.network;\n        return new this(walletId, to, secretType, tokenAddress, tokenId, amount, from, alias, network);\n    };\n    return BuildNftTransferRequest;\n}(BuildTransferRequestBase_1.BuildTransferRequestBase));\nexports.BuildNftTransferRequest = BuildNftTransferRequest;\n//# sourceMappingURL=BuildNftTransferRequest.js.map"]},"metadata":{},"sourceType":"script"}