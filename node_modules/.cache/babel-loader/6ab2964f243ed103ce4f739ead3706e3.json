{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport useDebounce from 'hooks/useDebounce';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nimport { useEthPrice } from './hooks';\nimport { getEthPrice } from 'utils';\nexport default function Updater() {\n  _s();\n\n  const {\n    library,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    ethereum\n  } = window;\n  const dispatch = useDispatch();\n  const {\n    ethPrice,\n    updateEthPrice\n  } = useEthPrice();\n  const windowVisible = useIsWindowVisible();\n  const [state, setState] = useState({\n    chainId,\n    blockNumber: null\n  });\n  const [currentTime, setCurrentTime] = useState(Math.floor(Date.now() / 1000));\n  const blockNumberCallback = useCallback(blockNumber => {\n    setState(state => {\n      if (chainId === state.chainId) {\n        if (typeof state.blockNumber !== 'number') return {\n          chainId,\n          blockNumber\n        };\n        return {\n          chainId,\n          blockNumber\n        };\n      }\n\n      return state;\n    });\n  }, [chainId, setState]); // this is for refreshing eth price every 10 mins\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const _currentTime = Math.floor(Date.now() / 1000);\n\n      setCurrentTime(_currentTime);\n    }, 600000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    (async () => {\n      const [price, oneDayPrice, ethPriceChange] = await getEthPrice();\n      updateEthPrice({\n        price,\n        oneDayPrice,\n        ethPriceChange\n      });\n    })(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [currentTime]); // attach/detach listeners\n\n  useEffect(() => {\n    if (!library || !chainId || !windowVisible) return undefined;\n    setState({\n      chainId,\n      blockNumber: null\n    });\n    library.getBlockNumber().then(blockNumberCallback).catch(error => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n    library.on('block', blockNumberCallback);\n    ethereum === null || ethereum === void 0 ? void 0 : ethereum.on('chainChanged', () => {\n      document.location.reload();\n    });\n    return () => {\n      library.removeListener('block', blockNumberCallback);\n    };\n  }, [dispatch, chainId, library, blockNumberCallback, windowVisible, ethereum]);\n  const debouncedState = useDebounce(state, 100);\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(updateBlockNumber({\n      chainId: debouncedState.chainId,\n      blockNumber: debouncedState.blockNumber\n    }));\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n  return null;\n}\n\n_s(Updater, \"yrym4J5vH2UEe1yBvSnKZmDto0k=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useEthPrice, useIsWindowVisible, useDebounce];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/application/updater.ts"],"names":["useCallback","useEffect","useState","useDispatch","useActiveWeb3React","useDebounce","useIsWindowVisible","updateBlockNumber","useEthPrice","getEthPrice","Updater","library","chainId","ethereum","window","dispatch","ethPrice","updateEthPrice","windowVisible","state","setState","blockNumber","currentTime","setCurrentTime","Math","floor","Date","now","blockNumberCallback","interval","setInterval","_currentTime","clearInterval","price","oneDayPrice","ethPriceChange","undefined","getBlockNumber","then","catch","error","console","on","document","location","reload","removeListener","debouncedState"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport useDebounce from 'hooks/useDebounce';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nimport { useEthPrice } from './hooks';\nimport { getEthPrice } from 'utils';\n\nexport default function Updater(): null {\n  const { library, chainId } = useActiveWeb3React();\n  const { ethereum } = window as any;\n  const dispatch = useDispatch();\n  const { ethPrice, updateEthPrice } = useEthPrice();\n\n  const windowVisible = useIsWindowVisible();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId,\n    blockNumber: null,\n  });\n\n  const [currentTime, setCurrentTime] = useState(Math.floor(Date.now() / 1000));\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state) => {\n        if (chainId === state.chainId) {\n          if (typeof state.blockNumber !== 'number')\n            return { chainId, blockNumber };\n          return {\n            chainId,\n            blockNumber,\n          };\n        }\n        return state;\n      });\n    },\n    [chainId, setState],\n  );\n\n  // this is for refreshing eth price every 10 mins\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const _currentTime = Math.floor(Date.now() / 1000);\n      setCurrentTime(_currentTime);\n    }, 600000);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const [price, oneDayPrice, ethPriceChange] = await getEthPrice();\n      updateEthPrice({ price, oneDayPrice, ethPriceChange });\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentTime]);\n\n  // attach/detach listeners\n  useEffect(() => {\n    if (!library || !chainId || !windowVisible) return undefined;\n\n    setState({ chainId, blockNumber: null });\n\n    library\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error) =>\n        console.error(\n          `Failed to get block number for chainId: ${chainId}`,\n          error,\n        ),\n      );\n\n    library.on('block', blockNumberCallback);\n\n    ethereum?.on('chainChanged', () => {\n      document.location.reload();\n    });\n\n    return () => {\n      library.removeListener('block', blockNumberCallback);\n    };\n  }, [\n    dispatch,\n    chainId,\n    library,\n    blockNumberCallback,\n    windowVisible,\n    ethereum,\n  ]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (\n      !debouncedState.chainId ||\n      !debouncedState.blockNumber ||\n      !windowVisible\n    )\n      return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [\n    windowVisible,\n    dispatch,\n    debouncedState.blockNumber,\n    debouncedState.chainId,\n  ]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}