{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/RewardSlider/RewardSlider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Slider from 'react-slick';\nimport { useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport { useStakingInfo, getBulkPairData, useDualStakingInfo } from 'state/stake/hooks';\nimport RewardSliderItem from './RewardSliderItem';\nimport { useActiveWeb3React } from 'hooks';\nimport { getOneYearFee } from 'utils';\nimport 'components/styles/RewardSlider.scss';\nimport { ChainId } from '@uniswap/sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RewardSlider = () => {\n  _s();\n\n  const theme = useTheme();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tabletWindowSize = useMediaQuery(theme.breakpoints.down('md'));\n  const mobileWindowSize = useMediaQuery(theme.breakpoints.down('sm'));\n  const defaultChainId = chainId !== null && chainId !== void 0 ? chainId : ChainId.MAINNET;\n  const lprewardItems = useStakingInfo(defaultChainId, null, 0, 2);\n  const dualrewardItems = useDualStakingInfo(defaultChainId, null, 0, 1);\n  const [bulkPairs, setBulkPairs] = useState(null);\n  const stakingPairListStr = useMemo(() => {\n    return lprewardItems.map(item => item.pair).concat(dualrewardItems.map(item => item.pair)).join(',');\n  }, [dualrewardItems, lprewardItems]);\n  const stakingPairLists = stakingPairListStr.split(',');\n  useEffect(() => {\n    const stakingPairLists = stakingPairListStr.split(',');\n\n    if (stakingPairListStr) {\n      getBulkPairData(stakingPairLists).then(data => setBulkPairs(data));\n    }\n  }, [stakingPairListStr]);\n  const stakingAPYs = useMemo(() => {\n    if (bulkPairs && stakingPairLists.length > 0) {\n      return stakingPairLists.map(pair => {\n        var _bulkPairs$pair, _bulkPairs$pair2;\n\n        const oneDayVolume = (_bulkPairs$pair = bulkPairs[pair]) === null || _bulkPairs$pair === void 0 ? void 0 : _bulkPairs$pair.oneDayVolumeUSD;\n        const reserveUSD = (_bulkPairs$pair2 = bulkPairs[pair]) === null || _bulkPairs$pair2 === void 0 ? void 0 : _bulkPairs$pair2.reserveUSD;\n\n        if (oneDayVolume && reserveUSD) {\n          return getOneYearFee(oneDayVolume, reserveUSD);\n        } else {\n          return 0;\n        }\n      });\n    } else {\n      return [];\n    }\n  }, [bulkPairs, stakingPairLists]);\n  const rewardSliderSettings = {\n    dots: false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: mobileWindowSize ? 1 : tabletWindowSize ? 2 : 3,\n    slidesToScroll: 1,\n    nextArrow: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 16\n    }, this),\n    prevArrow: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }, this)\n  };\n  return /*#__PURE__*/_jsxDEV(Slider, { ...rewardSliderSettings,\n    className: \"rewardsSlider\",\n    children: [lprewardItems.map((item, index) => /*#__PURE__*/_jsxDEV(RewardSliderItem, {\n      stakingAPY: stakingAPYs[index],\n      info: item\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)), dualrewardItems.map((item, index) => /*#__PURE__*/_jsxDEV(RewardSliderItem, {\n      stakingAPY: stakingAPYs[index],\n      info: item\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RewardSlider, \"Vtd/Fbk6TJfkqClbQKm9oxlXBQI=\", false, function () {\n  return [useTheme, useActiveWeb3React, useMediaQuery, useMediaQuery, useStakingInfo, useDualStakingInfo];\n});\n\n_c = RewardSlider;\nexport default _c2 = /*#__PURE__*/React.memo(RewardSlider);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RewardSlider\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/RewardSlider/RewardSlider.tsx"],"names":["React","useState","useEffect","useMemo","Slider","useMediaQuery","useTheme","ChevronRightIcon","ChevronLeftIcon","useStakingInfo","getBulkPairData","useDualStakingInfo","RewardSliderItem","useActiveWeb3React","getOneYearFee","ChainId","RewardSlider","theme","chainId","tabletWindowSize","breakpoints","down","mobileWindowSize","defaultChainId","MAINNET","lprewardItems","dualrewardItems","bulkPairs","setBulkPairs","stakingPairListStr","map","item","pair","concat","join","stakingPairLists","split","then","data","stakingAPYs","length","oneDayVolume","oneDayVolumeUSD","reserveUSD","rewardSliderSettings","dots","infinite","speed","slidesToShow","slidesToScroll","nextArrow","prevArrow","index","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport Slider from 'react-slick';\nimport { useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport {\n  useStakingInfo,\n  getBulkPairData,\n  useDualStakingInfo,\n} from 'state/stake/hooks';\nimport RewardSliderItem from './RewardSliderItem';\nimport { useActiveWeb3React } from 'hooks';\nimport { getOneYearFee } from 'utils';\nimport 'components/styles/RewardSlider.scss';\nimport { ChainId } from '@uniswap/sdk';\n\nconst RewardSlider: React.FC = () => {\n  const theme = useTheme();\n  const { chainId } = useActiveWeb3React();\n  const tabletWindowSize = useMediaQuery(theme.breakpoints.down('md'));\n  const mobileWindowSize = useMediaQuery(theme.breakpoints.down('sm'));\n  const defaultChainId = chainId ?? ChainId.MAINNET;\n  const lprewardItems = useStakingInfo(defaultChainId, null, 0, 2);\n  const dualrewardItems = useDualStakingInfo(defaultChainId, null, 0, 1);\n  const [bulkPairs, setBulkPairs] = useState<any>(null);\n\n  const stakingPairListStr = useMemo(() => {\n    return lprewardItems\n      .map((item) => item.pair)\n      .concat(dualrewardItems.map((item) => item.pair))\n      .join(',');\n  }, [dualrewardItems, lprewardItems]);\n\n  const stakingPairLists = stakingPairListStr.split(',');\n\n  useEffect(() => {\n    const stakingPairLists = stakingPairListStr.split(',');\n    if (stakingPairListStr) {\n      getBulkPairData(stakingPairLists).then((data) => setBulkPairs(data));\n    }\n  }, [stakingPairListStr]);\n\n  const stakingAPYs = useMemo(() => {\n    if (bulkPairs && stakingPairLists.length > 0) {\n      return stakingPairLists.map((pair) => {\n        const oneDayVolume = bulkPairs[pair]?.oneDayVolumeUSD;\n        const reserveUSD = bulkPairs[pair]?.reserveUSD;\n        if (oneDayVolume && reserveUSD) {\n          return getOneYearFee(oneDayVolume, reserveUSD);\n        } else {\n          return 0;\n        }\n      });\n    } else {\n      return [];\n    }\n  }, [bulkPairs, stakingPairLists]);\n\n  const rewardSliderSettings = {\n    dots: false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: mobileWindowSize ? 1 : tabletWindowSize ? 2 : 3,\n    slidesToScroll: 1,\n    nextArrow: <ChevronRightIcon />,\n    prevArrow: <ChevronLeftIcon />,\n  };\n\n  return (\n    <Slider {...rewardSliderSettings} className='rewardsSlider'>\n      {lprewardItems.map((item, index) => (\n        <RewardSliderItem\n          key={index}\n          stakingAPY={stakingAPYs[index]}\n          info={item}\n        />\n      ))}\n      {dualrewardItems.map((item, index) => (\n        <RewardSliderItem\n          key={index}\n          stakingAPY={stakingAPYs[index]}\n          info={item}\n        />\n      ))}\n    </Slider>\n  );\n};\n\nexport default React.memo(RewardSlider);\n"]},"metadata":{},"sourceType":"module"}