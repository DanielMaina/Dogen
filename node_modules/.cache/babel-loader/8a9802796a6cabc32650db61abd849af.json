{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport { useFetchSyrupListCallback } from 'hooks/useFetchSyrupListCallback';\nimport useInterval from 'hooks/useInterval';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { acceptSyrupUpdate } from './actions';\nexport default function Updater() {\n  _s();\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const syrups = useSelector(state => state.syrups.byUrl);\n  const isWindowVisible = useIsWindowVisible();\n  const fetchSyrupList = useFetchSyrupListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(syrups).forEach(url => fetchSyrupList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchSyrupList, isWindowVisible, syrups]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(syrups).forEach(listUrl => {\n      const syrup = syrups[listUrl];\n\n      if (!syrup.current && !syrup.loadingRequestId && !syrup.error) {\n        fetchSyrupList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchSyrupList, library, syrups]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(syrups).forEach(listUrl => {\n      const syrup = syrups[listUrl];\n\n      if (syrup.current && syrup.pendingUpdate) {\n        //Auto update syrups until we create the versioning infrastructure that the tokens list has\n        dispatch(acceptSyrupUpdate(listUrl));\n      }\n    });\n  }, [dispatch, syrups]);\n  return null;\n}\n\n_s(Updater, \"ziFpbdGhk8R4e0yxu5/+67op9NY=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useSelector, useIsWindowVisible, useFetchSyrupListCallback, useInterval];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/syrups/updater.ts"],"names":["useCallback","useEffect","useDispatch","useSelector","useActiveWeb3React","useFetchSyrupListCallback","useInterval","useIsWindowVisible","acceptSyrupUpdate","Updater","library","dispatch","syrups","state","byUrl","isWindowVisible","fetchSyrupList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","syrup","current","loadingRequestId","pendingUpdate"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,yBAAT,QAA0C,iCAA1C;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AAEA,SAASC,iBAAT,QAAkC,WAAlC;AAEA,eAAe,SAASC,OAAT,GAAyB;AAAA;;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAcN,kBAAkB,EAAtC;AACA,QAAMO,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,MAAM,GAAGT,WAAW,CACvBU,KAAD,IAAWA,KAAK,CAACD,MAAN,CAAaE,KADA,CAA1B;AAIA,QAAMC,eAAe,GAAGR,kBAAkB,EAA1C;AAEA,QAAMS,cAAc,GAAGX,yBAAyB,EAAhD;AACA,QAAMY,qBAAqB,GAAGjB,WAAW,CAAC,MAAM;AAC9C,QAAI,CAACe,eAAL,EAAsB;AACtBG,IAAAA,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,OAApB,CAA6BC,GAAD,IAC1BL,cAAc,CAACK,GAAD,CAAd,CAAoBC,KAApB,CAA2BC,KAAD,IACxBC,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CF,KAA9C,CADF,CADF;AAKD,GAPwC,EAOtC,CAACP,cAAD,EAAiBD,eAAjB,EAAkCH,MAAlC,CAPsC,CAAzC,CAVsC,CAmBtC;;AACAN,EAAAA,WAAW,CAACW,qBAAD,EAAwBP,OAAO,GAAG,OAAO,EAAP,GAAY,EAAf,GAAoB,IAAnD,CAAX,CApBsC,CAsBtC;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,OAApB,CAA6BM,OAAD,IAAa;AACvC,YAAMC,KAAK,GAAGf,MAAM,CAACc,OAAD,CAApB;;AAEA,UAAI,CAACC,KAAK,CAACC,OAAP,IAAkB,CAACD,KAAK,CAACE,gBAAzB,IAA6C,CAACF,KAAK,CAACJ,KAAxD,EAA+D;AAC7DP,QAAAA,cAAc,CAACU,OAAD,CAAd,CAAwBJ,KAAxB,CAA+BC,KAAD,IAC5BC,OAAO,CAACC,KAAR,CAAc,2BAAd,EAA2CF,KAA3C,CADF;AAGD;AACF,KARD;AASD,GAVQ,EAUN,CAACZ,QAAD,EAAWK,cAAX,EAA2BN,OAA3B,EAAoCE,MAApC,CAVM,CAAT,CAvBsC,CAmCtC;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,OAApB,CAA6BM,OAAD,IAAa;AACvC,YAAMC,KAAK,GAAGf,MAAM,CAACc,OAAD,CAApB;;AACA,UAAIC,KAAK,CAACC,OAAN,IAAiBD,KAAK,CAACG,aAA3B,EAA0C;AACxC;AACAnB,QAAAA,QAAQ,CAACH,iBAAiB,CAACkB,OAAD,CAAlB,CAAR;AACD;AACF,KAND;AAOD,GARQ,EAQN,CAACf,QAAD,EAAWC,MAAX,CARM,CAAT;AAUA,SAAO,IAAP;AACD;;GA/CuBH,O;UACFL,kB,EACHF,W,EACFC,W,EAISI,kB,EAEDF,yB,EAWvBC,W;;;KApBsBG,O","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from 'hooks';\nimport { useFetchSyrupListCallback } from 'hooks/useFetchSyrupListCallback';\nimport useInterval from 'hooks/useInterval';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { AppDispatch, AppState } from 'state';\nimport { acceptSyrupUpdate } from './actions';\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n  const syrups = useSelector<AppState, AppState['syrups']['byUrl']>(\n    (state) => state.syrups.byUrl,\n  );\n\n  const isWindowVisible = useIsWindowVisible();\n\n  const fetchSyrupList = useFetchSyrupListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(syrups).forEach((url) =>\n      fetchSyrupList(url).catch((error) =>\n        console.debug('interval list fetching error', error),\n      ),\n    );\n  }, [fetchSyrupList, isWindowVisible, syrups]);\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null);\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(syrups).forEach((listUrl) => {\n      const syrup = syrups[listUrl];\n\n      if (!syrup.current && !syrup.loadingRequestId && !syrup.error) {\n        fetchSyrupList(listUrl).catch((error) =>\n          console.debug('list added fetching error', error),\n        );\n      }\n    });\n  }, [dispatch, fetchSyrupList, library, syrups]);\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(syrups).forEach((listUrl) => {\n      const syrup = syrups[listUrl];\n      if (syrup.current && syrup.pendingUpdate) {\n        //Auto update syrups until we create the versioning infrastructure that the tokens list has\n        dispatch(acceptSyrupUpdate(listUrl));\n      }\n    });\n  }, [dispatch, syrups]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}