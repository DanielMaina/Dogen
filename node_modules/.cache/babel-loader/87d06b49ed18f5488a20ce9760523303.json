{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/SyrupCard/SyrupTimerLabel.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SyrupTimerLabel = _ref => {\n  _s();\n\n  let {\n    exactEnd,\n    isEnded\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [currentTime, setCurrentTime] = useState(Math.floor(Date.now() / 1000));\n  const {\n    breakpoints\n  } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n  const MINUTE = 60;\n  const HOUR = MINUTE * 60;\n  const DAY = HOUR * 24;\n  let timeRemaining = exactEnd - currentTime;\n  const days = (timeRemaining - timeRemaining % DAY) / DAY;\n  timeRemaining -= days * DAY;\n  const hours = (timeRemaining - timeRemaining % HOUR) / HOUR;\n  timeRemaining -= hours * HOUR;\n  const minutes = (timeRemaining - timeRemaining % MINUTE) / MINUTE;\n  timeRemaining -= minutes * MINUTE;\n  useEffect(() => {\n    if (isEnded) {\n      return;\n    }\n\n    const timeInterval = setInterval(() => {\n      const _currentTime = Math.floor(Date.now() / 1000);\n\n      setCurrentTime(_currentTime);\n    }, 1000);\n    return () => clearInterval(timeInterval);\n  }, [isEnded]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isEnded && Number.isFinite(timeRemaining) && /*#__PURE__*/_jsxDEV(Box, {\n      className: isMobile ? 'flex flex-wrap items-center justify-between' : '',\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: `text-secondary ${isMobile ? 'small' : 'caption'}`,\n        children: t('timeRemaining')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        className: isMobile ? '' : 'text-secondary',\n        children: `${days}d ${hours.toString().padStart(2, '0')}h ${minutes.toString().padStart(2, '0')}m ${timeRemaining}s`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), (isEnded || !Number.isFinite(timeRemaining)) && /*#__PURE__*/_jsxDEV(\"small\", {\n      className: \"text-secondary\",\n      children: t('rewardsEnded')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SyrupTimerLabel, \"7homndTtk/Y3SLH3dUGOZtEPtf0=\", false, function () {\n  return [useTranslation, useTheme, useMediaQuery];\n});\n\n_c = SyrupTimerLabel;\nexport default SyrupTimerLabel;\n\nvar _c;\n\n$RefreshReg$(_c, \"SyrupTimerLabel\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/SyrupCard/SyrupTimerLabel.tsx"],"names":["React","useEffect","useState","Box","useMediaQuery","useTheme","useTranslation","SyrupTimerLabel","exactEnd","isEnded","t","currentTime","setCurrentTime","Math","floor","Date","now","breakpoints","isMobile","down","MINUTE","HOUR","DAY","timeRemaining","days","hours","minutes","timeInterval","setInterval","_currentTime","clearInterval","Number","isFinite","toString","padStart"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Box, useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nconst SyrupTimerLabel: React.FC<{ exactEnd: number; isEnded: boolean }> = ({\n  exactEnd,\n  isEnded,\n}) => {\n  const { t } = useTranslation();\n  const [currentTime, setCurrentTime] = useState(Math.floor(Date.now() / 1000));\n  const { breakpoints } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n\n  const MINUTE = 60;\n  const HOUR = MINUTE * 60;\n  const DAY = HOUR * 24;\n\n  let timeRemaining = exactEnd - currentTime;\n\n  const days = (timeRemaining - (timeRemaining % DAY)) / DAY;\n  timeRemaining -= days * DAY;\n  const hours = (timeRemaining - (timeRemaining % HOUR)) / HOUR;\n  timeRemaining -= hours * HOUR;\n  const minutes = (timeRemaining - (timeRemaining % MINUTE)) / MINUTE;\n  timeRemaining -= minutes * MINUTE;\n\n  useEffect(() => {\n    if (isEnded) {\n      return;\n    }\n    const timeInterval = setInterval(() => {\n      const _currentTime = Math.floor(Date.now() / 1000);\n      setCurrentTime(_currentTime);\n    }, 1000);\n    return () => clearInterval(timeInterval);\n  }, [isEnded]);\n\n  return (\n    <>\n      {!isEnded && Number.isFinite(timeRemaining) && (\n        <Box\n          className={\n            isMobile ? 'flex flex-wrap items-center justify-between' : ''\n          }\n        >\n          <p className={`text-secondary ${isMobile ? 'small' : 'caption'}`}>\n            {t('timeRemaining')}\n          </p>\n          <small className={isMobile ? '' : 'text-secondary'}>\n            {`${days}d ${hours\n              .toString()\n              .padStart(2, '0')}h ${minutes\n              .toString()\n              .padStart(2, '0')}m ${timeRemaining}s`}\n          </small>\n        </Box>\n      )}\n      {(isEnded || !Number.isFinite(timeRemaining)) && (\n        <small className='text-secondary'>{t('rewardsEnded')}</small>\n      )}\n    </>\n  );\n};\n\nexport default SyrupTimerLabel;\n"]},"metadata":{},"sourceType":"module"}