{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/TopMovers/TopMovers.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Box } from '@material-ui/core';\nimport { ArrowDropUp, ArrowDropDown } from '@material-ui/icons';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Token, ChainId } from '@uniswap/sdk';\nimport { getAddress } from '@ethersproject/address';\nimport { CurrencyLogo } from 'components';\nimport { getTopTokens, getPriceClass, formatNumber } from 'utils';\nimport 'components/styles/TopMovers.scss';\nimport { useTranslation } from 'react-i18next';\nimport { useEthPrice } from 'state/application/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TopMovers = _ref => {\n  _s();\n\n  let {\n    hideArrow = false\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [topTokens, updateTopTokens] = useState(null);\n  const {\n    ethPrice\n  } = useEthPrice();\n  const topMoverTokens = useMemo(() => topTokens && topTokens.length >= 5 ? topTokens.slice(0, 5) : null, [topTokens]);\n  useEffect(() => {\n    (async () => {\n      if (ethPrice.price && ethPrice.oneDayPrice) {\n        const topTokensData = await getTopTokens(ethPrice.price, ethPrice.oneDayPrice, 5);\n\n        if (topTokensData) {\n          updateTopTokens(topTokensData);\n        }\n      }\n    })();\n  }, [updateTopTokens, ethPrice.price, ethPrice.oneDayPrice]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"bg-palette topMoversWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"weight-600 text-secondary\",\n      children: t('24hMostVolume')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"topMoversContent\",\n      children: topMoverTokens ? /*#__PURE__*/_jsxDEV(Box, {\n        children: topMoverTokens.map(token => {\n          const currency = new Token(ChainId.MAINNET, getAddress(token.id), token.decimals);\n          const priceClass = getPriceClass(Number(token.priceChangeUSD));\n          const priceUp = Number(token.priceChangeUSD) > 0;\n          const priceDown = Number(token.priceChangeUSD) < 0;\n          const priceUpPercent = Number(token.priceChangeUSD).toFixed(2);\n          return /*#__PURE__*/_jsxDEV(Box, {\n            className: \"topMoverItem\",\n            children: [/*#__PURE__*/_jsxDEV(CurrencyLogo, {\n              currency: currency,\n              size: \"28px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              ml: 1,\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                className: \"text-bold\",\n                children: token.symbol\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                className: \"flex justify-center items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"$\", formatNumber(token.priceUSD)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  className: `topMoverText ${priceClass}`,\n                  children: [!hideArrow && priceUp && /*#__PURE__*/_jsxDEV(ArrowDropUp, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 65,\n                    columnNumber: 51\n                  }, this), !hideArrow && priceDown && /*#__PURE__*/_jsxDEV(ArrowDropDown, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 66,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [hideArrow && priceUp ? '+' : '', priceUpPercent, \"%\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this)]\n          }, token.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rect\",\n        width: \"100%\",\n        height: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TopMovers, \"SbOcP9lGgFNplwa1dEHqts5Jawo=\", false, function () {\n  return [useTranslation, useEthPrice];\n});\n\n_c = TopMovers;\nexport default _c2 = /*#__PURE__*/React.memo(TopMovers);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TopMovers\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/TopMovers/TopMovers.tsx"],"names":["React","useEffect","useMemo","useState","Box","ArrowDropUp","ArrowDropDown","Skeleton","Token","ChainId","getAddress","CurrencyLogo","getTopTokens","getPriceClass","formatNumber","useTranslation","useEthPrice","TopMovers","hideArrow","t","topTokens","updateTopTokens","ethPrice","topMoverTokens","length","slice","price","oneDayPrice","topTokensData","map","token","currency","MAINNET","id","decimals","priceClass","Number","priceChangeUSD","priceUp","priceDown","priceUpPercent","toFixed","symbol","priceUSD","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Box } from '@material-ui/core';\nimport { ArrowDropUp, ArrowDropDown } from '@material-ui/icons';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Token, ChainId } from '@uniswap/sdk';\nimport { getAddress } from '@ethersproject/address';\nimport { CurrencyLogo } from 'components';\nimport { getTopTokens, getPriceClass, formatNumber } from 'utils';\nimport 'components/styles/TopMovers.scss';\nimport { useTranslation } from 'react-i18next';\nimport { useEthPrice } from 'state/application/hooks';\n\ninterface TopMoversProps {\n  hideArrow?: boolean;\n}\nconst TopMovers: React.FC<TopMoversProps> = ({ hideArrow = false }) => {\n  const { t } = useTranslation();\n  const [topTokens, updateTopTokens] = useState<any[] | null>(null);\n  const { ethPrice } = useEthPrice();\n\n  const topMoverTokens = useMemo(\n    () => (topTokens && topTokens.length >= 5 ? topTokens.slice(0, 5) : null),\n    [topTokens],\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (ethPrice.price && ethPrice.oneDayPrice) {\n        const topTokensData = await getTopTokens(\n          ethPrice.price,\n          ethPrice.oneDayPrice,\n          5,\n        );\n        if (topTokensData) {\n          updateTopTokens(topTokensData);\n        }\n      }\n    })();\n  }, [updateTopTokens, ethPrice.price, ethPrice.oneDayPrice]);\n\n  return (\n    <Box className='bg-palette topMoversWrapper'>\n      <p className='weight-600 text-secondary'>{t('24hMostVolume')}</p>\n      <Box className='topMoversContent'>\n        {topMoverTokens ? (\n          <Box>\n            {topMoverTokens.map((token: any) => {\n              const currency = new Token(\n                ChainId.MAINNET,\n                getAddress(token.id),\n                token.decimals,\n              );\n              const priceClass = getPriceClass(Number(token.priceChangeUSD));\n              const priceUp = Number(token.priceChangeUSD) > 0;\n              const priceDown = Number(token.priceChangeUSD) < 0;\n              const priceUpPercent = Number(token.priceChangeUSD).toFixed(2);\n              return (\n                <Box className='topMoverItem' key={token.id}>\n                  <CurrencyLogo currency={currency} size='28px' />\n                  <Box ml={1}>\n                    <small className='text-bold'>{token.symbol}</small>\n                    <Box className='flex justify-center items-center'>\n                      <small>${formatNumber(token.priceUSD)}</small>\n                      <Box className={`topMoverText ${priceClass}`}>\n                        {!hideArrow && priceUp && <ArrowDropUp />}\n                        {!hideArrow && priceDown && <ArrowDropDown />}\n                        <span>\n                          {hideArrow && priceUp ? '+' : ''}\n                          {priceUpPercent}%\n                        </span>\n                      </Box>\n                    </Box>\n                  </Box>\n                </Box>\n              );\n            })}\n          </Box>\n        ) : (\n          <Skeleton variant='rect' width='100%' height={100} />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default React.memo(TopMovers);\n"]},"metadata":{},"sourceType":"module"}