{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/Swap/AdvancedSwapDetails.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { TradeType } from '@uniswap/sdk';\nimport React, { useState } from 'react';\nimport { Box } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { Field } from 'state/swap/actions';\nimport { useUserSlippageTolerance } from 'state/user/hooks';\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from 'utils/prices';\nimport { QuestionHelper, FormattedPriceImpact, CurrencyLogo, SettingsModal } from 'components';\nimport { ReactComponent as EditIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/EditIcon.svg\";\nimport { formatTokenAmount } from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TradeSummary = _ref => {\n  _s();\n\n  let {\n    trade,\n    allowedSlippage\n  } = _ref;\n  const [openSettingsModal, setOpenSettingsModal] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    priceImpactWithoutFee,\n    realizedLPFee\n  } = computeTradePriceBreakdown(trade);\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT;\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage);\n  const tradeAmount = isExactIn ? trade.outputAmount : trade.inputAmount;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 1.5,\n    children: [openSettingsModal && /*#__PURE__*/_jsxDEV(SettingsModal, {\n      open: openSettingsModal,\n      onClose: () => setOpenSettingsModal(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"summaryRow\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [t('slippage'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('slippageHelper')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        onClick: () => setOpenSettingsModal(true),\n        className: \"swapSlippage\",\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [allowedSlippage / 100, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"summaryRow\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [isExactIn ? t('minReceived') : t('maxSold'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('txLimitHelper')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [formatTokenAmount(slippageAdjustedAmounts[isExactIn ? Field.OUTPUT : Field.INPUT]), ' ', tradeAmount.currency.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CurrencyLogo, {\n          currency: tradeAmount.currency,\n          size: \"16px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"summaryRow\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [t('priceimpact'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('priceImpactHelper')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormattedPriceImpact, {\n        priceImpact: priceImpactWithoutFee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"summaryRow\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [t('liquidityProviderFee'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('liquidityProviderFeeHelper')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [formatTokenAmount(realizedLPFee), \" \", trade.inputAmount.currency.symbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"summaryRow\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [t('route'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('swapRouteHelper')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: trade.route.path.map((token, i, path) => {\n          const isLastItem = i === path.length - 1;\n          return /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [token.symbol, ' ', // this is not to show the arrow at the end of the trade path\n            isLastItem ? '' : ' > ']\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TradeSummary, \"NGVTnUVpxApmMTAm04g/ih67QiQ=\", false, function () {\n  return [useTranslation];\n});\n\n_c = TradeSummary;\nexport const AdvancedSwapDetails = _ref2 => {\n  _s2();\n\n  let {\n    trade\n  } = _ref2;\n  const [allowedSlippage] = useUserSlippageTolerance();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: trade && /*#__PURE__*/_jsxDEV(TradeSummary, {\n      trade: trade,\n      allowedSlippage: allowedSlippage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s2(AdvancedSwapDetails, \"H61stQQnrbnQDlNsdLMys3w1hVM=\", false, function () {\n  return [useUserSlippageTolerance];\n});\n\n_c2 = AdvancedSwapDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TradeSummary\");\n$RefreshReg$(_c2, \"AdvancedSwapDetails\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/Swap/AdvancedSwapDetails.tsx"],"names":["TradeType","React","useState","Box","useTranslation","Field","useUserSlippageTolerance","computeSlippageAdjustedAmounts","computeTradePriceBreakdown","QuestionHelper","FormattedPriceImpact","CurrencyLogo","SettingsModal","formatTokenAmount","TradeSummary","trade","allowedSlippage","openSettingsModal","setOpenSettingsModal","t","priceImpactWithoutFee","realizedLPFee","isExactIn","tradeType","EXACT_INPUT","slippageAdjustedAmounts","tradeAmount","outputAmount","inputAmount","OUTPUT","INPUT","currency","symbol","route","path","map","token","i","isLastItem","length","AdvancedSwapDetails"],"mappings":"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","sourcesContent":["import { Trade, TradeType } from '@uniswap/sdk';\nimport React, { useState } from 'react';\nimport { Box } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { Field } from 'state/swap/actions';\nimport { useUserSlippageTolerance } from 'state/user/hooks';\nimport {\n  computeSlippageAdjustedAmounts,\n  computeTradePriceBreakdown,\n} from 'utils/prices';\nimport {\n  QuestionHelper,\n  FormattedPriceImpact,\n  CurrencyLogo,\n  SettingsModal,\n} from 'components';\nimport { ReactComponent as EditIcon } from 'assets/images/EditIcon.svg';\nimport { formatTokenAmount } from 'utils';\n\ninterface TradeSummaryProps {\n  trade: Trade;\n  allowedSlippage: number;\n}\n\nexport const TradeSummary: React.FC<TradeSummaryProps> = ({\n  trade,\n  allowedSlippage,\n}) => {\n  const [openSettingsModal, setOpenSettingsModal] = useState(false);\n  const { t } = useTranslation();\n\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(\n    trade,\n  );\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT;\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(\n    trade,\n    allowedSlippage,\n  );\n  const tradeAmount = isExactIn ? trade.outputAmount : trade.inputAmount;\n\n  return (\n    <Box mt={1.5}>\n      {openSettingsModal && (\n        <SettingsModal\n          open={openSettingsModal}\n          onClose={() => setOpenSettingsModal(false)}\n        />\n      )}\n      <Box className='summaryRow'>\n        <Box>\n          <small>{t('slippage')}:</small>\n          <QuestionHelper text={t('slippageHelper')} />\n        </Box>\n        <Box\n          onClick={() => setOpenSettingsModal(true)}\n          className='swapSlippage'\n        >\n          <small>{allowedSlippage / 100}%</small>\n          <EditIcon />\n        </Box>\n      </Box>\n      <Box className='summaryRow'>\n        <Box>\n          <small>{isExactIn ? t('minReceived') : t('maxSold')}:</small>\n          <QuestionHelper text={t('txLimitHelper')} />\n        </Box>\n        <Box>\n          <small>\n            {formatTokenAmount(\n              slippageAdjustedAmounts[isExactIn ? Field.OUTPUT : Field.INPUT],\n            )}{' '}\n            {tradeAmount.currency.symbol}\n          </small>\n          <CurrencyLogo currency={tradeAmount.currency} size='16px' />\n        </Box>\n      </Box>\n      <Box className='summaryRow'>\n        <Box>\n          <small>{t('priceimpact')}:</small>\n          <QuestionHelper text={t('priceImpactHelper')} />\n        </Box>\n        <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n      </Box>\n      <Box className='summaryRow'>\n        <Box>\n          <small>{t('liquidityProviderFee')}:</small>\n          <QuestionHelper text={t('liquidityProviderFeeHelper')} />\n        </Box>\n        <small>\n          {formatTokenAmount(realizedLPFee)} {trade.inputAmount.currency.symbol}\n        </small>\n      </Box>\n      <Box className='summaryRow'>\n        <Box>\n          <small>{t('route')}:</small>\n          <QuestionHelper text={t('swapRouteHelper')} />\n        </Box>\n        <Box>\n          {trade.route.path.map((token, i, path) => {\n            const isLastItem: boolean = i === path.length - 1;\n            return (\n              <small key={i}>\n                {token.symbol}{' '}\n                {// this is not to show the arrow at the end of the trade path\n                isLastItem ? '' : ' > '}\n              </small>\n            );\n          })}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport interface AdvancedSwapDetailsProps {\n  trade?: Trade;\n}\n\nexport const AdvancedSwapDetails: React.FC<AdvancedSwapDetailsProps> = ({\n  trade,\n}) => {\n  const [allowedSlippage] = useUserSlippageTolerance();\n\n  return (\n    <>\n      {trade && (\n        <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}