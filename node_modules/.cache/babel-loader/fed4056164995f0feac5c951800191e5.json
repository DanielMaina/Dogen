{"ast":null,"code":"import gql from 'graphql-tag';\nimport { GlobalConst } from 'constants/index';\nexport const SUBGRAPH_HEALTH = gql`\n  query health {\n    indexingStatusForCurrentVersion(subgraphName: \"sameepsi/quickswap06\") {\n      synced\n      health\n      chains {\n        chainHeadBlock {\n          number\n        }\n        latestBlock {\n          number\n        }\n      }\n    }\n  }\n`;\nexport const TOKEN_SEARCH = gql`\n  query tokens($value: String, $id: String) {\n    asSymbol: tokens(\n      where: { symbol_contains: $value }\n      orderBy: totalLiquidity\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      decimals\n      tradeVolumeUSD\n      totalLiquidity\n    }\n    asName: tokens(\n      where: { name_contains: $value }\n      orderBy: totalLiquidity\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      decimals\n      tradeVolumeUSD\n      totalLiquidity\n    }\n    asAddress: tokens(\n      where: { id: $id }\n      orderBy: totalLiquidity\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      decimals\n      tradeVolumeUSD\n      totalLiquidity\n    }\n  }\n`;\nexport const PAIR_SEARCH = gql`\n  query pairs($tokens: [Bytes]!, $id: String) {\n    as0: pairs(where: { token0_in: $tokens }) {\n      id\n      trackedReserveETH\n      token0 {\n        id\n        symbol\n        decimals\n        name\n      }\n      token1 {\n        id\n        symbol\n        decimals\n        name\n      }\n    }\n    as1: pairs(where: { token1_in: $tokens }) {\n      id\n      trackedReserveETH\n      token0 {\n        id\n        symbol\n        decimals\n        name\n      }\n      token1 {\n        id\n        symbol\n        decimals\n        name\n      }\n    }\n    asAddress: pairs(where: { id: $id }) {\n      id\n      trackedReserveETH\n      token0 {\n        id\n        symbol\n        decimals\n        name\n      }\n      token1 {\n        id\n        symbol\n        decimals\n        name\n      }\n    }\n  }\n`;\nexport const TOKEN_CHART = gql`\n  query tokenDayDatas($tokenAddr: String!, $startTime: Int!) {\n    tokenDayDatas(\n      first: 1000\n      orderBy: date\n      orderDirection: desc\n      where: { token: $tokenAddr, date_gt: $startTime }\n    ) {\n      id\n      date\n      priceUSD\n      totalLiquidityToken\n      totalLiquidityUSD\n      totalLiquidityETH\n      dailyVolumeETH\n      dailyVolumeToken\n      dailyVolumeUSD\n    }\n  }\n`;\nexport const PAIR_CHART = gql`\n  query pairDayDatas($pairAddress: Bytes!, $skip: Int!, $startTime: Int!) {\n    pairDayDatas(\n      first: 1000\n      skip: $skip\n      orderBy: date\n      orderDirection: asc\n      where: { pairAddress: $pairAddress, date_gt: $startTime }\n    ) {\n      id\n      date\n      dailyVolumeToken0\n      dailyVolumeToken1\n      dailyVolumeUSD\n      reserveUSD\n    }\n  }\n`;\nexport const HOURLY_PAIR_RATES = (pairAddress, blocks) => {\n  let queryString = 'query blocks {';\n  queryString += blocks.map(block => `\n      t${block.timestamp}: pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \n        token0Price\n        token1Price\n      }\n    `);\n  queryString += '}';\n  return gql(queryString);\n};\n_c = HOURLY_PAIR_RATES;\nconst PairFields = `\n  fragment PairFields on Pair {\n    id\n    trackedReserveETH\n    reserve0\n    reserve1\n    volumeUSD\n    reserveUSD\n    totalSupply\n    token0 {\n      symbol\n      id\n      decimals\n      derivedETH\n    }\n    token1 {\n      symbol\n      id\n      decimals\n      derivedETH\n    }\n  }\n`;\nexport const PAIRS_CURRENT = count => {\n  const queryString = `\n  query pairs {\n    pairs(first: ${count}, orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n    }\n  }`;\n  return gql(queryString);\n};\n_c2 = PAIRS_CURRENT;\nexport const PAIRS_BULK = pairs => {\n  let pairsString = `[`;\n  pairs.map(pair => {\n    return pairsString += `\"${pair.toLowerCase()}\"`;\n  });\n  pairsString += ']';\n  const queryString = `\n  ${PairFields}\n  query pairs {\n    pairs(first: ${pairs.length}, where: { id_in: ${pairsString} }, orderBy: trackedReserveETH, orderDirection: desc) {\n      ...PairFields\n    }\n  }\n  `;\n  return gql(queryString);\n};\n_c3 = PAIRS_BULK;\nexport const ALL_TOKENS = gql`\n  query tokens($skip: Int!) {\n    tokens(first: 10, skip: $skip) {\n      id\n      name\n      symbol\n      decimals\n      tradeVolumeUSD\n      totalLiquidity\n    }\n  }\n`;\nexport const ALL_PAIRS = gql`\n  query pairs($skip: Int!) {\n    pairs(\n      first: 10\n      skip: $skip\n      orderBy: trackedReserveETH\n      orderDirection: desc\n    ) {\n      id\n      trackedReserveETH\n      token0 {\n        id\n        symbol\n        name\n        decimals\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n      }\n    }\n  }\n`;\nexport const PAIRS_BULK1 = gql`\n  ${PairFields}\n  query pairs($allPairs: [Bytes]!) {\n    pairs(\n      first: 500\n      where: { id_in: $allPairs }\n      orderBy: trackedReserveETH\n      orderDirection: desc\n    ) {\n      ...PairFields\n    }\n  }\n`;\nconst TokenFields = `\n  fragment TokenFields on Token {\n    id\n    name\n    symbol\n    decimals\n    derivedETH\n    tradeVolume\n    tradeVolumeUSD\n    untrackedVolumeUSD\n    totalLiquidity\n  }\n`;\nexport const TOKENS_CURRENT = count => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(first: ${count}, orderBy: tradeVolumeUSD, orderDirection: desc) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c4 = TOKENS_CURRENT;\nexport const TOKEN_INFO = address => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(first: 1, where: {id: \"${address}\"}) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c5 = TOKEN_INFO;\nexport const TOKEN_INFO_OLD = (block, address) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(block: {number: ${block}} first: 1, where: {id: \"${address}\"}) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c6 = TOKEN_INFO_OLD;\nexport const TOKENS_DYNAMIC = (block, count) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(block: {number: ${block}} first: ${count}, orderBy: tradeVolumeUSD, orderDirection: desc) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c7 = TOKENS_DYNAMIC;\nexport const TOKEN_DATA = (tokenAddress, block) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(${block ? `block : {number: ${block}}` : ``} where: {id:\"${tokenAddress}\"}) {\n        ...TokenFields\n      }\n      pairs0: pairs(where: {token0: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n      pairs1: pairs(where: {token1: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c8 = TOKEN_DATA;\nexport const PAIR_ID = (tokenAddress0, tokenAddress1) => {\n  const queryString = `\n    query tokens {\n      pairs0: pairs(where: {token0: \"${tokenAddress0}\", token1: \"${tokenAddress1}\"}){\n        id\n      }\n      pairs1: pairs(where: {token0: \"${tokenAddress1}\", token1: \"${tokenAddress0}\"}){\n        id\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c9 = PAIR_ID;\nexport const TOKEN_DATA1 = (tokenAddress, tokenAddress1) => {\n  const queryString = `\n    query tokens {\n      pairs0: pairs(where: {token0: \"${tokenAddress}\", token1: \"${tokenAddress1}\"}){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n      pairs1: pairs(where: {token0: \"${tokenAddress}\", token1_not: \"${tokenAddress1}\"}, first: 2, orderBy: reserveUSD, orderDirection: desc){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n      pairs2: pairs(where: {token1: \"${tokenAddress}\", token0_not: \"${tokenAddress1}\"}, first: 2, orderBy: reserveUSD, orderDirection: desc){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n      pairs3: pairs(where: {token0: \"${tokenAddress1}\", token1_not: \"${tokenAddress}\"}, first: 2, orderBy: reserveUSD, orderDirection: desc){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n      pairs4: pairs(where: {token1: \"${tokenAddress1}\", token0_not: \"${tokenAddress}\"}, first: 2, orderBy: reserveUSD, orderDirection: desc){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c10 = TOKEN_DATA1;\nexport const TOKEN_DATA2 = tokenAddress => {\n  const queryString = `\n    query tokens {\n      pairs0: pairs(where: {token0: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n      pairs1: pairs(where: {token1: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c11 = TOKEN_DATA2;\nexport const PAIR_DATA = (pairAddress, block) => {\n  const queryString = `\n    ${PairFields}\n    query pairs {\n      pairs(${block ? `block: {number: ${block}}` : ``} where: { id: \"${pairAddress}\"} ) {\n        ...PairFields\n      }\n    }`;\n  return gql(queryString);\n};\n_c12 = PAIR_DATA;\nexport const ETH_PRICE = block => {\n  const queryString = block ? `\n    query bundles {\n      bundles(where: { id: ${GlobalConst.utils.BUNDLE_ID} } block: {number: ${block}}) {\n        id\n        ethPrice\n      }\n    }\n  ` : ` query bundles {\n      bundles(where: { id: ${GlobalConst.utils.BUNDLE_ID} }) {\n        id\n        ethPrice\n      }\n    }\n  `;\n  return gql(queryString);\n};\n_c13 = ETH_PRICE;\nexport const PAIRS_HISTORICAL_BULK = (block, pairs) => {\n  let pairsString = `[`;\n  pairs.map(pair => {\n    return pairsString += `\"${pair.toLowerCase()}\"`;\n  });\n  pairsString += ']';\n  const queryString = `\n  query pairs {\n    pairs(first: ${pairs.length}, where: {id_in: ${pairsString}}, block: {number: ${block}}, orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n      reserveUSD\n      trackedReserveETH\n      volumeUSD\n      untrackedVolumeUSD\n      totalSupply\n    }\n  }\n  `;\n  return gql(queryString);\n};\n_c14 = PAIRS_HISTORICAL_BULK;\nexport const PRICES_BY_BLOCK = (tokenAddress, blocks) => {\n  let queryString = 'query blocks {';\n  queryString += blocks.map(block => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedETH\n      }\n    `);\n  queryString += ',';\n  queryString += blocks.map(block => `\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        ethPrice\n      }\n    `);\n  queryString += '}';\n  return gql(queryString);\n};\n_c15 = PRICES_BY_BLOCK;\nexport const GLOBAL_DATA = block => {\n  const queryString = ` query uniswapFactories {\n      uniswapFactories(\n       ${block ? `block: { number: ${block}}` : ``} \n       where: { id: \"${GlobalConst.addresses.FACTORY_ADDRESS}\" }) {\n        id\n        totalVolumeUSD\n        totalVolumeETH\n        untrackedVolumeUSD\n        totalLiquidityUSD\n        totalLiquidityETH\n        txCount\n        pairCount\n      }\n    }`;\n  return gql(queryString);\n};\n_c16 = GLOBAL_DATA;\nexport const GLOBAL_ALLDATA = reqData => {\n  const queryString = reqData.map((each, index) => {\n    return `${each.index}: uniswapFactories(\n    ${each.block ? `block: { number: ${each.block} }` : ``}   \n    where: { id: \"${GlobalConst.addresses.FACTORY_ADDRESS}\" }) {\n      id\n      totalVolumeUSD\n      totalVolumeETH\n      untrackedVolumeUSD\n      totalLiquidityUSD\n      totalLiquidityETH\n      txCount\n      pairCount\n    }`;\n  });\n  return gql(`query uniswapFactories {${queryString.join(' ')}}`);\n};\n_c17 = GLOBAL_ALLDATA;\nexport const GLOBAL_CHART = gql`\n  query uniswapDayDatas($startTime: Int!, $skip: Int!) {\n    uniswapDayDatas(\n      first: 500\n      skip: $skip\n      where: { date_gt: $startTime }\n      orderBy: date\n      orderDirection: asc\n    ) {\n      id\n      date\n      totalVolumeUSD\n      dailyVolumeUSD\n      dailyVolumeETH\n      totalLiquidityUSD\n      totalLiquidityETH\n    }\n  }\n`;\nexport const GET_BLOCK = gql`\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\n    blocks(\n      first: 1\n      orderBy: timestamp\n      orderDirection: asc\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\n    ) {\n      id\n      number\n      timestamp\n    }\n  }\n`;\nexport const GET_BLOCKS = timestamps => {\n  let queryString = 'query blocks {';\n  queryString += timestamps.map(timestamp => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${timestamp + 600} }) {\n      number\n    }`;\n  });\n  queryString += '}';\n  return gql(queryString);\n};\n_c18 = GET_BLOCKS;\nexport const FILTERED_TRANSACTIONS = gql`\n  query($allPairs: [Bytes]!) {\n    mints(\n      first: 20\n      where: { pair_in: $allPairs }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    burns(\n      first: 20\n      where: { pair_in: $allPairs }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(\n      first: 30\n      where: { pair_in: $allPairs }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      transaction {\n        id\n        timestamp\n      }\n      id\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n  }\n`;\nexport const SWAP_TRANSACTIONS = gql`\n  query($allPairs: [Bytes]!, $lastTime: Int!) {\n    swaps(\n      first: 1000\n      where: { pair_in: $allPairs, timestamp_gte: $lastTime }\n      orderBy: timestamp\n    ) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n  }\n`;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18;\n\n$RefreshReg$(_c, \"HOURLY_PAIR_RATES\");\n$RefreshReg$(_c2, \"PAIRS_CURRENT\");\n$RefreshReg$(_c3, \"PAIRS_BULK\");\n$RefreshReg$(_c4, \"TOKENS_CURRENT\");\n$RefreshReg$(_c5, \"TOKEN_INFO\");\n$RefreshReg$(_c6, \"TOKEN_INFO_OLD\");\n$RefreshReg$(_c7, \"TOKENS_DYNAMIC\");\n$RefreshReg$(_c8, \"TOKEN_DATA\");\n$RefreshReg$(_c9, \"PAIR_ID\");\n$RefreshReg$(_c10, \"TOKEN_DATA1\");\n$RefreshReg$(_c11, \"TOKEN_DATA2\");\n$RefreshReg$(_c12, \"PAIR_DATA\");\n$RefreshReg$(_c13, \"ETH_PRICE\");\n$RefreshReg$(_c14, \"PAIRS_HISTORICAL_BULK\");\n$RefreshReg$(_c15, \"PRICES_BY_BLOCK\");\n$RefreshReg$(_c16, \"GLOBAL_DATA\");\n$RefreshReg$(_c17, \"GLOBAL_ALLDATA\");\n$RefreshReg$(_c18, \"GET_BLOCKS\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/apollo/queries.ts"],"names":["gql","GlobalConst","SUBGRAPH_HEALTH","TOKEN_SEARCH","PAIR_SEARCH","TOKEN_CHART","PAIR_CHART","HOURLY_PAIR_RATES","pairAddress","blocks","queryString","map","block","timestamp","number","PairFields","PAIRS_CURRENT","count","PAIRS_BULK","pairs","pairsString","pair","toLowerCase","length","ALL_TOKENS","ALL_PAIRS","PAIRS_BULK1","TokenFields","TOKENS_CURRENT","TOKEN_INFO","address","TOKEN_INFO_OLD","TOKENS_DYNAMIC","TOKEN_DATA","tokenAddress","PAIR_ID","tokenAddress0","tokenAddress1","TOKEN_DATA1","TOKEN_DATA2","PAIR_DATA","ETH_PRICE","utils","BUNDLE_ID","PAIRS_HISTORICAL_BULK","PRICES_BY_BLOCK","GLOBAL_DATA","addresses","FACTORY_ADDRESS","GLOBAL_ALLDATA","reqData","each","index","join","GLOBAL_CHART","GET_BLOCK","GET_BLOCKS","timestamps","FILTERED_TRANSACTIONS","SWAP_TRANSACTIONS"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,OAAO,MAAMC,eAAe,GAAGF,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO;AAiBP,OAAO,MAAMG,YAAY,GAAGH,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvCO;AAyCP,OAAO,MAAMI,WAAW,GAAGJ,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnDO;AAqDP,OAAO,MAAMK,WAAW,GAAGL,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBO;AAqBP,OAAO,MAAMM,UAAU,GAAGN,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;AAmBP,OAAO,MAAMO,iBAAiB,GAAG,CAACC,WAAD,EAAsBC,MAAtB,KAAwC;AACvE,MAAIC,WAAW,GAAG,gBAAlB;AACAA,EAAAA,WAAW,IAAID,MAAM,CAACE,GAAP,CACZC,KAAD,IAAY;AAChB,SAASA,KAAK,CAACC,SAAU,cAAaL,WAAY,uBAAsBI,KAAK,CAACE,MAAO;AACrF;AACA;AACA;AACA,KANiB,CAAf;AA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C,SAAZ,CAAsBC,eAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAbE;AAcA,SAAOhD,GAAG,CAACU,WAAD,CAAV;AACD,CAhBM;OAAMoC,W;AAkBb,OAAO,MAAMG,cAAmB,GAAIC,OAAD,IAAkB;AACnD,QAAMxC,WAAW,GAAGwC,OAAO,CAACvC,GAAR,CAAY,CAACwC,IAAD,EAAYC,KAAZ,KAA2B;AACzD,WAAQ,GAAED,IAAI,CAACC,KAAM;AACzB,MAAMD,IAAI,CAACvC,KAAL,GAAc,oBAAmBuC,IAAI,CAACvC,KAAM,IAA5C,GAAmD,EAAE;AAC3D,oBAAoBX,WAAW,CAAC8C,SAAZ,CAAsBC,eAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAXI;AAYD,GAbmB,CAApB;AAcA,SAAOhD,GAAG,CAAE,2BAA0BU,WAAW,CAAC2C,IAAZ,CAAiB,GAAjB,CAAsB,GAAlD,CAAV;AACD,CAhBM;OAAMJ,c;AAkBb,OAAO,MAAMK,YAAY,GAAGtD,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAoBP,OAAO,MAAMuD,SAAS,GAAGvD,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO;AAeP,OAAO,MAAMwD,UAAe,GAAIC,UAAD,IAA0B;AACvD,MAAI/C,WAAW,GAAG,gBAAlB;AACAA,EAAAA,WAAW,IAAI+C,UAAU,CAAC9C,GAAX,CAAgBE,SAAD,IAAe;AAC3C,WAAQ,IAAGA,SAAU,sFAAqFA,SAAU,mBAAkBA,SAAS,GAC7I,GAAI;AACV;AACA,MAHI;AAID,GALc,CAAf;AAMAH,EAAAA,WAAW,IAAI,GAAf;AACA,SAAOV,GAAG,CAACU,WAAD,CAAV;AACD,CAVM;OAAM8C,U;AAYb,OAAO,MAAME,qBAAqB,GAAG1D,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnFO;AAqFP,OAAO,MAAM2D,iBAAiB,GAAG3D,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BO","sourcesContent":["import gql from 'graphql-tag';\nimport { GlobalConst } from 'constants/index';\n\nexport const SUBGRAPH_HEALTH = gql`\n  query health {\n    indexingStatusForCurrentVersion(subgraphName: \"sameepsi/quickswap06\") {\n      synced\n      health\n      chains {\n        chainHeadBlock {\n          number\n        }\n        latestBlock {\n          number\n        }\n      }\n    }\n  }\n`;\n\nexport const TOKEN_SEARCH = gql`\n  query tokens($value: String, $id: String) {\n    asSymbol: tokens(\n      where: { symbol_contains: $value }\n      orderBy: totalLiquidity\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      decimals\n      tradeVolumeUSD\n      totalLiquidity\n    }\n    asName: tokens(\n      where: { name_contains: $value }\n      orderBy: totalLiquidity\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      decimals\n      tradeVolumeUSD\n      totalLiquidity\n    }\n    asAddress: tokens(\n      where: { id: $id }\n      orderBy: totalLiquidity\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      decimals\n      tradeVolumeUSD\n      totalLiquidity\n    }\n  }\n`;\n\nexport const PAIR_SEARCH = gql`\n  query pairs($tokens: [Bytes]!, $id: String) {\n    as0: pairs(where: { token0_in: $tokens }) {\n      id\n      trackedReserveETH\n      token0 {\n        id\n        symbol\n        decimals\n        name\n      }\n      token1 {\n        id\n        symbol\n        decimals\n        name\n      }\n    }\n    as1: pairs(where: { token1_in: $tokens }) {\n      id\n      trackedReserveETH\n      token0 {\n        id\n        symbol\n        decimals\n        name\n      }\n      token1 {\n        id\n        symbol\n        decimals\n        name\n      }\n    }\n    asAddress: pairs(where: { id: $id }) {\n      id\n      trackedReserveETH\n      token0 {\n        id\n        symbol\n        decimals\n        name\n      }\n      token1 {\n        id\n        symbol\n        decimals\n        name\n      }\n    }\n  }\n`;\n\nexport const TOKEN_CHART = gql`\n  query tokenDayDatas($tokenAddr: String!, $startTime: Int!) {\n    tokenDayDatas(\n      first: 1000\n      orderBy: date\n      orderDirection: desc\n      where: { token: $tokenAddr, date_gt: $startTime }\n    ) {\n      id\n      date\n      priceUSD\n      totalLiquidityToken\n      totalLiquidityUSD\n      totalLiquidityETH\n      dailyVolumeETH\n      dailyVolumeToken\n      dailyVolumeUSD\n    }\n  }\n`;\n\nexport const PAIR_CHART = gql`\n  query pairDayDatas($pairAddress: Bytes!, $skip: Int!, $startTime: Int!) {\n    pairDayDatas(\n      first: 1000\n      skip: $skip\n      orderBy: date\n      orderDirection: asc\n      where: { pairAddress: $pairAddress, date_gt: $startTime }\n    ) {\n      id\n      date\n      dailyVolumeToken0\n      dailyVolumeToken1\n      dailyVolumeUSD\n      reserveUSD\n    }\n  }\n`;\n\nexport const HOURLY_PAIR_RATES = (pairAddress: string, blocks: any[]) => {\n  let queryString = 'query blocks {';\n  queryString += blocks.map(\n    (block) => `\n      t${block.timestamp}: pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \n        token0Price\n        token1Price\n      }\n    `,\n  );\n\n  queryString += '}';\n  return gql(queryString);\n};\n\nconst PairFields = `\n  fragment PairFields on Pair {\n    id\n    trackedReserveETH\n    reserve0\n    reserve1\n    volumeUSD\n    reserveUSD\n    totalSupply\n    token0 {\n      symbol\n      id\n      decimals\n      derivedETH\n    }\n    token1 {\n      symbol\n      id\n      decimals\n      derivedETH\n    }\n  }\n`;\n\nexport const PAIRS_CURRENT: any = (count: number) => {\n  const queryString = `\n  query pairs {\n    pairs(first: ${count}, orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n    }\n  }`;\n  return gql(queryString);\n};\n\nexport const PAIRS_BULK: any = (pairs: any[]) => {\n  let pairsString = `[`;\n  pairs.map((pair) => {\n    return (pairsString += `\"${pair.toLowerCase()}\"`);\n  });\n  pairsString += ']';\n  const queryString = `\n  ${PairFields}\n  query pairs {\n    pairs(first: ${pairs.length}, where: { id_in: ${pairsString} }, orderBy: trackedReserveETH, orderDirection: desc) {\n      ...PairFields\n    }\n  }\n  `;\n  return gql(queryString);\n};\n\nexport const ALL_TOKENS = gql`\n  query tokens($skip: Int!) {\n    tokens(first: 10, skip: $skip) {\n      id\n      name\n      symbol\n      decimals\n      tradeVolumeUSD\n      totalLiquidity\n    }\n  }\n`;\n\nexport const ALL_PAIRS = gql`\n  query pairs($skip: Int!) {\n    pairs(\n      first: 10\n      skip: $skip\n      orderBy: trackedReserveETH\n      orderDirection: desc\n    ) {\n      id\n      trackedReserveETH\n      token0 {\n        id\n        symbol\n        name\n        decimals\n      }\n      token1 {\n        id\n        symbol\n        name\n        decimals\n      }\n    }\n  }\n`;\n\nexport const PAIRS_BULK1 = gql`\n  ${PairFields}\n  query pairs($allPairs: [Bytes]!) {\n    pairs(\n      first: 500\n      where: { id_in: $allPairs }\n      orderBy: trackedReserveETH\n      orderDirection: desc\n    ) {\n      ...PairFields\n    }\n  }\n`;\n\nconst TokenFields = `\n  fragment TokenFields on Token {\n    id\n    name\n    symbol\n    decimals\n    derivedETH\n    tradeVolume\n    tradeVolumeUSD\n    untrackedVolumeUSD\n    totalLiquidity\n  }\n`;\n\nexport const TOKENS_CURRENT: any = (count: number) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(first: ${count}, orderBy: tradeVolumeUSD, orderDirection: desc) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const TOKEN_INFO: any = (address: string) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(first: 1, where: {id: \"${address}\"}) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const TOKEN_INFO_OLD: any = (block: number, address: string) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(block: {number: ${block}} first: 1, where: {id: \"${address}\"}) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const TOKENS_DYNAMIC: any = (block: number, count: number) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(block: {number: ${block}} first: ${count}, orderBy: tradeVolumeUSD, orderDirection: desc) {\n        ...TokenFields\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const TOKEN_DATA: any = (tokenAddress: string, block: number) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(${\n        block ? `block : {number: ${block}}` : ``\n      } where: {id:\"${tokenAddress}\"}) {\n        ...TokenFields\n      }\n      pairs0: pairs(where: {token0: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n      pairs1: pairs(where: {token1: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const PAIR_ID: any = (tokenAddress0: string, tokenAddress1: string) => {\n  const queryString = `\n    query tokens {\n      pairs0: pairs(where: {token0: \"${tokenAddress0}\", token1: \"${tokenAddress1}\"}){\n        id\n      }\n      pairs1: pairs(where: {token0: \"${tokenAddress1}\", token1: \"${tokenAddress0}\"}){\n        id\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const TOKEN_DATA1: any = (\n  tokenAddress: string,\n  tokenAddress1: string,\n) => {\n  const queryString = `\n    query tokens {\n      pairs0: pairs(where: {token0: \"${tokenAddress}\", token1: \"${tokenAddress1}\"}){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n      pairs1: pairs(where: {token0: \"${tokenAddress}\", token1_not: \"${tokenAddress1}\"}, first: 2, orderBy: reserveUSD, orderDirection: desc){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n      pairs2: pairs(where: {token1: \"${tokenAddress}\", token0_not: \"${tokenAddress1}\"}, first: 2, orderBy: reserveUSD, orderDirection: desc){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n      pairs3: pairs(where: {token0: \"${tokenAddress1}\", token1_not: \"${tokenAddress}\"}, first: 2, orderBy: reserveUSD, orderDirection: desc){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n      pairs4: pairs(where: {token1: \"${tokenAddress1}\", token0_not: \"${tokenAddress}\"}, first: 2, orderBy: reserveUSD, orderDirection: desc){\n        id\n        token0 {\n          id\n        }\n        token1{\n          id\n        }\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const TOKEN_DATA2: any = (tokenAddress: string) => {\n  const queryString = `\n    query tokens {\n      pairs0: pairs(where: {token0: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n      pairs1: pairs(where: {token1: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const PAIR_DATA: any = (pairAddress: string, block?: number) => {\n  const queryString = `\n    ${PairFields}\n    query pairs {\n      pairs(${\n        block ? `block: {number: ${block}}` : ``\n      } where: { id: \"${pairAddress}\"} ) {\n        ...PairFields\n      }\n    }`;\n  return gql(queryString);\n};\n\nexport const ETH_PRICE: any = (block?: number) => {\n  const queryString = block\n    ? `\n    query bundles {\n      bundles(where: { id: ${GlobalConst.utils.BUNDLE_ID} } block: {number: ${block}}) {\n        id\n        ethPrice\n      }\n    }\n  `\n    : ` query bundles {\n      bundles(where: { id: ${GlobalConst.utils.BUNDLE_ID} }) {\n        id\n        ethPrice\n      }\n    }\n  `;\n  return gql(queryString);\n};\n\nexport const PAIRS_HISTORICAL_BULK: any = (block: number, pairs: any[]) => {\n  let pairsString = `[`;\n  pairs.map((pair) => {\n    return (pairsString += `\"${pair.toLowerCase()}\"`);\n  });\n  pairsString += ']';\n  const queryString = `\n  query pairs {\n    pairs(first: ${pairs.length}, where: {id_in: ${pairsString}}, block: {number: ${block}}, orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n      reserveUSD\n      trackedReserveETH\n      volumeUSD\n      untrackedVolumeUSD\n      totalSupply\n    }\n  }\n  `;\n  return gql(queryString);\n};\n\nexport const PRICES_BY_BLOCK: any = (tokenAddress: string, blocks: any[]) => {\n  let queryString = 'query blocks {';\n  queryString += blocks.map(\n    (block) => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedETH\n      }\n    `,\n  );\n  queryString += ',';\n  queryString += blocks.map(\n    (block) => `\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        ethPrice\n      }\n    `,\n  );\n\n  queryString += '}';\n  return gql(queryString);\n};\n\nexport const GLOBAL_DATA: any = (block?: number) => {\n  const queryString = ` query uniswapFactories {\n      uniswapFactories(\n       ${block ? `block: { number: ${block}}` : ``} \n       where: { id: \"${GlobalConst.addresses.FACTORY_ADDRESS}\" }) {\n        id\n        totalVolumeUSD\n        totalVolumeETH\n        untrackedVolumeUSD\n        totalLiquidityUSD\n        totalLiquidityETH\n        txCount\n        pairCount\n      }\n    }`;\n  return gql(queryString);\n};\n\nexport const GLOBAL_ALLDATA: any = (reqData: any) => {\n  const queryString = reqData.map((each: any, index: any) => {\n    return `${each.index}: uniswapFactories(\n    ${each.block ? `block: { number: ${each.block} }` : ``}   \n    where: { id: \"${GlobalConst.addresses.FACTORY_ADDRESS}\" }) {\n      id\n      totalVolumeUSD\n      totalVolumeETH\n      untrackedVolumeUSD\n      totalLiquidityUSD\n      totalLiquidityETH\n      txCount\n      pairCount\n    }`;\n  });\n  return gql(`query uniswapFactories {${queryString.join(' ')}}`);\n};\n\nexport const GLOBAL_CHART = gql`\n  query uniswapDayDatas($startTime: Int!, $skip: Int!) {\n    uniswapDayDatas(\n      first: 500\n      skip: $skip\n      where: { date_gt: $startTime }\n      orderBy: date\n      orderDirection: asc\n    ) {\n      id\n      date\n      totalVolumeUSD\n      dailyVolumeUSD\n      dailyVolumeETH\n      totalLiquidityUSD\n      totalLiquidityETH\n    }\n  }\n`;\n\nexport const GET_BLOCK = gql`\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\n    blocks(\n      first: 1\n      orderBy: timestamp\n      orderDirection: asc\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\n    ) {\n      id\n      number\n      timestamp\n    }\n  }\n`;\n\nexport const GET_BLOCKS: any = (timestamps: number[]) => {\n  let queryString = 'query blocks {';\n  queryString += timestamps.map((timestamp) => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${timestamp +\n      600} }) {\n      number\n    }`;\n  });\n  queryString += '}';\n  return gql(queryString);\n};\n\nexport const FILTERED_TRANSACTIONS = gql`\n  query($allPairs: [Bytes]!) {\n    mints(\n      first: 20\n      where: { pair_in: $allPairs }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    burns(\n      first: 20\n      where: { pair_in: $allPairs }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(\n      first: 30\n      where: { pair_in: $allPairs }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      transaction {\n        id\n        timestamp\n      }\n      id\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n  }\n`;\n\nexport const SWAP_TRANSACTIONS = gql`\n  query($allPairs: [Bytes]!, $lastTime: Int!) {\n    swaps(\n      first: 1000\n      where: { pair_in: $allPairs, timestamp_gte: $lastTime }\n      orderBy: timestamp\n    ) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}