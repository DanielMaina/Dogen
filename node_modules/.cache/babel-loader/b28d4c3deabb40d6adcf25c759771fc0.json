{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/CurrencySearchModal/CurrencyList.tsx\",\n    _s = $RefreshSig$();\n\nimport { currencyEquals, Token, ETHER } from '@uniswap/sdk';\nimport React, { useMemo, useCallback } from 'react';\nimport { Box } from '@material-ui/core';\nimport { FixedSizeList } from 'react-window';\nimport { useSelectedTokenList } from 'state/lists/hooks';\nimport { isTokensOnList } from 'utils';\nimport CurrencyRow from './CurrencyRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CurrencyList = _ref => {\n  _s();\n\n  let {\n    currencies,\n    height,\n    selectedCurrency,\n    onCurrencySelect,\n    otherCurrency,\n    showETH,\n    fixedListRef\n  } = _ref;\n  const itemData = useMemo(() => showETH ? [Token.ETHER, ...currencies] : currencies, [currencies, showETH]);\n  const selectedTokenList = useSelectedTokenList();\n  const isOnSelectedList = isTokensOnList(selectedTokenList, itemData);\n  const Row = useCallback(_ref2 => {\n    let {\n      data,\n      index,\n      style\n    } = _ref2;\n    const currency = data[index];\n    const isSelected = Boolean(selectedCurrency && currencyEquals(selectedCurrency, currency));\n    const otherSelected = Boolean(otherCurrency && currencyEquals(otherCurrency, currency));\n\n    const handleSelect = () => onCurrencySelect(currency);\n\n    return index < itemData.length ? /*#__PURE__*/_jsxDEV(CurrencyRow, {\n      style: style,\n      currency: currency,\n      isSelected: isSelected,\n      onSelect: handleSelect,\n      otherSelected: otherSelected,\n      isOnSelectedList: isOnSelectedList[index]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n  }, [onCurrencySelect, otherCurrency, selectedCurrency, itemData, isOnSelectedList]);\n  const itemKey = useCallback((index, data) => {\n    const currency = data[index];\n    return currency instanceof Token ? currency.address : currency === ETHER ? 'ETHER' : '';\n  }, []);\n  return /*#__PURE__*/_jsxDEV(FixedSizeList, {\n    ref: fixedListRef,\n    height: height,\n    width: \"100%\",\n    itemData: itemData,\n    itemCount: itemData.length + 1,\n    itemSize: 56,\n    itemKey: itemKey,\n    children: Row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyList, \"bApTgsgbJSxo/OrNQfTLmHK0wCI=\", false, function () {\n  return [useSelectedTokenList];\n});\n\n_c = CurrencyList;\nexport default CurrencyList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyList\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/CurrencySearchModal/CurrencyList.tsx"],"names":["currencyEquals","Token","ETHER","React","useMemo","useCallback","Box","FixedSizeList","useSelectedTokenList","isTokensOnList","CurrencyRow","CurrencyList","currencies","height","selectedCurrency","onCurrencySelect","otherCurrency","showETH","fixedListRef","itemData","selectedTokenList","isOnSelectedList","Row","data","index","style","currency","isSelected","Boolean","otherSelected","handleSelect","length","itemKey","address"],"mappings":"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","sourcesContent":["import { currencyEquals, Token, Currency, ETHER } from '@uniswap/sdk';\nimport React, { useMemo, useCallback, MutableRefObject } from 'react';\nimport { Box } from '@material-ui/core';\nimport { FixedSizeList } from 'react-window';\nimport { useSelectedTokenList } from 'state/lists/hooks';\nimport { isTokensOnList } from 'utils';\nimport CurrencyRow from './CurrencyRow';\n\ninterface CurrencyListProps {\n  currencies: Token[];\n  height: number;\n  selectedCurrency?: Currency | null;\n  onCurrencySelect: (currency: Token) => void;\n  otherCurrency?: Currency | null;\n  showETH: boolean;\n  fixedListRef?: MutableRefObject<FixedSizeList | undefined>;\n}\n\nconst CurrencyList: React.FC<CurrencyListProps> = ({\n  currencies,\n  height,\n  selectedCurrency,\n  onCurrencySelect,\n  otherCurrency,\n  showETH,\n  fixedListRef,\n}) => {\n  const itemData = useMemo(\n    () => (showETH ? [Token.ETHER, ...currencies] : currencies),\n    [currencies, showETH],\n  );\n  const selectedTokenList = useSelectedTokenList();\n  const isOnSelectedList = isTokensOnList(selectedTokenList, itemData);\n\n  const Row = useCallback(\n    ({ data, index, style }) => {\n      const currency: Token = data[index];\n      const isSelected = Boolean(\n        selectedCurrency && currencyEquals(selectedCurrency, currency),\n      );\n      const otherSelected = Boolean(\n        otherCurrency && currencyEquals(otherCurrency, currency),\n      );\n      const handleSelect = () => onCurrencySelect(currency);\n      return index < itemData.length ? (\n        <CurrencyRow\n          style={style}\n          currency={currency}\n          isSelected={isSelected}\n          onSelect={handleSelect}\n          otherSelected={otherSelected}\n          isOnSelectedList={isOnSelectedList[index]}\n        />\n      ) : (\n        <Box />\n      );\n    },\n    [\n      onCurrencySelect,\n      otherCurrency,\n      selectedCurrency,\n      itemData,\n      isOnSelectedList,\n    ],\n  );\n\n  const itemKey = useCallback((index: number, data: typeof itemData) => {\n    const currency = data[index];\n    return currency instanceof Token\n      ? currency.address\n      : currency === ETHER\n      ? 'ETHER'\n      : '';\n  }, []);\n\n  return (\n    <FixedSizeList\n      ref={fixedListRef as any}\n      height={height}\n      width='100%'\n      itemData={itemData}\n      itemCount={itemData.length + 1}\n      itemSize={56}\n      itemKey={itemKey}\n    >\n      {Row}\n    </FixedSizeList>\n  );\n};\n\nexport default CurrencyList;\n"]},"metadata":{},"sourceType":"module"}