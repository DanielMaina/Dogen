{"ast":null,"code":"import { GlobalConst } from 'constants/index';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { updateVersion } from 'state/global/actions';\nimport { addSerializedPair, addSerializedToken, removeSerializedPair, removeSerializedToken, updateMatchesDarkMode, updateUserDarkMode, updateUserExpertMode, updateUserSlippageTolerance, updateUserDeadline, toggleURLWarning } from './actions';\n\nconst currentTimestamp = () => new Date().getTime();\n\nfunction pairKey(token0Address, token1Address) {\n  return `${token0Address};${token1Address}`;\n}\n\nexport const initialState = {\n  userDarkMode: null,\n  matchesDarkMode: false,\n  userExpertMode: false,\n  userSlippageTolerance: GlobalConst.utils.INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: GlobalConst.utils.DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  URLWarningVisible: true\n};\nexport default createReducer(initialState, builder => builder.addCase(updateVersion, state => {\n  // slippage isnt being tracked in local storage, reset to default\n  // noinspection SuspiciousTypeOfGuard\n  if (typeof state.userSlippageTolerance !== 'number') {\n    state.userSlippageTolerance = GlobalConst.utils.INITIAL_ALLOWED_SLIPPAGE;\n  } // deadline isnt being tracked in local storage, reset to default\n  // noinspection SuspiciousTypeOfGuard\n\n\n  if (typeof state.userDeadline !== 'number') {\n    state.userDeadline = GlobalConst.utils.DEFAULT_DEADLINE_FROM_NOW;\n  }\n\n  state.lastUpdateVersionTimestamp = currentTimestamp();\n}).addCase(updateUserDarkMode, (state, action) => {\n  state.userDarkMode = action.payload.userDarkMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateMatchesDarkMode, (state, action) => {\n  state.matchesDarkMode = action.payload.matchesDarkMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserExpertMode, (state, action) => {\n  state.userExpertMode = action.payload.userExpertMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserSlippageTolerance, (state, action) => {\n  state.userSlippageTolerance = action.payload.userSlippageTolerance;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserDeadline, (state, action) => {\n  state.userDeadline = action.payload.userDeadline;\n  state.timestamp = currentTimestamp();\n}).addCase(addSerializedToken, (state, _ref) => {\n  let {\n    payload: {\n      serializedToken\n    }\n  } = _ref;\n  state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {};\n  state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken;\n  state.timestamp = currentTimestamp();\n}).addCase(removeSerializedToken, (state, _ref2) => {\n  let {\n    payload: {\n      address,\n      chainId\n    }\n  } = _ref2;\n  state.tokens[chainId] = state.tokens[chainId] || {};\n  delete state.tokens[chainId][address];\n  state.timestamp = currentTimestamp();\n}).addCase(addSerializedPair, (state, _ref3) => {\n  let {\n    payload: {\n      serializedPair\n    }\n  } = _ref3;\n\n  if (serializedPair.token0.chainId === serializedPair.token1.chainId && serializedPair.token0.address !== serializedPair.token1.address) {\n    const chainId = serializedPair.token0.chainId;\n    state.pairs[chainId] = state.pairs[chainId] || {};\n    state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair;\n  }\n\n  state.timestamp = currentTimestamp();\n}).addCase(removeSerializedPair, (state, _ref4) => {\n  let {\n    payload: {\n      chainId,\n      tokenAAddress,\n      tokenBAddress\n    }\n  } = _ref4;\n\n  if (state.pairs[chainId]) {\n    // just delete both keys if either exists\n    delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)];\n    delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)];\n  }\n\n  state.timestamp = currentTimestamp();\n}).addCase(toggleURLWarning, state => {\n  state.URLWarningVisible = !state.URLWarningVisible;\n}));","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/user/reducer.ts"],"names":["GlobalConst","createReducer","updateVersion","addSerializedPair","addSerializedToken","removeSerializedPair","removeSerializedToken","updateMatchesDarkMode","updateUserDarkMode","updateUserExpertMode","updateUserSlippageTolerance","updateUserDeadline","toggleURLWarning","currentTimestamp","Date","getTime","pairKey","token0Address","token1Address","initialState","userDarkMode","matchesDarkMode","userExpertMode","userSlippageTolerance","utils","INITIAL_ALLOWED_SLIPPAGE","userDeadline","DEFAULT_DEADLINE_FROM_NOW","tokens","pairs","timestamp","URLWarningVisible","builder","addCase","state","lastUpdateVersionTimestamp","action","payload","serializedToken","chainId","address","serializedPair","token0","token1","tokenAAddress","tokenBAddress"],"mappings":"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","sourcesContent":["import { GlobalConst } from 'constants/index';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { updateVersion } from 'state/global/actions';\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  removeSerializedPair,\n  removeSerializedToken,\n  SerializedPair,\n  SerializedToken,\n  updateMatchesDarkMode,\n  updateUserDarkMode,\n  updateUserExpertMode,\n  updateUserSlippageTolerance,\n  updateUserDeadline,\n  toggleURLWarning,\n} from './actions';\n\nconst currentTimestamp = () => new Date().getTime();\n\nexport interface UserState {\n  // the timestamp of the last updateVersion action\n  lastUpdateVersionTimestamp?: number;\n\n  userDarkMode: boolean | null; // the user's choice for dark mode or light mode\n  matchesDarkMode: boolean; // whether the dark mode media query matches\n\n  userExpertMode: boolean;\n\n  // user defined slippage tolerance in bips, used in all txns\n  userSlippageTolerance: number;\n\n  // deadline set by user in minutes, used in all txns\n  userDeadline: number;\n\n  tokens: {\n    [chainId: number]: {\n      [address: string]: SerializedToken;\n    };\n  };\n\n  pairs: {\n    [chainId: number]: {\n      // keyed by token0Address:token1Address\n      [key: string]: SerializedPair;\n    };\n  };\n\n  timestamp: number;\n  URLWarningVisible: boolean;\n}\n\nfunction pairKey(token0Address: string, token1Address: string) {\n  return `${token0Address};${token1Address}`;\n}\n\nexport const initialState: UserState = {\n  userDarkMode: null,\n  matchesDarkMode: false,\n  userExpertMode: false,\n  userSlippageTolerance: GlobalConst.utils.INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: GlobalConst.utils.DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  URLWarningVisible: true,\n};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateVersion, (state) => {\n      // slippage isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userSlippageTolerance !== 'number') {\n        state.userSlippageTolerance =\n          GlobalConst.utils.INITIAL_ALLOWED_SLIPPAGE;\n      }\n\n      // deadline isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userDeadline !== 'number') {\n        state.userDeadline = GlobalConst.utils.DEFAULT_DEADLINE_FROM_NOW;\n      }\n\n      state.lastUpdateVersionTimestamp = currentTimestamp();\n    })\n    .addCase(updateUserDarkMode, (state, action) => {\n      state.userDarkMode = action.payload.userDarkMode;\n      state.timestamp = currentTimestamp();\n    })\n    .addCase(updateMatchesDarkMode, (state, action) => {\n      state.matchesDarkMode = action.payload.matchesDarkMode;\n      state.timestamp = currentTimestamp();\n    })\n    .addCase(updateUserExpertMode, (state, action) => {\n      state.userExpertMode = action.payload.userExpertMode;\n      state.timestamp = currentTimestamp();\n    })\n    .addCase(updateUserSlippageTolerance, (state, action) => {\n      state.userSlippageTolerance = action.payload.userSlippageTolerance;\n      state.timestamp = currentTimestamp();\n    })\n    .addCase(updateUserDeadline, (state, action) => {\n      state.userDeadline = action.payload.userDeadline;\n      state.timestamp = currentTimestamp();\n    })\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\n      state.tokens[serializedToken.chainId] =\n        state.tokens[serializedToken.chainId] || {};\n      state.tokens[serializedToken.chainId][\n        serializedToken.address\n      ] = serializedToken;\n      state.timestamp = currentTimestamp();\n    })\n    .addCase(\n      removeSerializedToken,\n      (state, { payload: { address, chainId } }) => {\n        state.tokens[chainId] = state.tokens[chainId] || {};\n        delete state.tokens[chainId][address];\n        state.timestamp = currentTimestamp();\n      },\n    )\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\n      if (\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\n        serializedPair.token0.address !== serializedPair.token1.address\n      ) {\n        const chainId = serializedPair.token0.chainId;\n        state.pairs[chainId] = state.pairs[chainId] || {};\n        state.pairs[chainId][\n          pairKey(serializedPair.token0.address, serializedPair.token1.address)\n        ] = serializedPair;\n      }\n      state.timestamp = currentTimestamp();\n    })\n    .addCase(\n      removeSerializedPair,\n      (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\n        if (state.pairs[chainId]) {\n          // just delete both keys if either exists\n          delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)];\n          delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)];\n        }\n        state.timestamp = currentTimestamp();\n      },\n    )\n    .addCase(toggleURLWarning, (state) => {\n      state.URLWarningVisible = !state.URLWarningVisible;\n    }),\n);\n"]},"metadata":{},"sourceType":"module"}