{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nconst CHAIN_ID = 2000;\nexport class WalletLinkConnector extends AbstractConnector {\n  constructor(_ref) {\n    let {\n      url,\n      appName,\n      appLogoUrl,\n      darkMode,\n      supportedChainIds\n    } = _ref;\n    super({\n      supportedChainIds: supportedChainIds\n    });\n    this.url = void 0;\n    this.appName = void 0;\n    this.appLogoUrl = void 0;\n    this.darkMode = void 0;\n    this.walletLink = void 0;\n    this.provider = void 0;\n    this.url = url;\n    this.appName = appName;\n    this.appLogoUrl = appLogoUrl;\n    this.darkMode = darkMode || false;\n    this.handleChainChanged = this.handleChainChanged.bind(this);\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\n  }\n\n  async activate() {\n    const ethereum = window.ethereum;\n\n    if (ethereum && ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum;\n    } else if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => {\n        var _m$default;\n\n        return (_m$default = m === null || m === void 0 ? void 0 : m.default) !== null && _m$default !== void 0 ? _m$default : m;\n      });\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? {\n          appLogoUrl: this.appLogoUrl\n        } : {})\n      });\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID);\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    });\n    const account = accounts[0];\n    this.provider.on('chainChanged', this.handleChainChanged);\n    this.provider.on('accountsChanged', this.handleAccountsChanged);\n    return {\n      provider: this.provider,\n      account: account\n    };\n  }\n\n  async getProvider() {\n    return this.provider;\n  }\n\n  async getChainId() {\n    return this.provider.chainId;\n  }\n\n  async getAccount() {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    });\n    return accounts[0];\n  }\n\n  deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged);\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged);\n  }\n\n  async close() {\n    this.provider.close();\n    this.emitDeactivate();\n  }\n\n  handleChainChanged(chainId) {\n    this.emitUpdate({\n      chainId: chainId\n    });\n  }\n\n  handleAccountsChanged(accounts) {\n    this.emitUpdate({\n      account: accounts[0]\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/connectors/WalletLink.ts"],"names":["AbstractConnector","CHAIN_ID","WalletLinkConnector","constructor","url","appName","appLogoUrl","darkMode","supportedChainIds","walletLink","provider","handleChainChanged","bind","handleAccountsChanged","activate","ethereum","window","isCoinbaseWallet","WalletLink","then","m","default","makeWeb3Provider","accounts","request","method","account","on","getProvider","getChainId","chainId","getAccount","deactivate","removeListener","close","emitDeactivate","emitUpdate"],"mappings":"AACA,SAASA,iBAAT,QAAkC,gCAAlC;AAEA,MAAMC,QAAQ,GAAG,IAAjB;AAUA,OAAO,MAAMC,mBAAN,SAAkCF,iBAAlC,CAAoD;AASzDG,EAAAA,WAAW,OAMsB;AAAA,QANrB;AACVC,MAAAA,GADU;AAEVC,MAAAA,OAFU;AAGVC,MAAAA,UAHU;AAIVC,MAAAA,QAJU;AAKVC,MAAAA;AALU,KAMqB;AAC/B,UAAM;AAAEA,MAAAA,iBAAiB,EAAEA;AAArB,KAAN;AAD+B,SAdhBJ,GAcgB;AAAA,SAbhBC,OAagB;AAAA,SAZhBC,UAYgB;AAAA,SAXhBC,QAWgB;AAAA,SAT1BE,UAS0B;AAAA,SARzBC,QAQyB;AAG/B,SAAKN,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAQ,IAAI,KAA5B;AAEA,SAAKI,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BD,IAA3B,CAAgC,IAAhC,CAA7B;AACD;;AAEoB,QAARE,QAAQ,GAA6B;AAChD,UAAMC,QAAQ,GAAGC,MAAM,CAACD,QAAxB;;AACA,QAAIA,QAAQ,IAAIA,QAAQ,CAACE,gBAAT,KAA8B,IAA9C,EAAoD;AAClD;AACA,WAAKP,QAAL,GAAiBM,MAAD,CAAgBD,QAAhC;AACD,KAHD,MAGO,IAAI,CAAC,KAAKN,UAAV,EAAsB;AAC3B,YAAMS,UAAU,GAAG,MAAM,OAAO,YAAP,EAAqBC,IAArB,CACtBC,CAAD;AAAA;;AAAA,6BAAOA,CAAP,aAAOA,CAAP,uBAAOA,CAAC,CAAEC,OAAV,mDAAqBD,CAArB;AAAA,OADuB,CAAzB;AAGA,WAAKX,UAAL,GAAkB,IAAIS,UAAJ,CAAe;AAC/Bb,QAAAA,OAAO,EAAE,KAAKA,OADiB;AAE/BE,QAAAA,QAAQ,EAAE,KAAKA,QAFgB;AAG/B,YAAI,KAAKD,UAAL,GAAkB;AAAEA,UAAAA,UAAU,EAAE,KAAKA;AAAnB,SAAlB,GAAoD,EAAxD;AAH+B,OAAf,CAAlB;AAKA,WAAKI,QAAL,GAAgB,KAAKD,UAAL,CAAgBa,gBAAhB,CAAiC,KAAKlB,GAAtC,EAA2CH,QAA3C,CAAhB;AACD;;AAED,UAAMsB,QAAQ,GAAG,MAAM,KAAKb,QAAL,CAAcc,OAAd,CAAsB;AAC3CC,MAAAA,MAAM,EAAE;AADmC,KAAtB,CAAvB;AAGA,UAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAD,CAAxB;AAEA,SAAKb,QAAL,CAAciB,EAAd,CAAiB,cAAjB,EAAiC,KAAKhB,kBAAtC;AACA,SAAKD,QAAL,CAAciB,EAAd,CAAiB,iBAAjB,EAAoC,KAAKd,qBAAzC;AAEA,WAAO;AAAEH,MAAAA,QAAQ,EAAE,KAAKA,QAAjB;AAA2BgB,MAAAA,OAAO,EAAEA;AAApC,KAAP;AACD;;AAEuB,QAAXE,WAAW,GAAiB;AACvC,WAAO,KAAKlB,QAAZ;AACD;;AAEsB,QAAVmB,UAAU,GAAoB;AACzC,WAAO,KAAKnB,QAAL,CAAcoB,OAArB;AACD;;AAEsB,QAAVC,UAAU,GAA2B;AAChD,UAAMR,QAAQ,GAAG,MAAM,KAAKb,QAAL,CAAcc,OAAd,CAAsB;AAC3CC,MAAAA,MAAM,EAAE;AADmC,KAAtB,CAAvB;AAGA,WAAOF,QAAQ,CAAC,CAAD,CAAf;AACD;;AAEMS,EAAAA,UAAU,GAAS;AACxB,SAAKtB,QAAL,CAAcuB,cAAd,CAA6B,cAA7B,EAA6C,KAAKtB,kBAAlD;AACA,SAAKD,QAAL,CAAcuB,cAAd,CAA6B,iBAA7B,EAAgD,KAAKpB,qBAArD;AACD;;AAEiB,QAALqB,KAAK,GAAkB;AAClC,SAAKxB,QAAL,CAAcwB,KAAd;AACA,SAAKC,cAAL;AACD;;AAEOxB,EAAAA,kBAAkB,CAACmB,OAAD,EAAiC;AACzD,SAAKM,UAAL,CAAgB;AAAEN,MAAAA,OAAO,EAAEA;AAAX,KAAhB;AACD;;AAEOjB,EAAAA,qBAAqB,CAACU,QAAD,EAA2B;AACtD,SAAKa,UAAL,CAAgB;AAAEV,MAAAA,OAAO,EAAEH,QAAQ,CAAC,CAAD;AAAnB,KAAhB;AACD;;AAtFwD","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\n\nconst CHAIN_ID = 2000;\n\ninterface WalletLinkConnectorArguments {\n  url: string;\n  appName: string;\n  appLogoUrl?: string;\n  darkMode?: boolean;\n  supportedChainIds?: number[];\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string;\n  private readonly appName: string;\n  private readonly appLogoUrl?: string;\n  private readonly darkMode: boolean;\n\n  public walletLink: any;\n  private provider: any;\n\n  constructor({\n    url,\n    appName,\n    appLogoUrl,\n    darkMode,\n    supportedChainIds,\n  }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds });\n\n    this.url = url;\n    this.appName = appName;\n    this.appLogoUrl = appLogoUrl;\n    this.darkMode = darkMode || false;\n\n    this.handleChainChanged = this.handleChainChanged.bind(this);\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    const ethereum = window.ethereum as any;\n    if (ethereum && ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = (window as any).ethereum;\n    } else if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(\n        (m) => m?.default ?? m,\n      );\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {}),\n      });\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID);\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts',\n    });\n    const account = accounts[0];\n\n    this.provider.on('chainChanged', this.handleChainChanged);\n    this.provider.on('accountsChanged', this.handleAccountsChanged);\n\n    return { provider: this.provider, account: account };\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider;\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId;\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts',\n    });\n    return accounts[0];\n  }\n\n  public deactivate(): void {\n    this.provider.removeListener('chainChanged', this.handleChainChanged);\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged);\n  }\n\n  public async close(): Promise<void> {\n    this.provider.close();\n    this.emitDeactivate();\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    this.emitUpdate({ chainId: chainId });\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    this.emitUpdate({ account: accounts[0] });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}