{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: ''\n  },\n  [Field.OUTPUT]: {\n    currencyId: ''\n  },\n  recipient: null\n};\nexport default createReducer(initialState, builder => builder.addCase(replaceSwapState, (state, _ref) => {\n  let {\n    payload: {\n      typedValue,\n      recipient,\n      field,\n      inputCurrencyId,\n      outputCurrencyId\n    }\n  } = _ref;\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    independentField: field,\n    typedValue: typedValue,\n    recipient\n  };\n}).addCase(selectCurrency, (state, _ref2) => {\n  let {\n    payload: {\n      currencyId,\n      field\n    }\n  } = _ref2;\n  const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n\n  if (currencyId === state[otherField].currencyId) {\n    // the case where we have to swap the order\n    return { ...state,\n      independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n      [field]: {\n        currencyId: currencyId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  } else {\n    // the normal case\n    return { ...state,\n      [field]: {\n        currencyId: currencyId\n      }\n    };\n  }\n}).addCase(switchCurrencies, state => {\n  return { ...state,\n    independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n    [Field.INPUT]: {\n      currencyId: state[Field.OUTPUT].currencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: state[Field.INPUT].currencyId\n    }\n  };\n}).addCase(typeInput, (state, _ref3) => {\n  let {\n    payload: {\n      field,\n      typedValue\n    }\n  } = _ref3;\n  return { ...state,\n    independentField: field,\n    typedValue\n  };\n}).addCase(setRecipient, (state, _ref4) => {\n  let {\n    payload: {\n      recipient\n    }\n  } = _ref4;\n  state.recipient = recipient;\n}));","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/swap/reducer.ts"],"names":["createReducer","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","independentField","INPUT","typedValue","currencyId","OUTPUT","recipient","builder","addCase","state","payload","field","inputCurrencyId","outputCurrencyId","otherField"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport {\n  Field,\n  replaceSwapState,\n  selectCurrency,\n  setRecipient,\n  switchCurrencies,\n  typeInput,\n} from './actions';\n\nexport interface SwapState {\n  readonly independentField: Field;\n  readonly typedValue: string;\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined;\n  };\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined;\n  };\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null;\n}\n\nconst initialState: SwapState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: '',\n  },\n  [Field.OUTPUT]: {\n    currencyId: '',\n  },\n  recipient: null,\n};\n\nexport default createReducer<SwapState>(initialState, (builder) =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (\n        state,\n        {\n          payload: {\n            typedValue,\n            recipient,\n            field,\n            inputCurrencyId,\n            outputCurrencyId,\n          },\n        },\n      ) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId,\n          },\n          independentField: field,\n          typedValue: typedValue,\n          recipient,\n        };\n      },\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField:\n            state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId: currencyId },\n          [otherField]: { currencyId: state[field].currencyId },\n        };\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId: currencyId },\n        };\n      }\n    })\n    .addCase(switchCurrencies, (state) => {\n      return {\n        ...state,\n        independentField:\n          state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\n      };\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n      };\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient;\n    }),\n);\n"]},"metadata":{},"sourceType":"module"}