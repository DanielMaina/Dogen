{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport resolveENSContentHash from 'utils/resolveENSContentHash';\nimport { useActiveWeb3React } from 'hooks';\nimport { fetchFarmList } from 'state/farms/actions';\nimport getFarmList from 'utils/getFarmList';\nexport function useFetchFarmListCallback() {\n  _s();\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch(); //TODO: support multi chain\n\n  const ensResolver = useCallback(ensName => {\n    if (!library) {\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n\n    return resolveENSContentHash(ensName, library);\n  }, [library]);\n  return useCallback(async listUrl => {\n    const requestId = nanoid();\n    dispatch(fetchFarmList.pending({\n      requestId,\n      url: listUrl\n    }));\n    return getFarmList(listUrl, ensResolver).then(farmList => {\n      dispatch(fetchFarmList.fulfilled({\n        url: listUrl,\n        farmList,\n        requestId\n      }));\n      return farmList;\n    }).catch(error => {\n      console.debug(`Failed to get list at url ${listUrl}`, error);\n      dispatch(fetchFarmList.rejected({\n        url: listUrl,\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch, ensResolver]);\n}\n\n_s(useFetchFarmListCallback, \"mZc6LfjUc8DdbP36J0O4A2tIKqg=\", false, function () {\n  return [useActiveWeb3React, useDispatch];\n});","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/hooks/useFetchFarmListCallback.ts"],"names":["nanoid","useCallback","useDispatch","resolveENSContentHash","useActiveWeb3React","fetchFarmList","getFarmList","useFetchFarmListCallback","library","dispatch","ensResolver","ensName","Error","listUrl","requestId","pending","url","then","farmList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAGA,OAAO,SAASC,wBAAT,GAEoB;AAAA;;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,kBAAkB,EAAtC;AACA,QAAMK,QAAQ,GAAGP,WAAW,EAA5B,CAFyB,CAIzB;;AACA,QAAMQ,WAAW,GAAGT,WAAW,CAC5BU,OAAD,IAAqB;AACnB,QAAI,CAACH,OAAL,EAAc;AACZ,YAAM,IAAII,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,WAAOT,qBAAqB,CAACQ,OAAD,EAAUH,OAAV,CAA5B;AACD,GAN4B,EAO7B,CAACA,OAAD,CAP6B,CAA/B;AAUA,SAAOP,WAAW,CAChB,MAAOY,OAAP,IAA2B;AACzB,UAAMC,SAAS,GAAGd,MAAM,EAAxB;AACAS,IAAAA,QAAQ,CAACJ,aAAa,CAACU,OAAd,CAAsB;AAAED,MAAAA,SAAF;AAAaE,MAAAA,GAAG,EAAEH;AAAlB,KAAtB,CAAD,CAAR;AACA,WAAOP,WAAW,CAACO,OAAD,EAAUH,WAAV,CAAX,CACJO,IADI,CACEC,QAAD,IAAc;AAClBT,MAAAA,QAAQ,CACNJ,aAAa,CAACc,SAAd,CAAwB;AAAEH,QAAAA,GAAG,EAAEH,OAAP;AAAgBK,QAAAA,QAAhB;AAA0BJ,QAAAA;AAA1B,OAAxB,CADM,CAAR;AAGA,aAAOI,QAAP;AACD,KANI,EAOJE,KAPI,CAOGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,KAAR,CAAe,6BAA4BV,OAAQ,EAAnD,EAAsDQ,KAAtD;AACAZ,MAAAA,QAAQ,CACNJ,aAAa,CAACmB,QAAd,CAAuB;AACrBR,QAAAA,GAAG,EAAEH,OADgB;AAErBC,QAAAA,SAFqB;AAGrBW,QAAAA,YAAY,EAAEJ,KAAK,CAACK;AAHC,OAAvB,CADM,CAAR;AAOA,YAAML,KAAN;AACD,KAjBI,CAAP;AAkBD,GAtBe,EAuBhB,CAACZ,QAAD,EAAWC,WAAX,CAvBgB,CAAlB;AAyBD;;GA1CeH,wB;UAGMH,kB,EACHF,W","sourcesContent":["import { nanoid } from '@reduxjs/toolkit';\nimport { ChainId } from '@uniswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors';\nimport { AppDispatch } from 'state';\nimport resolveENSContentHash from 'utils/resolveENSContentHash';\nimport { useActiveWeb3React } from 'hooks';\nimport { fetchFarmList } from 'state/farms/actions';\nimport getFarmList from 'utils/getFarmList';\nimport { FarmListInfo } from 'types';\n\nexport function useFetchFarmListCallback(): (\n  listUrl: string,\n) => Promise<FarmListInfo> {\n  const { library } = useActiveWeb3React();\n  const dispatch = useDispatch<AppDispatch>();\n\n  //TODO: support multi chain\n  const ensResolver = useCallback(\n    (ensName: string) => {\n      if (!library) {\n        throw new Error('Could not construct mainnet ENS resolver');\n      }\n      return resolveENSContentHash(ensName, library);\n    },\n    [library],\n  );\n\n  return useCallback(\n    async (listUrl: string) => {\n      const requestId = nanoid();\n      dispatch(fetchFarmList.pending({ requestId, url: listUrl }));\n      return getFarmList(listUrl, ensResolver)\n        .then((farmList) => {\n          dispatch(\n            fetchFarmList.fulfilled({ url: listUrl, farmList, requestId }),\n          );\n          return farmList;\n        })\n        .catch((error) => {\n          console.debug(`Failed to get list at url ${listUrl}`, error);\n          dispatch(\n            fetchFarmList.rejected({\n              url: listUrl,\n              requestId,\n              errorMessage: error.message,\n            }),\n          );\n          throw error;\n        });\n    },\n    [dispatch, ensResolver],\n  );\n}\n"]},"metadata":{},"sourceType":"module"}