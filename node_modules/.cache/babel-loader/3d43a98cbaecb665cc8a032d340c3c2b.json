{"ast":null,"code":"/**\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri) {\n  var _uri$match, _uri$match2;\n\n  const protocol = uri.split(':')[0].toLowerCase();\n\n  switch (protocol) {\n    case 'https':\n      return [uri];\n\n    case 'http':\n      return ['https' + uri.substr(4), uri];\n\n    case 'ipfs':\n      const hash = (_uri$match = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) === null || _uri$match === void 0 ? void 0 : _uri$match[2];\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`];\n\n    case 'ipns':\n      const name = (_uri$match2 = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) === null || _uri$match2 === void 0 ? void 0 : _uri$match2[2];\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`];\n\n    default:\n      return [];\n  }\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/utils/uriToHttp.ts"],"names":["uriToHttp","uri","protocol","split","toLowerCase","substr","hash","match","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,SAAT,CAAmBC,GAAnB,EAA0C;AAAA;;AACvD,QAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkBC,WAAlB,EAAjB;;AACA,UAAQF,QAAR;AACE,SAAK,OAAL;AACE,aAAO,CAACD,GAAD,CAAP;;AACF,SAAK,MAAL;AACE,aAAO,CAAC,UAAUA,GAAG,CAACI,MAAJ,CAAW,CAAX,CAAX,EAA0BJ,GAA1B,CAAP;;AACF,SAAK,MAAL;AACE,YAAMK,IAAI,iBAAGL,GAAG,CAACM,KAAJ,CAAU,qBAAV,CAAH,+CAAG,WAAmC,CAAnC,CAAb;AACA,aAAO,CACJ,oCAAmCD,IAAK,GADpC,EAEJ,wBAAuBA,IAAK,GAFxB,CAAP;;AAIF,SAAK,MAAL;AACE,YAAME,IAAI,kBAAGP,GAAG,CAACM,KAAJ,CAAU,qBAAV,CAAH,gDAAG,YAAmC,CAAnC,CAAb;AACA,aAAO,CACJ,oCAAmCC,IAAK,GADpC,EAEJ,wBAAuBA,IAAK,GAFxB,CAAP;;AAIF;AACE,aAAO,EAAP;AAlBJ;AAoBD","sourcesContent":["/**\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  const protocol = uri.split(':')[0].toLowerCase();\n  switch (protocol) {\n    case 'https':\n      return [uri];\n    case 'http':\n      return ['https' + uri.substr(4), uri];\n    case 'ipfs':\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2];\n      return [\n        `https://cloudflare-ipfs.com/ipfs/${hash}/`,\n        `https://ipfs.io/ipfs/${hash}/`,\n      ];\n    case 'ipns':\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2];\n      return [\n        `https://cloudflare-ipfs.com/ipns/${name}/`,\n        `https://ipfs.io/ipns/${name}/`,\n      ];\n    default:\n      return [];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}