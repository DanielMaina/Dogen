{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into an ES6-compatible Promise.\n * Promisify provides a default callback of the form (error, result) and rejects when `error` is not null. You can also\n * supply thisArg object as the second argument which will be passed to `apply`.\n */\n// HACK: This can't be properly typed without variadic kinds https://github.com/Microsoft/TypeScript/issues/5453\n\nfunction promisify(originalFn, thisArg) {\n  var _this = this;\n\n  const promisifiedFunction = function () {\n    for (var _len = arguments.length, callArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      callArgs[_key] = arguments[_key];\n    }\n\n    return __awaiter(_this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          err === null || err === undefined ? resolve(data) : reject(err);\n        };\n\n        originalFn.apply(thisArg, [...callArgs, callback]);\n      });\n    });\n  };\n\n  return promisifiedFunction;\n}\n\nexports.promisify = promisify;","map":{"version":3,"sources":["../../src/promisify.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AAIG;AACH;;AACA,SAAgB,SAAhB,CAA6B,UAA7B,EAAmE,OAAnE,EAAgF;AAAA;;AAC5E,QAAM,mBAAmB,GAAG;AAAA,sCAAU,QAAV;AAAU,MAAA,QAAV;AAAA;;AAAA,WAAyC,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACjE,aAAO,IAAI,OAAJ,CAAe,CAAC,OAAD,EAAU,MAAV,KAAoB;AACtC,cAAM,QAAQ,GAAG,CAAC,GAAD,EAAoB,IAApB,KAAgC;AAC7C,UAAA,GAAG,KAAK,IAAR,IAAgB,GAAG,KAAK,SAAxB,GAAoC,OAAO,CAAC,IAAD,CAA3C,GAAoD,MAAM,CAAC,GAAD,CAA1D;AACH,SAFD;;AAGA,QAAA,UAAU,CAAC,KAAX,CAAiB,OAAjB,EAA0B,CAAC,GAAG,QAAJ,EAAc,QAAd,CAA1B;AACH,OALM,CAAP;AAMH,KAPoE,CAAzC;AAAA,GAA5B;;AAQA,SAAO,mBAAP;AACH;;AAVD,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into an ES6-compatible Promise.\n * Promisify provides a default callback of the form (error, result) and rejects when `error` is not null. You can also\n * supply thisArg object as the second argument which will be passed to `apply`.\n */\n// HACK: This can't be properly typed without variadic kinds https://github.com/Microsoft/TypeScript/issues/5453\nfunction promisify(originalFn, thisArg) {\n    const promisifiedFunction = (...callArgs) => __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            const callback = (err, data) => {\n                err === null || err === undefined ? resolve(data) : reject(err);\n            };\n            originalFn.apply(thisArg, [...callArgs, callback]);\n        });\n    });\n    return promisifiedFunction;\n}\nexports.promisify = promisify;\n//# sourceMappingURL=promisify.js.map"]},"metadata":{},"sourceType":"script"}