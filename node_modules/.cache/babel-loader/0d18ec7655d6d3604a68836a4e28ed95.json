{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/AreaChart/AreaChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport { useIsDarkMode } from 'state/user/hooks';\nimport { formatCompact, formatDateFromTimeStamp, formatNumber } from 'utils';\nimport 'components/styles/AreaChart.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AreaChart = _ref => {\n  _s();\n\n  let {\n    backgroundColor = '#004ce6',\n    categories = [],\n    data = [],\n    dates = [],\n    yAxisValues,\n    width = 500,\n    height = 200\n  } = _ref;\n  const dark = useIsDarkMode();\n  const strokeColor = '#00dced';\n  const gradientColor = dark ? '#64fbd3' : '#D4F8FB';\n  const yMax = yAxisValues ? Math.max(...yAxisValues.map(val => Number(val))) : 0;\n  const yMin = yAxisValues ? Math.min(...yAxisValues.map(val => Number(val))) : 0;\n  const options = {\n    chart: {\n      sparkline: {\n        enabled: false\n      },\n      toolbar: {\n        show: false\n      },\n      width: '100%',\n      zoom: {\n        enabled: false\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      width: 2,\n      colors: [strokeColor],\n      curve: 'smooth'\n    },\n    markers: {\n      colors: [strokeColor],\n      strokeWidth: 0\n    },\n    fill: {\n      type: 'gradient',\n      colors: [gradientColor],\n      gradient: {\n        gradientToColors: [backgroundColor],\n        shadeIntensity: 1,\n        opacityFrom: 0.5,\n        opacityTo: 0.15,\n        stops: [0, 100]\n      }\n    },\n    xaxis: {\n      categories: categories.map(() => ''),\n      axisBorder: {\n        show: false\n      },\n      tooltip: {\n        enabled: false\n      },\n      axisTicks: {\n        show: false\n      },\n      labels: {\n        style: {\n          colors: new Array(categories.length).fill(dark ? '#646464' : '#CACED3')\n        }\n      }\n    },\n    yaxis: {\n      show: false,\n      min: yAxisValues ? yMin : undefined,\n      max: yAxisValues ? yMax : undefined,\n      tickAmount: yAxisValues === null || yAxisValues === void 0 ? void 0 : yAxisValues.length\n    },\n    grid: {\n      show: false,\n      padding: {\n        left: 0,\n        right: 0\n      },\n      xaxis: {\n        lines: {\n          show: false\n        }\n      }\n    },\n    legend: {\n      show: false\n    },\n    tooltip: {\n      enabled: true,\n      theme: dark ? 'dark' : 'light',\n      fillSeriesColor: false,\n      custom: _ref2 => {\n        let {\n          series,\n          seriesIndex,\n          dataPointIndex\n        } = _ref2;\n        return `<div class=\"areaChartTooltip\"><small>${formatDateFromTimeStamp(dates[dataPointIndex], 'MMM DD, YYYY')}</small><small><b>$${formatCompact(series[seriesIndex][dataPointIndex])}</b></small></div>`;\n      }\n    }\n  };\n  const series = [{\n    name: 'Prices',\n    data\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    mt: 2.5,\n    width: width,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"chartContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Chart, {\n        options: options,\n        series: series,\n        type: \"area\",\n        width: \"100%\",\n        height: height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"categoryValues\",\n        mt: -5,\n        children: categories.map((val, ind) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: val\n        }, ind, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), yAxisValues && /*#__PURE__*/_jsxDEV(Box, {\n      className: \"yAxis\",\n      children: yAxisValues.map((value, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"$\", // this is to show small numbers less than 0.0001\n        value > 0.0001 ? formatCompact(value) : formatNumber(value)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AreaChart, \"EKC/f3vFW+Bm85M4kQLjt7/+CAc=\", false, function () {\n  return [useIsDarkMode];\n});\n\n_c = AreaChart;\nexport default AreaChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AreaChart\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/AreaChart/AreaChart.tsx"],"names":["React","Box","Chart","useIsDarkMode","formatCompact","formatDateFromTimeStamp","formatNumber","AreaChart","backgroundColor","categories","data","dates","yAxisValues","width","height","dark","strokeColor","gradientColor","yMax","Math","max","map","val","Number","yMin","min","options","chart","sparkline","enabled","toolbar","show","zoom","dataLabels","stroke","colors","curve","markers","strokeWidth","fill","type","gradient","gradientToColors","shadeIntensity","opacityFrom","opacityTo","stops","xaxis","axisBorder","tooltip","axisTicks","labels","style","Array","length","yaxis","undefined","tickAmount","grid","padding","left","right","lines","legend","theme","fillSeriesColor","custom","series","seriesIndex","dataPointIndex","name","ind","value","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box } from '@material-ui/core';\nimport Chart from 'react-apexcharts';\nimport { useIsDarkMode } from 'state/user/hooks';\nimport { formatCompact, formatDateFromTimeStamp, formatNumber } from 'utils';\nimport 'components/styles/AreaChart.scss';\n\nexport interface AreaChartProps {\n  backgroundColor?: string;\n  data?: Array<any>;\n  dates?: Array<any>;\n  yAxisValues?: Array<number>;\n  categories?: Array<string | null>;\n  width?: number | string;\n  height?: number | string;\n}\nconst AreaChart: React.FC<AreaChartProps> = ({\n  backgroundColor = '#004ce6',\n  categories = [],\n  data = [],\n  dates = [],\n  yAxisValues,\n  width = 500,\n  height = 200,\n}) => {\n  const dark = useIsDarkMode();\n\n  const strokeColor = '#00dced';\n  const gradientColor = dark ? '#64fbd3' : '#D4F8FB';\n\n  const yMax = yAxisValues\n    ? Math.max(...yAxisValues.map((val) => Number(val)))\n    : 0;\n  const yMin = yAxisValues\n    ? Math.min(...yAxisValues.map((val) => Number(val)))\n    : 0;\n\n  const options = {\n    chart: {\n      sparkline: {\n        enabled: false,\n      },\n      toolbar: {\n        show: false,\n      },\n      width: '100%',\n      zoom: {\n        enabled: false,\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      width: 2,\n      colors: [strokeColor],\n      curve: 'smooth' as any,\n    },\n    markers: {\n      colors: [strokeColor],\n      strokeWidth: 0,\n    },\n    fill: {\n      type: 'gradient',\n      colors: [gradientColor],\n      gradient: {\n        gradientToColors: [backgroundColor],\n        shadeIntensity: 1,\n        opacityFrom: 0.5,\n        opacityTo: 0.15,\n        stops: [0, 100],\n      },\n    },\n    xaxis: {\n      categories: categories.map(() => ''),\n      axisBorder: {\n        show: false,\n      },\n      tooltip: {\n        enabled: false,\n      },\n      axisTicks: {\n        show: false,\n      },\n      labels: {\n        style: {\n          colors: new Array(categories.length).fill(\n            dark ? '#646464' : '#CACED3',\n          ),\n        },\n      },\n    },\n    yaxis: {\n      show: false,\n      min: yAxisValues ? yMin : undefined,\n      max: yAxisValues ? yMax : undefined,\n      tickAmount: yAxisValues?.length,\n    },\n    grid: {\n      show: false,\n      padding: {\n        left: 0,\n        right: 0,\n      },\n      xaxis: {\n        lines: {\n          show: false,\n        },\n      },\n    },\n    legend: {\n      show: false,\n    },\n    tooltip: {\n      enabled: true,\n      theme: dark ? 'dark' : 'light',\n      fillSeriesColor: false,\n      custom: ({ series, seriesIndex, dataPointIndex }: any) => {\n        return `<div class=\"areaChartTooltip\"><small>${formatDateFromTimeStamp(\n          dates[dataPointIndex],\n          'MMM DD, YYYY',\n        )}</small><small><b>$${formatCompact(\n          series[seriesIndex][dataPointIndex],\n        )}</b></small></div>`;\n      },\n    },\n  };\n\n  const series = [\n    {\n      name: 'Prices',\n      data,\n    },\n  ];\n\n  return (\n    <Box display='flex' mt={2.5} width={width}>\n      <Box className='chartContainer'>\n        <Chart\n          options={options}\n          series={series}\n          type='area'\n          width='100%'\n          height={height}\n        />\n        <Box className='categoryValues' mt={-5}>\n          {categories.map((val, ind) => (\n            <p key={ind}>{val}</p>\n          ))}\n        </Box>\n      </Box>\n      {yAxisValues && (\n        <Box className='yAxis'>\n          {yAxisValues.map((value, index) => (\n            <p key={index}>\n              $\n              {// this is to show small numbers less than 0.0001\n              value > 0.0001 ? formatCompact(value) : formatNumber(value)}\n            </p>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default AreaChart;\n"]},"metadata":{},"sourceType":"module"}