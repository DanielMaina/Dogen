{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/AnalyticsPairDetails/AnalyticsPairChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { Box } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport dayjs from 'dayjs';\nimport { formatCompact, getPairChartData, getFormattedPrice, getPriceClass, getChartDates, getChartStartTime, getLimitedData, getYAXISValuesAnalytics } from 'utils';\nimport { AreaChart, ChartType } from 'components';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CHART_VOLUME = 0;\nconst CHART_LIQUIDITY = 1;\nconst CHART_FEES = 2;\n\nconst AnalyticsPairChart = _ref => {\n  _s();\n\n  let {\n    pairData\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const match = useRouteMatch();\n  const pairAddress = match.params.id;\n  const [pairChartData, setPairChartData] = useState(null);\n  const [durationIndex, setDurationIndex] = useState(GlobalConst.analyticChart.ONE_MONTH_CHART);\n  const usingUtVolume = pairData && pairData.oneDayVolumeUSD === 0 && !!pairData.oneDayVolumeUntracked;\n  const fees = pairData && (pairData.oneDayVolumeUSD || pairData.oneDayVolumeUSD === 0) ? usingUtVolume ? (Number(pairData.oneDayVolumeUntracked) * GlobalConst.utils.FEEPERCENT).toLocaleString() : (Number(pairData.oneDayVolumeUSD) * GlobalConst.utils.FEEPERCENT).toLocaleString() : '-';\n  const [chartIndex, setChartIndex] = useState(CHART_VOLUME);\n  const chartIndexes = [CHART_VOLUME, CHART_LIQUIDITY, CHART_FEES];\n  const chartIndexTexts = [t('volume'), t('liquidity'), t('fees')];\n  const chartData = useMemo(() => {\n    if (!pairChartData) return;\n    return pairChartData.map(item => {\n      switch (chartIndex) {\n        case CHART_VOLUME:\n          return Number(item.dailyVolumeUSD);\n\n        case CHART_LIQUIDITY:\n          return Number(item.reserveUSD);\n\n        case CHART_FEES:\n          return Number(item.dailyVolumeUSD) * GlobalConst.utils.FEEPERCENT;\n\n        default:\n          return;\n      }\n    });\n  }, [pairChartData, chartIndex]);\n  const currentData = useMemo(() => {\n    var _pairData$reserveUSD;\n\n    if (!pairData) return;\n\n    switch (chartIndex) {\n      case CHART_VOLUME:\n        return pairData.oneDayVolumeUSD;\n\n      case CHART_LIQUIDITY:\n        return (_pairData$reserveUSD = pairData.reserveUSD) !== null && _pairData$reserveUSD !== void 0 ? _pairData$reserveUSD : pairData.trackedReserveUSD;\n\n      case CHART_FEES:\n        return fees;\n\n      default:\n        return;\n    }\n  }, [pairData, chartIndex, fees]);\n  const currentPercent = useMemo(() => {\n    if (!pairData) return;\n\n    switch (chartIndex) {\n      case CHART_VOLUME:\n        return pairData.volumeChangeUSD;\n\n      case CHART_LIQUIDITY:\n        return pairData.liquidityChangeUSD;\n\n      case CHART_FEES:\n        return usingUtVolume ? pairData.volumeChangeUntracked : pairData.volumeChangeUSD;\n\n      default:\n        return;\n    }\n  }, [pairData, chartIndex, usingUtVolume]);\n  useEffect(() => {\n    async function fetchPairChartData() {\n      setPairChartData(null);\n      const chartData = await getPairChartData(pairAddress, durationIndex === GlobalConst.analyticChart.ALL_CHART ? 0 : getChartStartTime(durationIndex));\n\n      if (chartData && chartData.length > 0) {\n        const newChartData = getLimitedData(chartData, GlobalConst.analyticChart.CHART_COUNT);\n        setPairChartData(newChartData);\n      }\n    }\n\n    fetchPairChartData();\n  }, [pairAddress, durationIndex]);\n  const currentPercentClass = getPriceClass(Number(currentPercent));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"flex flex-wrap justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        mt: 1.5,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: chartIndexTexts[chartIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1,\n          children: currentPercent && currentData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              className: \"flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"$\", currentData > 100000 ? formatCompact(currentData) : currentData.toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                className: `priceChangeWrapper ${currentPercentClass}`,\n                ml: 1,\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [getFormattedPrice(Number(currentPercent)), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: dayjs().format('MMM DD, YYYY')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            variant: \"rect\",\n            width: \"120px\",\n            height: \"30px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex flex-col items-end\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          mt: 1.5,\n          children: /*#__PURE__*/_jsxDEV(ChartType, {\n            chartTypes: chartIndexes,\n            typeTexts: chartIndexTexts,\n            chartType: chartIndex,\n            setChartType: setChartIndex\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1.5,\n          children: /*#__PURE__*/_jsxDEV(ChartType, {\n            chartTypes: GlobalData.analytics.CHART_DURATIONS,\n            typeTexts: GlobalData.analytics.CHART_DURATION_TEXTS,\n            chartType: durationIndex,\n            setChartType: setDurationIndex\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      width: 1,\n      children: chartData && pairChartData ? /*#__PURE__*/_jsxDEV(AreaChart, {\n        data: chartData,\n        yAxisValues: getYAXISValuesAnalytics(chartData),\n        dates: pairChartData.map(value => value.date),\n        width: \"100%\",\n        height: 240,\n        categories: getChartDates(pairChartData, durationIndex)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rect\",\n        width: \"100%\",\n        height: 217\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AnalyticsPairChart, \"uj6KFuInRYRktAB7ninuip2pxCc=\", false, function () {\n  return [useTranslation, useRouteMatch];\n});\n\n_c = AnalyticsPairChart;\nexport default AnalyticsPairChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnalyticsPairChart\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/AnalyticsPairDetails/AnalyticsPairChart.tsx"],"names":["React","useState","useEffect","useMemo","useRouteMatch","Box","Skeleton","dayjs","formatCompact","getPairChartData","getFormattedPrice","getPriceClass","getChartDates","getChartStartTime","getLimitedData","getYAXISValuesAnalytics","AreaChart","ChartType","GlobalConst","GlobalData","useTranslation","CHART_VOLUME","CHART_LIQUIDITY","CHART_FEES","AnalyticsPairChart","pairData","t","match","pairAddress","params","id","pairChartData","setPairChartData","durationIndex","setDurationIndex","analyticChart","ONE_MONTH_CHART","usingUtVolume","oneDayVolumeUSD","oneDayVolumeUntracked","fees","Number","utils","FEEPERCENT","toLocaleString","chartIndex","setChartIndex","chartIndexes","chartIndexTexts","chartData","map","item","dailyVolumeUSD","reserveUSD","currentData","trackedReserveUSD","currentPercent","volumeChangeUSD","liquidityChangeUSD","volumeChangeUntracked","fetchPairChartData","ALL_CHART","length","newChartData","CHART_COUNT","currentPercentClass","format","analytics","CHART_DURATIONS","CHART_DURATION_TEXTS","value","date"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { Box } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport dayjs from 'dayjs';\nimport {\n  formatCompact,\n  getPairChartData,\n  getFormattedPrice,\n  getPriceClass,\n  getChartDates,\n  getChartStartTime,\n  getLimitedData,\n  getYAXISValuesAnalytics,\n} from 'utils';\nimport { AreaChart, ChartType } from 'components';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { useTranslation } from 'react-i18next';\n\nconst CHART_VOLUME = 0;\nconst CHART_LIQUIDITY = 1;\nconst CHART_FEES = 2;\n\nconst AnalyticsPairChart: React.FC<{ pairData: any }> = ({ pairData }) => {\n  const { t } = useTranslation();\n  const match = useRouteMatch<{ id: string }>();\n  const pairAddress = match.params.id;\n  const [pairChartData, setPairChartData] = useState<any[] | null>(null);\n  const [durationIndex, setDurationIndex] = useState(\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\n  );\n\n  const usingUtVolume =\n    pairData &&\n    pairData.oneDayVolumeUSD === 0 &&\n    !!pairData.oneDayVolumeUntracked;\n  const fees =\n    pairData && (pairData.oneDayVolumeUSD || pairData.oneDayVolumeUSD === 0)\n      ? usingUtVolume\n        ? (\n            Number(pairData.oneDayVolumeUntracked) *\n            GlobalConst.utils.FEEPERCENT\n          ).toLocaleString()\n        : (\n            Number(pairData.oneDayVolumeUSD) * GlobalConst.utils.FEEPERCENT\n          ).toLocaleString()\n      : '-';\n  const [chartIndex, setChartIndex] = useState(CHART_VOLUME);\n  const chartIndexes = [CHART_VOLUME, CHART_LIQUIDITY, CHART_FEES];\n  const chartIndexTexts = [t('volume'), t('liquidity'), t('fees')];\n\n  const chartData = useMemo(() => {\n    if (!pairChartData) return;\n    return pairChartData.map((item: any) => {\n      switch (chartIndex) {\n        case CHART_VOLUME:\n          return Number(item.dailyVolumeUSD);\n        case CHART_LIQUIDITY:\n          return Number(item.reserveUSD);\n        case CHART_FEES:\n          return Number(item.dailyVolumeUSD) * GlobalConst.utils.FEEPERCENT;\n        default:\n          return;\n      }\n    });\n  }, [pairChartData, chartIndex]);\n\n  const currentData = useMemo(() => {\n    if (!pairData) return;\n    switch (chartIndex) {\n      case CHART_VOLUME:\n        return pairData.oneDayVolumeUSD;\n      case CHART_LIQUIDITY:\n        return pairData.reserveUSD ?? pairData.trackedReserveUSD;\n      case CHART_FEES:\n        return fees;\n      default:\n        return;\n    }\n  }, [pairData, chartIndex, fees]);\n\n  const currentPercent = useMemo(() => {\n    if (!pairData) return;\n    switch (chartIndex) {\n      case CHART_VOLUME:\n        return pairData.volumeChangeUSD;\n      case CHART_LIQUIDITY:\n        return pairData.liquidityChangeUSD;\n      case CHART_FEES:\n        return usingUtVolume\n          ? pairData.volumeChangeUntracked\n          : pairData.volumeChangeUSD;\n      default:\n        return;\n    }\n  }, [pairData, chartIndex, usingUtVolume]);\n\n  useEffect(() => {\n    async function fetchPairChartData() {\n      setPairChartData(null);\n      const chartData = await getPairChartData(\n        pairAddress,\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\n          ? 0\n          : getChartStartTime(durationIndex),\n      );\n      if (chartData && chartData.length > 0) {\n        const newChartData = getLimitedData(\n          chartData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        setPairChartData(newChartData);\n      }\n    }\n    fetchPairChartData();\n  }, [pairAddress, durationIndex]);\n\n  const currentPercentClass = getPriceClass(Number(currentPercent));\n\n  return (\n    <>\n      <Box className='flex flex-wrap justify-between'>\n        <Box mt={1.5}>\n          <span>{chartIndexTexts[chartIndex]}</span>\n          <Box mt={1}>\n            {currentPercent && currentData ? (\n              <>\n                <Box className='flex items-center'>\n                  <h4>\n                    $\n                    {currentData > 100000\n                      ? formatCompact(currentData)\n                      : currentData.toLocaleString()}\n                  </h4>\n                  <Box\n                    className={`priceChangeWrapper ${currentPercentClass}`}\n                    ml={1}\n                  >\n                    <small>{getFormattedPrice(Number(currentPercent))}%</small>\n                  </Box>\n                </Box>\n                <Box>\n                  <span>{dayjs().format('MMM DD, YYYY')}</span>\n                </Box>\n              </>\n            ) : (\n              <Skeleton variant='rect' width='120px' height='30px' />\n            )}\n          </Box>\n        </Box>\n        <Box className='flex flex-col items-end'>\n          <Box mt={1.5}>\n            <ChartType\n              chartTypes={chartIndexes}\n              typeTexts={chartIndexTexts}\n              chartType={chartIndex}\n              setChartType={setChartIndex}\n            />\n          </Box>\n          <Box mt={1.5}>\n            <ChartType\n              chartTypes={GlobalData.analytics.CHART_DURATIONS}\n              typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\n              chartType={durationIndex}\n              setChartType={setDurationIndex}\n            />\n          </Box>\n        </Box>\n      </Box>\n      <Box mt={2} width={1}>\n        {chartData && pairChartData ? (\n          <AreaChart\n            data={chartData}\n            yAxisValues={getYAXISValuesAnalytics(chartData)}\n            dates={pairChartData.map((value: any) => value.date)}\n            width='100%'\n            height={240}\n            categories={getChartDates(pairChartData, durationIndex)}\n          />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={217} />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsPairChart;\n"]},"metadata":{},"sourceType":"module"}