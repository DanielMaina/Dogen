{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/AddLiquidity/AddLiquidity.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport { CurrencyInput, TransactionErrorContent, TransactionConfirmationModal, ConfirmationModalContent, DoubleCurrencyLogo } from 'components';\nimport { useWalletModalToggle } from 'state/application/hooks';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport ReactGA from 'react-ga';\nimport { useTranslation } from 'react-i18next';\nimport { Token, ETHER } from '@uniswap/sdk';\nimport { GlobalConst, GlobalValue } from 'constants/index';\nimport { useActiveWeb3React } from 'hooks';\nimport { useRouterContract } from 'hooks/useContract';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback';\nimport { Field } from 'state/mint/actions';\nimport { PairState } from 'data/Reserves';\nimport { useTransactionAdder, useTransactionFinalizer } from 'state/transactions/hooks';\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks';\nimport { useTokenBalance } from 'state/wallet/hooks';\nimport { useIsExpertMode, useUserSlippageTolerance } from 'state/user/hooks';\nimport { maxAmountSpend, addMaticToMetamask, calculateSlippageAmount, calculateGasMargin, isSupportedNetwork, formatTokenAmount } from 'utils';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { ReactComponent as AddLiquidityIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/AddLiquidityIcon.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddLiquidity = _ref => {\n  _s();\n\n  var _currencies$Field$CUR, _currencies$Field$CUR2, _parsedAmounts$depend, _parsedAmounts$depend2, _currencies$Field$CUR7, _currencies$Field$CUR8, _currencies$Field$CUR9, _currencies$Field$CUR10, _currencies$Field$CUR11, _currencies$Field$CUR12, _currencies$Field$CUR13, _currencies$Field$CUR14;\n\n  let {\n    currency0,\n    currency1,\n    currencyBgClass\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [addLiquidityErrorMessage, setAddLiquidityErrorMessage] = useState(null);\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [attemptingTxn, setAttemptingTxn] = useState(false);\n  const [txPending, setTxPending] = useState(false);\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const deadline = useTransactionDeadline();\n  const [txHash, setTxHash] = useState('');\n  const addTransaction = useTransactionAdder();\n  const finalizedTransaction = useTransactionFinalizer();\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const expertMode = useIsExpertMode();\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo();\n  const liquidityTokenData = {\n    amountA: formatTokenAmount(parsedAmounts[Field.CURRENCY_A]),\n    symbolA: (_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol,\n    amountB: formatTokenAmount(parsedAmounts[Field.CURRENCY_B]),\n    symbolB: (_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol\n  };\n  const pendingText = t('supplyingTokens', liquidityTokenData);\n  const {\n    onFieldAInput,\n    onFieldBInput,\n    onCurrencySelection\n  } = useMintActionHandlers(noLiquidity);\n  const maxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    return { ...accumulator,\n      [field]: maxAmountSpend(currencyBalances[field])\n    };\n  }, {});\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toExact()) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const {\n    ethereum\n  } = window;\n  const toggleWalletModal = useWalletModalToggle();\n  const [approvingA, setApprovingA] = useState(false);\n  const [approvingB, setApprovingB] = useState(false);\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], chainId ? GlobalConst.addresses.ROUTER_ADDRESS[chainId] : undefined);\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], chainId ? GlobalConst.addresses.ROUTER_ADDRESS[chainId] : undefined);\n  const userPoolBalance = useTokenBalance(account !== null && account !== void 0 ? account : undefined, pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const atMaxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    var _maxAmounts$field, _parsedAmounts$field;\n\n    return { ...accumulator,\n      [field]: (_maxAmounts$field = maxAmounts[field]) === null || _maxAmounts$field === void 0 ? void 0 : _maxAmounts$field.equalTo((_parsedAmounts$field = parsedAmounts[field]) !== null && _parsedAmounts$field !== void 0 ? _parsedAmounts$field : '0')\n    };\n  }, {});\n  const handleCurrencyASelect = useCallback(currencyA => {\n    onCurrencySelection(Field.CURRENCY_A, currencyA);\n  }, [onCurrencySelection]);\n  const handleCurrencyBSelect = useCallback(currencyB => {\n    onCurrencySelection(Field.CURRENCY_B, currencyB);\n  }, [onCurrencySelection]);\n  useEffect(() => {\n    if (currency0) {\n      onCurrencySelection(Field.CURRENCY_A, currency0);\n    } else {\n      onCurrencySelection(Field.CURRENCY_A, Token.ETHER);\n    }\n\n    if (currency1) {\n      onCurrencySelection(Field.CURRENCY_B, currency1);\n    } else {\n      onCurrencySelection(Field.CURRENCY_B, GlobalValue.tokens.COMMON.OLD_QUICK);\n    }\n  }, [onCurrencySelection, currency0, currency1]);\n\n  const onAdd = () => {\n    if (expertMode) {\n      onAddLiquidity();\n    } else {\n      setShowConfirm(true);\n    }\n  };\n\n  const router = useRouterContract();\n\n  const onAddLiquidity = async () => {\n    if (!chainId || !library || !account || !router) return;\n    const {\n      [Field.CURRENCY_A]: parsedAmountA,\n      [Field.CURRENCY_B]: parsedAmountB\n    } = parsedAmounts;\n\n    if (!parsedAmountA || !parsedAmountB || !currencies[Field.CURRENCY_A] || !currencies[Field.CURRENCY_B] || !deadline) {\n      return;\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    };\n    let estimate, method, args, value;\n\n    if (currencies[Field.CURRENCY_A] === ETHER || currencies[Field.CURRENCY_B] === ETHER) {\n      var _wrappedCurrency$addr, _wrappedCurrency;\n\n      const tokenBIsETH = currencies[Field.CURRENCY_B] === ETHER;\n      estimate = router.estimateGas.addLiquidityETH;\n      method = router.addLiquidityETH;\n      args = [(_wrappedCurrency$addr = (_wrappedCurrency = wrappedCurrency(tokenBIsETH ? currencies[Field.CURRENCY_A] : currencies[Field.CURRENCY_B], chainId)) === null || _wrappedCurrency === void 0 ? void 0 : _wrappedCurrency.address) !== null && _wrappedCurrency$addr !== void 0 ? _wrappedCurrency$addr : '', // token\n      (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n      amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n      amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n      account, deadline.toHexString()];\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString());\n    } else {\n      var _wrappedCurrency$addr2, _wrappedCurrency2, _wrappedCurrency$addr3, _wrappedCurrency3;\n\n      estimate = router.estimateGas.addLiquidity;\n      method = router.addLiquidity;\n      args = [(_wrappedCurrency$addr2 = (_wrappedCurrency2 = wrappedCurrency(currencies[Field.CURRENCY_A], chainId)) === null || _wrappedCurrency2 === void 0 ? void 0 : _wrappedCurrency2.address) !== null && _wrappedCurrency$addr2 !== void 0 ? _wrappedCurrency$addr2 : '', (_wrappedCurrency$addr3 = (_wrappedCurrency3 = wrappedCurrency(currencies[Field.CURRENCY_B], chainId)) === null || _wrappedCurrency3 === void 0 ? void 0 : _wrappedCurrency3.address) !== null && _wrappedCurrency$addr3 !== void 0 ? _wrappedCurrency$addr3 : '', parsedAmountA.raw.toString(), parsedAmountB.raw.toString(), amountsMin[Field.CURRENCY_A].toString(), amountsMin[Field.CURRENCY_B].toString(), account, deadline.toHexString()];\n      value = null;\n    }\n\n    setAttemptingTxn(true);\n    await estimate(...args, value ? {\n      value\n    } : {}).then(estimatedGasLimit => method(...args, { ...(value ? {\n        value\n      } : {}),\n      gasLimit: calculateGasMargin(estimatedGasLimit)\n    }).then(async response => {\n      var _currencies$Field$CUR3, _currencies$Field$CUR4;\n\n      setAttemptingTxn(false);\n      setTxPending(true);\n      const summary = t('addLiquidityTokens', liquidityTokenData);\n      addTransaction(response, {\n        summary\n      });\n      setTxHash(response.hash);\n\n      try {\n        const receipt = await response.wait();\n        finalizedTransaction(receipt, {\n          summary\n        });\n        setTxPending(false);\n      } catch (error) {\n        setTxPending(false);\n        setAddLiquidityErrorMessage(t('errorInTx'));\n      }\n\n      ReactGA.event({\n        category: 'Liquidity',\n        action: 'Add',\n        label: [(_currencies$Field$CUR3 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR3 === void 0 ? void 0 : _currencies$Field$CUR3.symbol, (_currencies$Field$CUR4 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR4 === void 0 ? void 0 : _currencies$Field$CUR4.symbol].join('/')\n      });\n    })).catch(error => {\n      setAttemptingTxn(false);\n      setAddLiquidityErrorMessage(t('txRejected')); // we only care if the error is something _other_ than the user rejected the tx\n\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.error(error);\n      }\n    });\n  };\n\n  const connectWallet = () => {\n    if (ethereum && !isSupportedNetwork(ethereum)) {\n      addMaticToMetamask();\n    } else {\n      toggleWalletModal();\n    }\n  };\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onFieldAInput('');\n    }\n\n    setTxHash('');\n  }, [onFieldAInput, txHash]);\n  const buttonText = useMemo(() => {\n    if (account) {\n      return error !== null && error !== void 0 ? error : t('supply');\n    } else if (ethereum && !isSupportedNetwork(ethereum)) {\n      return t('switchPolygon');\n    }\n\n    return t('connectWallet');\n  }, [account, ethereum, error, t]);\n\n  const modalHeader = () => {\n    var _currencies$Field$CUR5, _currencies$Field$CUR6;\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        mt: 10,\n        mb: 3,\n        className: \"flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n          currency0: currencies[Field.CURRENCY_A],\n          currency1: currencies[Field.CURRENCY_B],\n          size: 48\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: 6,\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: [t('supplyingTokens', liquidityTokenData), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 13\n          }, this), t('receiveLPTokens', {\n            amount: formatTokenAmount(liquidityMinted),\n            symbolA: (_currencies$Field$CUR5 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR5 === void 0 ? void 0 : _currencies$Field$CUR5.symbol,\n            symbolB: (_currencies$Field$CUR6 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR6 === void 0 ? void 0 : _currencies$Field$CUR6.symbol\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: 3,\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-secondary\",\n          children: t('outputEstimated', {\n            slippage: allowedSlippage / 100\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"swapButtonWrapper\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          onClick: onAddLiquidity,\n          children: t('confirmSupply')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [showConfirm && /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n      isOpen: showConfirm,\n      onDismiss: handleDismissConfirmation,\n      attemptingTxn: attemptingTxn,\n      txPending: txPending,\n      hash: txHash,\n      content: () => addLiquidityErrorMessage ? /*#__PURE__*/_jsxDEV(TransactionErrorContent, {\n        onDismiss: handleDismissConfirmation,\n        message: addLiquidityErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n        title: t('supplyingliquidity'),\n        onDismiss: handleDismissConfirmation,\n        content: modalHeader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 15\n      }, this),\n      pendingText: pendingText,\n      modalContent: txPending ? t('submittedTxLiquidity') : t('successAddedliquidity')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CurrencyInput, {\n      id: \"add-liquidity-input-tokena\",\n      title: `${t('token')} 1:`,\n      currency: currencies[Field.CURRENCY_A],\n      showHalfButton: Boolean(maxAmounts[Field.CURRENCY_A]),\n      showMaxButton: !atMaxAmounts[Field.CURRENCY_A],\n      onMax: () => {\n        var _maxAmounts$Field$CUR, _maxAmounts$Field$CUR2;\n\n        return onFieldAInput((_maxAmounts$Field$CUR = (_maxAmounts$Field$CUR2 = maxAmounts[Field.CURRENCY_A]) === null || _maxAmounts$Field$CUR2 === void 0 ? void 0 : _maxAmounts$Field$CUR2.toExact()) !== null && _maxAmounts$Field$CUR !== void 0 ? _maxAmounts$Field$CUR : '');\n      },\n      onHalf: () => {\n        var _maxAmounts$Field$CUR3;\n\n        return onFieldAInput(maxAmounts[Field.CURRENCY_A] ? (Number((_maxAmounts$Field$CUR3 = maxAmounts[Field.CURRENCY_A]) === null || _maxAmounts$Field$CUR3 === void 0 ? void 0 : _maxAmounts$Field$CUR3.toExact()) / 2).toString() : '');\n      },\n      handleCurrencySelect: handleCurrencyASelect,\n      amount: formattedAmounts[Field.CURRENCY_A],\n      setAmount: onFieldAInput,\n      bgClass: currencyBgClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"exchangeSwap\",\n      children: /*#__PURE__*/_jsxDEV(AddLiquidityIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrencyInput, {\n      id: \"add-liquidity-input-tokenb\",\n      title: `${t('token')} 2:`,\n      showHalfButton: Boolean(maxAmounts[Field.CURRENCY_B]),\n      currency: currencies[Field.CURRENCY_B],\n      showMaxButton: !atMaxAmounts[Field.CURRENCY_B],\n      onHalf: () => {\n        var _maxAmounts$Field$CUR4;\n\n        return onFieldBInput(maxAmounts[Field.CURRENCY_B] ? (Number((_maxAmounts$Field$CUR4 = maxAmounts[Field.CURRENCY_B]) === null || _maxAmounts$Field$CUR4 === void 0 ? void 0 : _maxAmounts$Field$CUR4.toExact()) / 2).toString() : '');\n      },\n      onMax: () => {\n        var _maxAmounts$Field$CUR5, _maxAmounts$Field$CUR6;\n\n        return onFieldBInput((_maxAmounts$Field$CUR5 = (_maxAmounts$Field$CUR6 = maxAmounts[Field.CURRENCY_B]) === null || _maxAmounts$Field$CUR6 === void 0 ? void 0 : _maxAmounts$Field$CUR6.toExact()) !== null && _maxAmounts$Field$CUR5 !== void 0 ? _maxAmounts$Field$CUR5 : '');\n      },\n      handleCurrencySelect: handleCurrencyBSelect,\n      amount: formattedAmounts[Field.CURRENCY_B],\n      setAmount: onFieldBInput,\n      bgClass: currencyBgClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && price && /*#__PURE__*/_jsxDEV(Box, {\n      my: 2,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"swapPrice\",\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"1 \", (_currencies$Field$CUR7 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR7 === void 0 ? void 0 : _currencies$Field$CUR7.symbol, \" =\", ' ', price.toSignificant(3), \" \", (_currencies$Field$CUR8 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR8 === void 0 ? void 0 : _currencies$Field$CUR8.symbol, ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"1 \", (_currencies$Field$CUR9 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR9 === void 0 ? void 0 : _currencies$Field$CUR9.symbol, \" =\", ' ', price.invert().toSignificant(3), ' ', (_currencies$Field$CUR10 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR10 === void 0 ? void 0 : _currencies$Field$CUR10.symbol, ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"swapPrice\",\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [t('yourPoolShare'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: poolTokenPercentage ? poolTokenPercentage.toSignificant(6) + '%' : '-'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"swapPrice\",\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: [t('lpTokenReceived'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [formatTokenAmount(userPoolBalance), \" \", t('lpTokens')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"swapButtonWrapper flex-wrap\",\n      children: [(approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING || approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING) && !error && /*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex fullWidth justify-between\",\n        mb: 2,\n        children: [approvalA !== ApprovalState.APPROVED && /*#__PURE__*/_jsxDEV(Box, {\n          width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%',\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            onClick: async () => {\n              setApprovingA(true);\n\n              try {\n                await approveACallback();\n                setApprovingA(false);\n              } catch (e) {\n                setApprovingA(false);\n              }\n            },\n            disabled: approvingA || approvalA === ApprovalState.PENDING,\n            children: approvalA === ApprovalState.PENDING ? `${t('approving')} ${(_currencies$Field$CUR11 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR11 === void 0 ? void 0 : _currencies$Field$CUR11.symbol}` : `${t('approve')} ${(_currencies$Field$CUR12 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR12 === void 0 ? void 0 : _currencies$Field$CUR12.symbol}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 17\n        }, this), approvalB !== ApprovalState.APPROVED && /*#__PURE__*/_jsxDEV(Box, {\n          width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%',\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            onClick: async () => {\n              setApprovingB(true);\n\n              try {\n                await approveBCallback();\n                setApprovingB(false);\n              } catch (e) {\n                setApprovingB(false);\n              }\n            },\n            disabled: approvingB || approvalB === ApprovalState.PENDING,\n            children: approvalB === ApprovalState.PENDING ? `${t('approving')} ${(_currencies$Field$CUR13 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR13 === void 0 ? void 0 : _currencies$Field$CUR13.symbol}` : `${t('approve')} ${(_currencies$Field$CUR14 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR14 === void 0 ? void 0 : _currencies$Field$CUR14.symbol}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        disabled: Boolean(account) && (Boolean(error) || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED),\n        onClick: account ? onAdd : connectWallet,\n        children: buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddLiquidity, \"ICWsOc/fjA3YD0C/E4IRVsgQN2c=\", false, function () {\n  return [useTranslation, useActiveWeb3React, useUserSlippageTolerance, useTransactionDeadline, useTransactionAdder, useTransactionFinalizer, useMintState, useIsExpertMode, useDerivedMintInfo, useMintActionHandlers, useWalletModalToggle, useApproveCallback, useApproveCallback, useTokenBalance, useRouterContract];\n});\n\n_c = AddLiquidity;\nexport default AddLiquidity;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLiquidity\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/AddLiquidity/AddLiquidity.tsx"],"names":["React","useCallback","useEffect","useState","useMemo","Box","Button","CurrencyInput","TransactionErrorContent","TransactionConfirmationModal","ConfirmationModalContent","DoubleCurrencyLogo","useWalletModalToggle","BigNumber","ReactGA","useTranslation","Token","ETHER","GlobalConst","GlobalValue","useActiveWeb3React","useRouterContract","useTransactionDeadline","ApprovalState","useApproveCallback","Field","PairState","useTransactionAdder","useTransactionFinalizer","useDerivedMintInfo","useMintActionHandlers","useMintState","useTokenBalance","useIsExpertMode","useUserSlippageTolerance","maxAmountSpend","addMaticToMetamask","calculateSlippageAmount","calculateGasMargin","isSupportedNetwork","formatTokenAmount","wrappedCurrency","AddLiquidity","currency0","currency1","currencyBgClass","t","addLiquidityErrorMessage","setAddLiquidityErrorMessage","account","chainId","library","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","txPending","setTxPending","allowedSlippage","deadline","txHash","setTxHash","addTransaction","finalizedTransaction","independentField","typedValue","otherTypedValue","expertMode","dependentField","currencies","pair","pairState","currencyBalances","parsedAmounts","price","noLiquidity","liquidityMinted","poolTokenPercentage","error","liquidityTokenData","amountA","CURRENCY_A","symbolA","symbol","amountB","CURRENCY_B","symbolB","pendingText","onFieldAInput","onFieldBInput","onCurrencySelection","maxAmounts","reduce","accumulator","field","formattedAmounts","toExact","ethereum","window","toggleWalletModal","approvingA","setApprovingA","approvingB","setApprovingB","approvalA","approveACallback","addresses","ROUTER_ADDRESS","undefined","approvalB","approveBCallback","userPoolBalance","liquidityToken","atMaxAmounts","equalTo","handleCurrencyASelect","currencyA","handleCurrencyBSelect","currencyB","tokens","COMMON","OLD_QUICK","onAdd","onAddLiquidity","router","parsedAmountA","parsedAmountB","amountsMin","estimate","method","args","value","tokenBIsETH","estimateGas","addLiquidityETH","address","raw","toString","toHexString","from","addLiquidity","then","estimatedGasLimit","gasLimit","response","summary","hash","receipt","wait","event","category","action","label","join","catch","code","console","connectWallet","handleDismissConfirmation","buttonText","modalHeader","amount","slippage","Boolean","Number","INVALID","toSignificant","invert","NOT_APPROVED","PENDING","APPROVED","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,EAAkDC,OAAlD,QAAiE,OAAjE;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,mBAA5B;AACA,SACEC,aADF,EAEEC,uBAFF,EAGEC,4BAHF,EAIEC,wBAJF,EAKEC,kBALF,QAMO,YANP;AAOA,SAASC,oBAAT,QAAqC,yBAArC;AAEA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAAmBC,KAAnB,EAA0BC,KAA1B,QAAoD,cAApD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,iBAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,sBAAP,MAAmC,8BAAnC;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,0BAAlD;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SACEC,mBADF,EAEEC,uBAFF,QAGO,0BAHP;AAIA,SACEC,kBADF,EAEEC,qBAFF,EAGEC,YAHF,QAIO,kBAJP;AAKA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,eAAT,EAA0BC,wBAA1B,QAA0D,kBAA1D;AACA,SACEC,cADF,EAEEC,kBAFF,EAGEC,uBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,iBANF,QAOO,OAPP;AAQA,SAASC,eAAT,QAAgC,uBAAhC;;;;AAGA,MAAMC,YAIJ,GAAG,QAA+C;AAAA;;AAAA;;AAAA,MAA9C;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,GAA8C;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAAQ/B,cAAc,EAA5B;AACA,QAAM,CAACgC,wBAAD,EAA2BC,2BAA3B,IAA0D7C,QAAQ,CAEtE,IAFsE,CAAxE;AAIA,QAAM;AAAE8C,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgC/B,kBAAkB,EAAxD;AAEA,QAAM,CAACgC,WAAD,EAAcC,cAAd,IAAgClD,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACmD,aAAD,EAAgBC,gBAAhB,IAAoCpD,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACqD,SAAD,EAAYC,YAAZ,IAA4BtD,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACuD,eAAD,IAAoBxB,wBAAwB,EAAlD;AACA,QAAMyB,QAAQ,GAAGrC,sBAAsB,EAAvC;AACA,QAAM,CAACsC,MAAD,EAASC,SAAT,IAAsB1D,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM2D,cAAc,GAAGnC,mBAAmB,EAA1C;AACA,QAAMoC,oBAAoB,GAAGnC,uBAAuB,EAApD;AAEA,QAAM;AAAEoC,IAAAA,gBAAF;AAAoBC,IAAAA,UAApB;AAAgCC,IAAAA;AAAhC,MAAoDnC,YAAY,EAAtE;AACA,QAAMoC,UAAU,GAAGlC,eAAe,EAAlC;AACA,QAAM;AACJmC,IAAAA,cADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA,aANI;AAOJC,IAAAA,KAPI;AAQJC,IAAAA,WARI;AASJC,IAAAA,eATI;AAUJC,IAAAA,mBAVI;AAWJC,IAAAA;AAXI,MAYFjD,kBAAkB,EAZtB;AAcA,QAAMkD,kBAAkB,GAAG;AACzBC,IAAAA,OAAO,EAAExC,iBAAiB,CAACiC,aAAa,CAAChD,KAAK,CAACwD,UAAP,CAAd,CADD;AAEzBC,IAAAA,OAAO,2BAAEb,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CAAZ,0DAAE,sBAA8BE,MAFd;AAGzBC,IAAAA,OAAO,EAAE5C,iBAAiB,CAACiC,aAAa,CAAChD,KAAK,CAAC4D,UAAP,CAAd,CAHD;AAIzBC,IAAAA,OAAO,4BAAEjB,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAAZ,2DAAE,uBAA8BF;AAJd,GAA3B;AAOA,QAAMI,WAAW,GAAGzC,CAAC,CAAC,iBAAD,EAAoBiC,kBAApB,CAArB;AAEA,QAAM;AACJS,IAAAA,aADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA;AAHI,MAIF5D,qBAAqB,CAAC6C,WAAD,CAJzB;AAMA,QAAMgB,UAA8C,GAAG,CACrDlE,KAAK,CAACwD,UAD+C,EAErDxD,KAAK,CAAC4D,UAF+C,EAGrDO,MAHqD,CAG9C,CAACC,WAAD,EAAcC,KAAd,KAAwB;AAC/B,WAAO,EACL,GAAGD,WADE;AAEL,OAACC,KAAD,GAAS3D,cAAc,CAACqC,gBAAgB,CAACsB,KAAD,CAAjB;AAFlB,KAAP;AAID,GARsD,EAQpD,EARoD,CAAvD;AAUA,QAAMC,gBAAgB,GAAG;AACvB,KAAC/B,gBAAD,GAAoBC,UADG;AAEvB,KAACG,cAAD,GAAkBO,WAAW,GACzBT,eADyB,sDAEzBO,aAAa,CAACL,cAAD,CAFY,2DAEzB,uBAA+B4B,OAA/B,EAFyB,yEAEmB;AAJzB,GAAzB;AAOA,QAAM;AAAEC,IAAAA;AAAF,MAAeC,MAArB;AACA,QAAMC,iBAAiB,GAAGvF,oBAAoB,EAA9C;AACA,QAAM,CAACwF,UAAD,EAAaC,aAAb,IAA8BlG,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACmG,UAAD,EAAaC,aAAb,IAA8BpG,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACqG,SAAD,EAAYC,gBAAZ,IAAgCjF,kBAAkB,CACtDiD,aAAa,CAAChD,KAAK,CAACwD,UAAP,CADyC,EAEtD/B,OAAO,GAAGhC,WAAW,CAACwF,SAAZ,CAAsBC,cAAtB,CAAqCzD,OAArC,CAAH,GAAmD0D,SAFJ,CAAxD;AAIA,QAAM,CAACC,SAAD,EAAYC,gBAAZ,IAAgCtF,kBAAkB,CACtDiD,aAAa,CAAChD,KAAK,CAAC4D,UAAP,CADyC,EAEtDnC,OAAO,GAAGhC,WAAW,CAACwF,SAAZ,CAAsBC,cAAtB,CAAqCzD,OAArC,CAAH,GAAmD0D,SAFJ,CAAxD;AAKA,QAAMG,eAAe,GAAG/E,eAAe,CACrCiB,OADqC,aACrCA,OADqC,cACrCA,OADqC,GAC1B2D,SAD0B,EAErCtC,IAFqC,aAErCA,IAFqC,uBAErCA,IAAI,CAAE0C,cAF+B,CAAvC;AAKA,QAAMC,YAAgD,GAAG,CACvDxF,KAAK,CAACwD,UADiD,EAEvDxD,KAAK,CAAC4D,UAFiD,EAGvDO,MAHuD,CAGhD,CAACC,WAAD,EAAcC,KAAd,KAAwB;AAAA;;AAC/B,WAAO,EACL,GAAGD,WADE;AAEL,OAACC,KAAD,wBAASH,UAAU,CAACG,KAAD,CAAnB,sDAAS,kBAAmBoB,OAAnB,yBAA2BzC,aAAa,CAACqB,KAAD,CAAxC,uEAAmD,GAAnD;AAFJ,KAAP;AAID,GARwD,EAQtD,EARsD,CAAzD;AAUA,QAAMqB,qBAAqB,GAAGlH,WAAW,CACtCmH,SAAD,IAAyB;AACvB1B,IAAAA,mBAAmB,CAACjE,KAAK,CAACwD,UAAP,EAAmBmC,SAAnB,CAAnB;AACD,GAHsC,EAIvC,CAAC1B,mBAAD,CAJuC,CAAzC;AAOA,QAAM2B,qBAAqB,GAAGpH,WAAW,CACtCqH,SAAD,IAAyB;AACvB5B,IAAAA,mBAAmB,CAACjE,KAAK,CAAC4D,UAAP,EAAmBiC,SAAnB,CAAnB;AACD,GAHsC,EAIvC,CAAC5B,mBAAD,CAJuC,CAAzC;AAOAxF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyC,SAAJ,EAAe;AACb+C,MAAAA,mBAAmB,CAACjE,KAAK,CAACwD,UAAP,EAAmBtC,SAAnB,CAAnB;AACD,KAFD,MAEO;AACL+C,MAAAA,mBAAmB,CAACjE,KAAK,CAACwD,UAAP,EAAmBjE,KAAK,CAACC,KAAzB,CAAnB;AACD;;AACD,QAAI2B,SAAJ,EAAe;AACb8C,MAAAA,mBAAmB,CAACjE,KAAK,CAAC4D,UAAP,EAAmBzC,SAAnB,CAAnB;AACD,KAFD,MAEO;AACL8C,MAAAA,mBAAmB,CACjBjE,KAAK,CAAC4D,UADW,EAEjBlE,WAAW,CAACoG,MAAZ,CAAmBC,MAAnB,CAA0BC,SAFT,CAAnB;AAID;AACF,GAdQ,EAcN,CAAC/B,mBAAD,EAAsB/C,SAAtB,EAAiCC,SAAjC,CAdM,CAAT;;AAgBA,QAAM8E,KAAK,GAAG,MAAM;AAClB,QAAIvD,UAAJ,EAAgB;AACdwD,MAAAA,cAAc;AACf,KAFD,MAEO;AACLtE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAND;;AAQA,QAAMuE,MAAM,GAAGvG,iBAAiB,EAAhC;;AAEA,QAAMsG,cAAc,GAAG,YAAY;AACjC,QAAI,CAACzE,OAAD,IAAY,CAACC,OAAb,IAAwB,CAACF,OAAzB,IAAoC,CAAC2E,MAAzC,EAAiD;AAEjD,UAAM;AACJ,OAACnG,KAAK,CAACwD,UAAP,GAAoB4C,aADhB;AAEJ,OAACpG,KAAK,CAAC4D,UAAP,GAAoByC;AAFhB,QAGFrD,aAHJ;;AAIA,QACE,CAACoD,aAAD,IACA,CAACC,aADD,IAEA,CAACzD,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CAFX,IAGA,CAACZ,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAHX,IAIA,CAAC1B,QALH,EAME;AACA;AACD;;AAED,UAAMoE,UAAU,GAAG;AACjB,OAACtG,KAAK,CAACwD,UAAP,GAAoB5C,uBAAuB,CACzCwF,aADyC,EAEzClD,WAAW,GAAG,CAAH,GAAOjB,eAFuB,CAAvB,CAGlB,CAHkB,CADH;AAKjB,OAACjC,KAAK,CAAC4D,UAAP,GAAoBhD,uBAAuB,CACzCyF,aADyC,EAEzCnD,WAAW,GAAG,CAAH,GAAOjB,eAFuB,CAAvB,CAGlB,CAHkB;AALH,KAAnB;AAWA,QAAIsE,QAAJ,EACEC,MADF,EAEEC,IAFF,EAGEC,KAHF;;AAIA,QACE9D,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CAAV,KAAiChE,KAAjC,IACAoD,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAAV,KAAiCpE,KAFnC,EAGE;AAAA;;AACA,YAAMmH,WAAW,GAAG/D,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAAV,KAAiCpE,KAArD;AACA+G,MAAAA,QAAQ,GAAGJ,MAAM,CAACS,WAAP,CAAmBC,eAA9B;AACAL,MAAAA,MAAM,GAAGL,MAAM,CAACU,eAAhB;AACAJ,MAAAA,IAAI,GAAG,8CACLzF,eAAe,CACb2F,WAAW,GACP/D,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CADH,GAEPZ,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAHD,EAIbnC,OAJa,CADV,qDACL,iBAKGqF,OANE,yEAMS,EANT,EAMa;AAClB,OAACH,WAAW,GAAGP,aAAH,GAAmBC,aAA/B,EAA8CU,GAA9C,CAAkDC,QAAlD,EAPK,EAOyD;AAC9DV,MAAAA,UAAU,CACRK,WAAW,GAAG3G,KAAK,CAACwD,UAAT,GAAsBxD,KAAK,CAAC4D,UAD/B,CAAV,CAEEoD,QAFF,EARK,EAUS;AACdV,MAAAA,UAAU,CACRK,WAAW,GAAG3G,KAAK,CAAC4D,UAAT,GAAsB5D,KAAK,CAACwD,UAD/B,CAAV,CAEEwD,QAFF,EAXK,EAaS;AACdxF,MAAAA,OAdK,EAeLU,QAAQ,CAAC+E,WAAT,EAfK,CAAP;AAiBAP,MAAAA,KAAK,GAAGtH,SAAS,CAAC8H,IAAV,CACN,CAACP,WAAW,GAAGN,aAAH,GAAmBD,aAA/B,EAA8CW,GAA9C,CAAkDC,QAAlD,EADM,CAAR;AAGD,KA3BD,MA2BO;AAAA;;AACLT,MAAAA,QAAQ,GAAGJ,MAAM,CAACS,WAAP,CAAmBO,YAA9B;AACAX,MAAAA,MAAM,GAAGL,MAAM,CAACgB,YAAhB;AACAV,MAAAA,IAAI,GAAG,gDACLzF,eAAe,CAAC4B,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CAAX,EAA+B/B,OAA/B,CADV,sDACL,kBAAwDqF,OADnD,2EAC8D,EAD9D,iDAEL9F,eAAe,CAAC4B,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAAX,EAA+BnC,OAA/B,CAFV,sDAEL,kBAAwDqF,OAFnD,2EAE8D,EAF9D,EAGLV,aAAa,CAACW,GAAd,CAAkBC,QAAlB,EAHK,EAILX,aAAa,CAACU,GAAd,CAAkBC,QAAlB,EAJK,EAKLV,UAAU,CAACtG,KAAK,CAACwD,UAAP,CAAV,CAA6BwD,QAA7B,EALK,EAMLV,UAAU,CAACtG,KAAK,CAAC4D,UAAP,CAAV,CAA6BoD,QAA7B,EANK,EAOLxF,OAPK,EAQLU,QAAQ,CAAC+E,WAAT,EARK,CAAP;AAUAP,MAAAA,KAAK,GAAG,IAAR;AACD;;AAED5E,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,UAAMyE,QAAQ,CAAC,GAAGE,IAAJ,EAAUC,KAAK,GAAG;AAAEA,MAAAA;AAAF,KAAH,GAAe,EAA9B,CAAR,CACHU,IADG,CACGC,iBAAD,IACJb,MAAM,CAAC,GAAGC,IAAJ,EAAU,EACd,IAAIC,KAAK,GAAG;AAAEA,QAAAA;AAAF,OAAH,GAAe,EAAxB,CADc;AAEdY,MAAAA,QAAQ,EAAEzG,kBAAkB,CAACwG,iBAAD;AAFd,KAAV,CAAN,CAGGD,IAHH,CAGQ,MAAOG,QAAP,IAAoB;AAAA;;AAC1BzF,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAE,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMwF,OAAO,GAAGnG,CAAC,CAAC,oBAAD,EAAuBiC,kBAAvB,CAAjB;AAEAjB,MAAAA,cAAc,CAACkF,QAAD,EAAW;AACvBC,QAAAA;AADuB,OAAX,CAAd;AAIApF,MAAAA,SAAS,CAACmF,QAAQ,CAACE,IAAV,CAAT;;AAEA,UAAI;AACF,cAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AACArF,QAAAA,oBAAoB,CAACoF,OAAD,EAAU;AAC5BF,UAAAA;AAD4B,SAAV,CAApB;AAGAxF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAND,CAME,OAAOqB,KAAP,EAAc;AACdrB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAT,QAAAA,2BAA2B,CAACF,CAAC,CAAC,WAAD,CAAF,CAA3B;AACD;;AAEDhC,MAAAA,OAAO,CAACuI,KAAR,CAAc;AACZC,QAAAA,QAAQ,EAAE,WADE;AAEZC,QAAAA,MAAM,EAAE,KAFI;AAGZC,QAAAA,KAAK,EAAE,2BACLnF,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CADL,2DACL,uBAA8BE,MADzB,4BAELd,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAFL,2DAEL,uBAA8BF,MAFzB,EAGLsE,IAHK,CAGA,GAHA;AAHK,OAAd;AAQD,KAjCD,CAFE,EAqCHC,KArCG,CAqCI5E,KAAD,IAAW;AAChBvB,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAP,MAAAA,2BAA2B,CAACF,CAAC,CAAC,YAAD,CAAF,CAA3B,CAFgB,CAGhB;;AACA,UAAI,CAAAgC,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAE6E,IAAP,MAAgB,IAApB,EAA0B;AACxBC,QAAAA,OAAO,CAAC9E,KAAR,CAAcA,KAAd;AACD;AACF,KA5CG,CAAN;AA6CD,GAzHD;;AA2HA,QAAM+E,aAAa,GAAG,MAAM;AAC1B,QAAI5D,QAAQ,IAAI,CAAC1D,kBAAkB,CAAC0D,QAAD,CAAnC,EAA+C;AAC7C7D,MAAAA,kBAAkB;AACnB,KAFD,MAEO;AACL+D,MAAAA,iBAAiB;AAClB;AACF,GAND;;AAQA,QAAM2D,yBAAyB,GAAG7J,WAAW,CAAC,MAAM;AAClDoD,IAAAA,cAAc,CAAC,KAAD,CAAd,CADkD,CAElD;;AACA,QAAIO,MAAJ,EAAY;AACV4B,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD;;AACD3B,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAP4C,EAO1C,CAAC2B,aAAD,EAAgB5B,MAAhB,CAP0C,CAA7C;AASA,QAAMmG,UAAU,GAAG3J,OAAO,CAAC,MAAM;AAC/B,QAAI6C,OAAJ,EAAa;AACX,aAAO6B,KAAP,aAAOA,KAAP,cAAOA,KAAP,GAAgBhC,CAAC,CAAC,QAAD,CAAjB;AACD,KAFD,MAEO,IAAImD,QAAQ,IAAI,CAAC1D,kBAAkB,CAAC0D,QAAD,CAAnC,EAA+C;AACpD,aAAOnD,CAAC,CAAC,eAAD,CAAR;AACD;;AACD,WAAOA,CAAC,CAAC,eAAD,CAAR;AACD,GAPyB,EAOvB,CAACG,OAAD,EAAUgD,QAAV,EAAoBnB,KAApB,EAA2BhC,CAA3B,CAPuB,CAA1B;;AASA,QAAMkH,WAAW,GAAG,MAAM;AAAA;;AACxB,wBACE,QAAC,GAAD;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,EAAE,EAAE,CAAjB;AAAoB,QAAA,SAAS,EAAC,qBAA9B;AAAA,+BACE,QAAC,kBAAD;AACE,UAAA,SAAS,EAAE3F,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CADvB;AAEE,UAAA,SAAS,EAAEZ,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAFvB;AAGE,UAAA,IAAI,EAAE;AAHR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,SAAS,EAAC,QAAtB;AAAA,+BACE;AAAA,qBACGvC,CAAC,CAAC,iBAAD,EAAoBiC,kBAApB,CADJ,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGGjC,CAAC,CAAC,iBAAD,EAAoB;AACpBmH,YAAAA,MAAM,EAAEzH,iBAAiB,CAACoC,eAAD,CADL;AAEpBM,YAAAA,OAAO,4BAAEb,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CAAZ,2DAAE,uBAA8BE,MAFnB;AAGpBG,YAAAA,OAAO,4BAAEjB,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAAZ,2DAAE,uBAA8BF;AAHnB,WAApB,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF,eAmBE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,SAAS,EAAC,QAAtB;AAAA,+BACE;AAAO,UAAA,SAAS,EAAC,gBAAjB;AAAA,oBACGrC,CAAC,CAAC,iBAAD,EAAoB;AAAEoH,YAAAA,QAAQ,EAAExG,eAAe,GAAG;AAA9B,WAApB;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAnBF,eAwBE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,SAAS,MAAjB;AAAkB,UAAA,OAAO,EAAEiE,cAA3B;AAAA,oBACG7E,CAAC,CAAC,eAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgCD,GAjCD;;AAmCA,sBACE,QAAC,GAAD;AAAA,eACGM,WAAW,iBACV,QAAC,4BAAD;AACE,MAAA,MAAM,EAAEA,WADV;AAEE,MAAA,SAAS,EAAE0G,yBAFb;AAGE,MAAA,aAAa,EAAExG,aAHjB;AAIE,MAAA,SAAS,EAAEE,SAJb;AAKE,MAAA,IAAI,EAAEI,MALR;AAME,MAAA,OAAO,EAAE,MACPb,wBAAwB,gBACtB,QAAC,uBAAD;AACE,QAAA,SAAS,EAAE+G,yBADb;AAEE,QAAA,OAAO,EAAE/G;AAFX;AAAA;AAAA;AAAA;AAAA,cADsB,gBAMtB,QAAC,wBAAD;AACE,QAAA,KAAK,EAAED,CAAC,CAAC,oBAAD,CADV;AAEE,QAAA,SAAS,EAAEgH,yBAFb;AAGE,QAAA,OAAO,EAAEE;AAHX;AAAA;AAAA;AAAA;AAAA,cAbN;AAoBE,MAAA,WAAW,EAAEzE,WApBf;AAqBE,MAAA,YAAY,EACV/B,SAAS,GAAGV,CAAC,CAAC,sBAAD,CAAJ,GAA+BA,CAAC,CAAC,uBAAD;AAtB7C;AAAA;AAAA;AAAA;AAAA,YAFJ,eA4BE,QAAC,aAAD;AACE,MAAA,EAAE,EAAC,4BADL;AAEE,MAAA,KAAK,EAAG,GAAEA,CAAC,CAAC,OAAD,CAAU,KAFvB;AAGE,MAAA,QAAQ,EAAEuB,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CAHtB;AAIE,MAAA,cAAc,EAAEkF,OAAO,CAACxE,UAAU,CAAClE,KAAK,CAACwD,UAAP,CAAX,CAJzB;AAKE,MAAA,aAAa,EAAE,CAACgC,YAAY,CAACxF,KAAK,CAACwD,UAAP,CAL9B;AAME,MAAA,KAAK,EAAE;AAAA;;AAAA,eACLO,aAAa,oDAACG,UAAU,CAAClE,KAAK,CAACwD,UAAP,CAAX,2DAAC,uBAA8Be,OAA9B,EAAD,yEAA4C,EAA5C,CADR;AAAA,OANT;AASE,MAAA,MAAM,EAAE;AAAA;;AAAA,eACNR,aAAa,CACXG,UAAU,CAAClE,KAAK,CAACwD,UAAP,CAAV,GACI,CAACmF,MAAM,2BAACzE,UAAU,CAAClE,KAAK,CAACwD,UAAP,CAAX,2DAAC,uBAA8Be,OAA9B,EAAD,CAAN,GAAkD,CAAnD,EAAsDyC,QAAtD,EADJ,GAEI,EAHO,CADP;AAAA,OATV;AAgBE,MAAA,oBAAoB,EAAEtB,qBAhBxB;AAiBE,MAAA,MAAM,EAAEpB,gBAAgB,CAACtE,KAAK,CAACwD,UAAP,CAjB1B;AAkBE,MAAA,SAAS,EAAEO,aAlBb;AAmBE,MAAA,OAAO,EAAE3C;AAnBX;AAAA;AAAA;AAAA;AAAA,YA5BF,eAiDE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjDF,eAoDE,QAAC,aAAD;AACE,MAAA,EAAE,EAAC,4BADL;AAEE,MAAA,KAAK,EAAG,GAAEC,CAAC,CAAC,OAAD,CAAU,KAFvB;AAGE,MAAA,cAAc,EAAEqH,OAAO,CAACxE,UAAU,CAAClE,KAAK,CAAC4D,UAAP,CAAX,CAHzB;AAIE,MAAA,QAAQ,EAAEhB,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAJtB;AAKE,MAAA,aAAa,EAAE,CAAC4B,YAAY,CAACxF,KAAK,CAAC4D,UAAP,CAL9B;AAME,MAAA,MAAM,EAAE;AAAA;;AAAA,eACNI,aAAa,CACXE,UAAU,CAAClE,KAAK,CAAC4D,UAAP,CAAV,GACI,CAAC+E,MAAM,2BAACzE,UAAU,CAAClE,KAAK,CAAC4D,UAAP,CAAX,2DAAC,uBAA8BW,OAA9B,EAAD,CAAN,GAAkD,CAAnD,EAAsDyC,QAAtD,EADJ,GAEI,EAHO,CADP;AAAA,OANV;AAaE,MAAA,KAAK,EAAE;AAAA;;AAAA,eACLhD,aAAa,qDAACE,UAAU,CAAClE,KAAK,CAAC4D,UAAP,CAAX,2DAAC,uBAA8BW,OAA9B,EAAD,2EAA4C,EAA5C,CADR;AAAA,OAbT;AAgBE,MAAA,oBAAoB,EAAEqB,qBAhBxB;AAiBE,MAAA,MAAM,EAAEtB,gBAAgB,CAACtE,KAAK,CAAC4D,UAAP,CAjB1B;AAkBE,MAAA,SAAS,EAAEI,aAlBb;AAmBE,MAAA,OAAO,EAAE5C;AAnBX;AAAA;AAAA;AAAA;AAAA,YApDF,EAyEGwB,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CAAV,IACCZ,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CADX,IAECd,SAAS,KAAK7C,SAAS,CAAC2I,OAFzB,IAGC3F,KAHD,iBAIG,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA,qDACKL,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CADf,2DACK,uBAA8BE,MADnC,QAC6C,GAD7C,EAEGT,KAAK,CAAC4F,aAAN,CAAoB,CAApB,CAFH,iCAE4BjG,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CAFtC,2DAE4B,uBAA8BF,MAF1D,EAEkE,GAFlE;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAA,qDACKd,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CADf,2DACK,uBAA8BF,MADnC,QAC6C,GAD7C,EAEGT,KAAK,CAAC6F,MAAN,GAAeD,aAAf,CAA6B,CAA7B,CAFH,EAEoC,GAFpC,6BAGGjG,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CAHb,4DAGG,wBAA8BE,MAHjC,EAGyC,GAHzC;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAYE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA,qBAAQrC,CAAC,CAAC,eAAD,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBACG+B,mBAAmB,GAChBA,mBAAmB,CAACyF,aAApB,CAAkC,CAAlC,IAAuC,GADvB,GAEhB;AAHN;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,eAoBE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA,qBAAQxH,CAAC,CAAC,iBAAD,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,qBACGN,iBAAiB,CAACuE,eAAD,CADpB,OACwCjE,CAAC,CAAC,UAAD,CADzC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA,YA7EN,eAyGE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA,iBACG,CAAC0D,SAAS,KAAKjF,aAAa,CAACiJ,YAA5B,IACAhE,SAAS,KAAKjF,aAAa,CAACkJ,OAD5B,IAEA5D,SAAS,KAAKtF,aAAa,CAACiJ,YAF5B,IAGA3D,SAAS,KAAKtF,aAAa,CAACkJ,OAH7B,KAIC,CAAC3F,KAJF,iBAKG,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAgD,QAAA,EAAE,EAAE,CAApD;AAAA,mBACG0B,SAAS,KAAKjF,aAAa,CAACmJ,QAA5B,iBACC,QAAC,GAAD;AACE,UAAA,KAAK,EAAE7D,SAAS,KAAKtF,aAAa,CAACmJ,QAA5B,GAAuC,KAAvC,GAA+C,MADxD;AAAA,iCAGE,QAAC,MAAD;AACE,YAAA,SAAS,MADX;AAEE,YAAA,OAAO,EAAE,YAAY;AACnBrE,cAAAA,aAAa,CAAC,IAAD,CAAb;;AACA,kBAAI;AACF,sBAAMI,gBAAgB,EAAtB;AACAJ,gBAAAA,aAAa,CAAC,KAAD,CAAb;AACD,eAHD,CAGE,OAAOsE,CAAP,EAAU;AACVtE,gBAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,aAVH;AAWE,YAAA,QAAQ,EAAED,UAAU,IAAII,SAAS,KAAKjF,aAAa,CAACkJ,OAXtD;AAAA,sBAaGjE,SAAS,KAAKjF,aAAa,CAACkJ,OAA5B,GACI,GAAE3H,CAAC,CAAC,WAAD,CAAc,IAAlB,2BACEuB,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CADZ,4DACE,wBAA8BE,MAC/B,EAHJ,GAII,GAAErC,CAAC,CAAC,SAAD,CAAY,IAAhB,2BACEuB,UAAU,CAAC5C,KAAK,CAACwD,UAAP,CADZ,4DACE,wBAA8BE,MAC/B;AAnBP;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,gBAFJ,EA4BG0B,SAAS,KAAKtF,aAAa,CAACmJ,QAA5B,iBACC,QAAC,GAAD;AACE,UAAA,KAAK,EAAElE,SAAS,KAAKjF,aAAa,CAACmJ,QAA5B,GAAuC,KAAvC,GAA+C,MADxD;AAAA,iCAGE,QAAC,MAAD;AACE,YAAA,SAAS,MADX;AAEE,YAAA,OAAO,EAAE,YAAY;AACnBnE,cAAAA,aAAa,CAAC,IAAD,CAAb;;AACA,kBAAI;AACF,sBAAMO,gBAAgB,EAAtB;AACAP,gBAAAA,aAAa,CAAC,KAAD,CAAb;AACD,eAHD,CAGE,OAAOoE,CAAP,EAAU;AACVpE,gBAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,aAVH;AAWE,YAAA,QAAQ,EAAED,UAAU,IAAIO,SAAS,KAAKtF,aAAa,CAACkJ,OAXtD;AAAA,sBAaG5D,SAAS,KAAKtF,aAAa,CAACkJ,OAA5B,GACI,GAAE3H,CAAC,CAAC,WAAD,CAAc,IAAlB,2BACEuB,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CADZ,4DACE,wBAA8BF,MAC/B,EAHJ,GAII,GAAErC,CAAC,CAAC,SAAD,CAAY,IAAhB,2BACEuB,UAAU,CAAC5C,KAAK,CAAC4D,UAAP,CADZ,4DACE,wBAA8BF,MAC/B;AAnBP;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,gBA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANN,eA+DE,QAAC,MAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,QAAQ,EACNgF,OAAO,CAAClH,OAAD,CAAP,KACCkH,OAAO,CAACrF,KAAD,CAAP,IACC0B,SAAS,KAAKjF,aAAa,CAACmJ,QAD7B,IAEC7D,SAAS,KAAKtF,aAAa,CAACmJ,QAH9B,CAHJ;AAQE,QAAA,OAAO,EAAEzH,OAAO,GAAGyE,KAAH,GAAWmC,aAR7B;AAAA,kBAUGE;AAVH;AAAA;AAAA;AAAA;AAAA,cA/DF;AAAA;AAAA;AAAA;AAAA;AAAA,YAzGF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwLD,CAzfD;;GAAMrH,Y;UAKU3B,c,EAKwBK,kB,EAKZc,wB,EACTZ,sB,EAEMK,mB,EACMC,uB,EAE6BG,Y,EACvCE,e,EAafJ,kB,EAeAC,qB,EAoBsBlB,oB,EAGYY,kB,EAIAA,kB,EAKdQ,e,EAqDTX,iB;;;KAvIXqB,Y;AA2fN,eAAeA,YAAf","sourcesContent":["import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport {\n  CurrencyInput,\n  TransactionErrorContent,\n  TransactionConfirmationModal,\n  ConfirmationModalContent,\n  DoubleCurrencyLogo,\n} from 'components';\nimport { useWalletModalToggle } from 'state/application/hooks';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport ReactGA from 'react-ga';\nimport { useTranslation } from 'react-i18next';\nimport { Currency, Token, ETHER, TokenAmount } from '@uniswap/sdk';\nimport { GlobalConst, GlobalValue } from 'constants/index';\nimport { useActiveWeb3React } from 'hooks';\nimport { useRouterContract } from 'hooks/useContract';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback';\nimport { Field } from 'state/mint/actions';\nimport { PairState } from 'data/Reserves';\nimport {\n  useTransactionAdder,\n  useTransactionFinalizer,\n} from 'state/transactions/hooks';\nimport {\n  useDerivedMintInfo,\n  useMintActionHandlers,\n  useMintState,\n} from 'state/mint/hooks';\nimport { useTokenBalance } from 'state/wallet/hooks';\nimport { useIsExpertMode, useUserSlippageTolerance } from 'state/user/hooks';\nimport {\n  maxAmountSpend,\n  addMaticToMetamask,\n  calculateSlippageAmount,\n  calculateGasMargin,\n  isSupportedNetwork,\n  formatTokenAmount,\n} from 'utils';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { ReactComponent as AddLiquidityIcon } from 'assets/images/AddLiquidityIcon.svg';\n\nconst AddLiquidity: React.FC<{\n  currency0?: Currency;\n  currency1?: Currency;\n  currencyBgClass?: string;\n}> = ({ currency0, currency1, currencyBgClass }) => {\n  const { t } = useTranslation();\n  const [addLiquidityErrorMessage, setAddLiquidityErrorMessage] = useState<\n    string | null\n  >(null);\n\n  const { account, chainId, library } = useActiveWeb3React();\n\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [attemptingTxn, setAttemptingTxn] = useState(false);\n  const [txPending, setTxPending] = useState(false);\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const deadline = useTransactionDeadline();\n  const [txHash, setTxHash] = useState('');\n  const addTransaction = useTransactionAdder();\n  const finalizedTransaction = useTransactionFinalizer();\n\n  const { independentField, typedValue, otherTypedValue } = useMintState();\n  const expertMode = useIsExpertMode();\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo();\n\n  const liquidityTokenData = {\n    amountA: formatTokenAmount(parsedAmounts[Field.CURRENCY_A]),\n    symbolA: currencies[Field.CURRENCY_A]?.symbol,\n    amountB: formatTokenAmount(parsedAmounts[Field.CURRENCY_B]),\n    symbolB: currencies[Field.CURRENCY_B]?.symbol,\n  };\n\n  const pendingText = t('supplyingTokens', liquidityTokenData);\n\n  const {\n    onFieldAInput,\n    onFieldBInput,\n    onCurrencySelection,\n  } = useMintActionHandlers(noLiquidity);\n\n  const maxAmounts: { [field in Field]?: TokenAmount } = [\n    Field.CURRENCY_A,\n    Field.CURRENCY_B,\n  ].reduce((accumulator, field) => {\n    return {\n      ...accumulator,\n      [field]: maxAmountSpend(currencyBalances[field]),\n    };\n  }, {});\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity\n      ? otherTypedValue\n      : parsedAmounts[dependentField]?.toExact() ?? '',\n  };\n\n  const { ethereum } = window as any;\n  const toggleWalletModal = useWalletModalToggle();\n  const [approvingA, setApprovingA] = useState(false);\n  const [approvingB, setApprovingB] = useState(false);\n  const [approvalA, approveACallback] = useApproveCallback(\n    parsedAmounts[Field.CURRENCY_A],\n    chainId ? GlobalConst.addresses.ROUTER_ADDRESS[chainId] : undefined,\n  );\n  const [approvalB, approveBCallback] = useApproveCallback(\n    parsedAmounts[Field.CURRENCY_B],\n    chainId ? GlobalConst.addresses.ROUTER_ADDRESS[chainId] : undefined,\n  );\n\n  const userPoolBalance = useTokenBalance(\n    account ?? undefined,\n    pair?.liquidityToken,\n  );\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [\n    Field.CURRENCY_A,\n    Field.CURRENCY_B,\n  ].reduce((accumulator, field) => {\n    return {\n      ...accumulator,\n      [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n    };\n  }, {});\n\n  const handleCurrencyASelect = useCallback(\n    (currencyA: Currency) => {\n      onCurrencySelection(Field.CURRENCY_A, currencyA);\n    },\n    [onCurrencySelection],\n  );\n\n  const handleCurrencyBSelect = useCallback(\n    (currencyB: Currency) => {\n      onCurrencySelection(Field.CURRENCY_B, currencyB);\n    },\n    [onCurrencySelection],\n  );\n\n  useEffect(() => {\n    if (currency0) {\n      onCurrencySelection(Field.CURRENCY_A, currency0);\n    } else {\n      onCurrencySelection(Field.CURRENCY_A, Token.ETHER);\n    }\n    if (currency1) {\n      onCurrencySelection(Field.CURRENCY_B, currency1);\n    } else {\n      onCurrencySelection(\n        Field.CURRENCY_B,\n        GlobalValue.tokens.COMMON.OLD_QUICK,\n      );\n    }\n  }, [onCurrencySelection, currency0, currency1]);\n\n  const onAdd = () => {\n    if (expertMode) {\n      onAddLiquidity();\n    } else {\n      setShowConfirm(true);\n    }\n  };\n\n  const router = useRouterContract();\n\n  const onAddLiquidity = async () => {\n    if (!chainId || !library || !account || !router) return;\n\n    const {\n      [Field.CURRENCY_A]: parsedAmountA,\n      [Field.CURRENCY_B]: parsedAmountB,\n    } = parsedAmounts;\n    if (\n      !parsedAmountA ||\n      !parsedAmountB ||\n      !currencies[Field.CURRENCY_A] ||\n      !currencies[Field.CURRENCY_B] ||\n      !deadline\n    ) {\n      return;\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(\n        parsedAmountA,\n        noLiquidity ? 0 : allowedSlippage,\n      )[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(\n        parsedAmountB,\n        noLiquidity ? 0 : allowedSlippage,\n      )[0],\n    };\n\n    let estimate,\n      method: (...args: any) => Promise<TransactionResponse>,\n      args: Array<string | string[] | number>,\n      value: BigNumber | null;\n    if (\n      currencies[Field.CURRENCY_A] === ETHER ||\n      currencies[Field.CURRENCY_B] === ETHER\n    ) {\n      const tokenBIsETH = currencies[Field.CURRENCY_B] === ETHER;\n      estimate = router.estimateGas.addLiquidityETH;\n      method = router.addLiquidityETH;\n      args = [\n        wrappedCurrency(\n          tokenBIsETH\n            ? currencies[Field.CURRENCY_A]\n            : currencies[Field.CURRENCY_B],\n          chainId,\n        )?.address ?? '', // token\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[\n          tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B\n        ].toString(), // token min\n        amountsMin[\n          tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A\n        ].toString(), // eth min\n        account,\n        deadline.toHexString(),\n      ];\n      value = BigNumber.from(\n        (tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString(),\n      );\n    } else {\n      estimate = router.estimateGas.addLiquidity;\n      method = router.addLiquidity;\n      args = [\n        wrappedCurrency(currencies[Field.CURRENCY_A], chainId)?.address ?? '',\n        wrappedCurrency(currencies[Field.CURRENCY_B], chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadline.toHexString(),\n      ];\n      value = null;\n    }\n\n    setAttemptingTxn(true);\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n        }).then(async (response) => {\n          setAttemptingTxn(false);\n          setTxPending(true);\n          const summary = t('addLiquidityTokens', liquidityTokenData);\n\n          addTransaction(response, {\n            summary,\n          });\n\n          setTxHash(response.hash);\n\n          try {\n            const receipt = await response.wait();\n            finalizedTransaction(receipt, {\n              summary,\n            });\n            setTxPending(false);\n          } catch (error) {\n            setTxPending(false);\n            setAddLiquidityErrorMessage(t('errorInTx'));\n          }\n\n          ReactGA.event({\n            category: 'Liquidity',\n            action: 'Add',\n            label: [\n              currencies[Field.CURRENCY_A]?.symbol,\n              currencies[Field.CURRENCY_B]?.symbol,\n            ].join('/'),\n          });\n        }),\n      )\n      .catch((error) => {\n        setAttemptingTxn(false);\n        setAddLiquidityErrorMessage(t('txRejected'));\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (error?.code !== 4001) {\n          console.error(error);\n        }\n      });\n  };\n\n  const connectWallet = () => {\n    if (ethereum && !isSupportedNetwork(ethereum)) {\n      addMaticToMetamask();\n    } else {\n      toggleWalletModal();\n    }\n  };\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false);\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('');\n    }\n    setTxHash('');\n  }, [onFieldAInput, txHash]);\n\n  const buttonText = useMemo(() => {\n    if (account) {\n      return error ?? t('supply');\n    } else if (ethereum && !isSupportedNetwork(ethereum)) {\n      return t('switchPolygon');\n    }\n    return t('connectWallet');\n  }, [account, ethereum, error, t]);\n\n  const modalHeader = () => {\n    return (\n      <Box>\n        <Box mt={10} mb={3} className='flex justify-center'>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={48}\n          />\n        </Box>\n        <Box mb={6} textAlign='center'>\n          <h6>\n            {t('supplyingTokens', liquidityTokenData)}\n            <br />\n            {t('receiveLPTokens', {\n              amount: formatTokenAmount(liquidityMinted),\n              symbolA: currencies[Field.CURRENCY_A]?.symbol,\n              symbolB: currencies[Field.CURRENCY_B]?.symbol,\n            })}\n          </h6>\n        </Box>\n        <Box mb={3} textAlign='center'>\n          <small className='text-secondary'>\n            {t('outputEstimated', { slippage: allowedSlippage / 100 })}\n          </small>\n        </Box>\n        <Box className='swapButtonWrapper'>\n          <Button fullWidth onClick={onAddLiquidity}>\n            {t('confirmSupply')}\n          </Button>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box>\n      {showConfirm && (\n        <TransactionConfirmationModal\n          isOpen={showConfirm}\n          onDismiss={handleDismissConfirmation}\n          attemptingTxn={attemptingTxn}\n          txPending={txPending}\n          hash={txHash}\n          content={() =>\n            addLiquidityErrorMessage ? (\n              <TransactionErrorContent\n                onDismiss={handleDismissConfirmation}\n                message={addLiquidityErrorMessage}\n              />\n            ) : (\n              <ConfirmationModalContent\n                title={t('supplyingliquidity')}\n                onDismiss={handleDismissConfirmation}\n                content={modalHeader}\n              />\n            )\n          }\n          pendingText={pendingText}\n          modalContent={\n            txPending ? t('submittedTxLiquidity') : t('successAddedliquidity')\n          }\n        />\n      )}\n      <CurrencyInput\n        id='add-liquidity-input-tokena'\n        title={`${t('token')} 1:`}\n        currency={currencies[Field.CURRENCY_A]}\n        showHalfButton={Boolean(maxAmounts[Field.CURRENCY_A])}\n        showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n        onMax={() =>\n          onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n        }\n        onHalf={() =>\n          onFieldAInput(\n            maxAmounts[Field.CURRENCY_A]\n              ? (Number(maxAmounts[Field.CURRENCY_A]?.toExact()) / 2).toString()\n              : '',\n          )\n        }\n        handleCurrencySelect={handleCurrencyASelect}\n        amount={formattedAmounts[Field.CURRENCY_A]}\n        setAmount={onFieldAInput}\n        bgClass={currencyBgClass}\n      />\n      <Box className='exchangeSwap'>\n        <AddLiquidityIcon />\n      </Box>\n      <CurrencyInput\n        id='add-liquidity-input-tokenb'\n        title={`${t('token')} 2:`}\n        showHalfButton={Boolean(maxAmounts[Field.CURRENCY_B])}\n        currency={currencies[Field.CURRENCY_B]}\n        showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n        onHalf={() =>\n          onFieldBInput(\n            maxAmounts[Field.CURRENCY_B]\n              ? (Number(maxAmounts[Field.CURRENCY_B]?.toExact()) / 2).toString()\n              : '',\n          )\n        }\n        onMax={() =>\n          onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n        }\n        handleCurrencySelect={handleCurrencyBSelect}\n        amount={formattedAmounts[Field.CURRENCY_B]}\n        setAmount={onFieldBInput}\n        bgClass={currencyBgClass}\n      />\n      {currencies[Field.CURRENCY_A] &&\n        currencies[Field.CURRENCY_B] &&\n        pairState !== PairState.INVALID &&\n        price && (\n          <Box my={2}>\n            <Box className='swapPrice'>\n              <small>\n                1 {currencies[Field.CURRENCY_A]?.symbol} ={' '}\n                {price.toSignificant(3)} {currencies[Field.CURRENCY_B]?.symbol}{' '}\n              </small>\n              <small>\n                1 {currencies[Field.CURRENCY_B]?.symbol} ={' '}\n                {price.invert().toSignificant(3)}{' '}\n                {currencies[Field.CURRENCY_A]?.symbol}{' '}\n              </small>\n            </Box>\n            <Box className='swapPrice'>\n              <small>{t('yourPoolShare')}:</small>\n              <small>\n                {poolTokenPercentage\n                  ? poolTokenPercentage.toSignificant(6) + '%'\n                  : '-'}\n              </small>\n            </Box>\n            <Box className='swapPrice'>\n              <small>{t('lpTokenReceived')}:</small>\n              <small>\n                {formatTokenAmount(userPoolBalance)} {t('lpTokens')}\n              </small>\n            </Box>\n          </Box>\n        )}\n      <Box className='swapButtonWrapper flex-wrap'>\n        {(approvalA === ApprovalState.NOT_APPROVED ||\n          approvalA === ApprovalState.PENDING ||\n          approvalB === ApprovalState.NOT_APPROVED ||\n          approvalB === ApprovalState.PENDING) &&\n          !error && (\n            <Box className='flex fullWidth justify-between' mb={2}>\n              {approvalA !== ApprovalState.APPROVED && (\n                <Box\n                  width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\n                >\n                  <Button\n                    fullWidth\n                    onClick={async () => {\n                      setApprovingA(true);\n                      try {\n                        await approveACallback();\n                        setApprovingA(false);\n                      } catch (e) {\n                        setApprovingA(false);\n                      }\n                    }}\n                    disabled={approvingA || approvalA === ApprovalState.PENDING}\n                  >\n                    {approvalA === ApprovalState.PENDING\n                      ? `${t('approving')} ${\n                          currencies[Field.CURRENCY_A]?.symbol\n                        }`\n                      : `${t('approve')} ${\n                          currencies[Field.CURRENCY_A]?.symbol\n                        }`}\n                  </Button>\n                </Box>\n              )}\n              {approvalB !== ApprovalState.APPROVED && (\n                <Box\n                  width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\n                >\n                  <Button\n                    fullWidth\n                    onClick={async () => {\n                      setApprovingB(true);\n                      try {\n                        await approveBCallback();\n                        setApprovingB(false);\n                      } catch (e) {\n                        setApprovingB(false);\n                      }\n                    }}\n                    disabled={approvingB || approvalB === ApprovalState.PENDING}\n                  >\n                    {approvalB === ApprovalState.PENDING\n                      ? `${t('approving')} ${\n                          currencies[Field.CURRENCY_B]?.symbol\n                        }`\n                      : `${t('approve')} ${\n                          currencies[Field.CURRENCY_B]?.symbol\n                        }`}\n                  </Button>\n                </Box>\n              )}\n            </Box>\n          )}\n        <Button\n          fullWidth\n          disabled={\n            Boolean(account) &&\n            (Boolean(error) ||\n              approvalA !== ApprovalState.APPROVED ||\n              approvalB !== ApprovalState.APPROVED)\n          }\n          onClick={account ? onAdd : connectWallet}\n        >\n          {buttonText}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddLiquidity;\n"]},"metadata":{},"sourceType":"module"}