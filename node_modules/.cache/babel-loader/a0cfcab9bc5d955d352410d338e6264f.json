{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/Swap/Swap.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { JSBI, Token } from '@uniswap/sdk';\nimport ReactGA from 'react-ga';\nimport { ArrowDown } from 'react-feather';\nimport { Box, Button, CircularProgress } from '@material-ui/core';\nimport { useWalletModalToggle } from 'state/application/hooks';\nimport { useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from 'state/swap/hooks';\nimport { useExpertModeManager, useUserSlippageTolerance } from 'state/user/hooks';\nimport { Field } from 'state/swap/actions';\nimport { useAllTokens } from 'hooks/Tokens';\nimport { CurrencyInput, ConfirmSwapModal, AdvancedSwapDetails, AddressInput } from 'components';\nimport { useActiveWeb3React } from 'hooks';\nimport { ApprovalState, useApproveCallbackFromTrade } from 'hooks/useApproveCallback';\nimport { useSwapCallback } from 'hooks/useSwapCallback';\nimport { useTransactionFinalizer } from 'state/transactions/hooks';\nimport useENSAddress from 'hooks/useENSAddress';\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback';\nimport useToggledVersion, { Version } from 'hooks/useToggledVersion';\nimport { addMaticToMetamask, isSupportedNetwork, confirmPriceImpactWithoutFee, maxAmountSpend } from 'utils';\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices';\nimport { ReactComponent as PriceExchangeIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/PriceExchangeIcon.svg\";\nimport { ReactComponent as ExchangeIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/ExchangeIcon.svg\";\nimport 'components/styles/Swap.scss';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Swap = _ref => {\n  _s();\n\n  var _parsedAmounts$indepe3, _parsedAmounts$Field$, _ref3, _ref4, _currencies$Field$INP;\n\n  let {\n    currency0,\n    currency1,\n    currencyBgClass\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const toggledVersion = useToggledVersion();\n  const finalizedTransaction = useTransactionFinalizer();\n  const [isExpertMode] = useExpertModeManager();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const allTokens = useAllTokens();\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade\n  };\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const [approving, setApproving] = useState(false);\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage);\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const parsedAmounts = useMemo(() => {\n    return showWrap ? {\n      [Field.INPUT]: parsedAmount,\n      [Field.OUTPUT]: parsedAmount\n    } : {\n      [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n      [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n    };\n  }, [parsedAmount, independentField, trade, showWrap]);\n  const formattedAmounts = useMemo(() => {\n    var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2;\n\n    return {\n      [independentField]: typedValue,\n      [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toExact()) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n    };\n  }, [independentField, typedValue, dependentField, showWrap, parsedAmounts]);\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route;\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false);\n  const {\n    ethereum\n  } = window;\n  const [mainPrice, setMainPrice] = useState(true);\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee);\n  const isValid = !swapInputError;\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const toggleWalletModal = useWalletModalToggle();\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n\n  const connectWallet = () => {\n    if (ethereum && !isSupportedNetwork(ethereum)) {\n      addMaticToMetamask();\n    } else {\n      toggleWalletModal();\n    }\n  };\n\n  const handleCurrencySelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleOtherCurrencySelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, recipient);\n  const swapButtonText = useMemo(() => {\n    if (account) {\n      if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n        return t('selectToken');\n      } else if (formattedAmounts[Field.INPUT] === '' && formattedAmounts[Field.OUTPUT] === '') {\n        return t('enterAmount');\n      } else if (showWrap) {\n        return wrapType === WrapType.WRAP ? t('wrap') : wrapType === WrapType.UNWRAP ? t('unWrap') : '';\n      } else if (noRoute && userHasSpecifiedInputOutput) {\n        return t('insufficientLiquidityTrade');\n      } else {\n        return swapInputError !== null && swapInputError !== void 0 ? swapInputError : t('swap');\n      }\n    } else {\n      return ethereum && !isSupportedNetwork(ethereum) ? t('switchPolygon') : t('connectWallet');\n    }\n  }, [t, formattedAmounts, currencies, account, ethereum, noRoute, userHasSpecifiedInputOutput, showWrap, wrapType, swapInputError]);\n  const swapButtonDisabled = useMemo(() => {\n    if (account) {\n      if (showWrap) {\n        return Boolean(wrapInputError);\n      } else if (noRoute && userHasSpecifiedInputOutput) {\n        return true;\n      } else if (showApproveFlow) {\n        return !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode;\n      } else {\n        return !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError;\n      }\n    } else {\n      return false;\n    }\n  }, [account, showWrap, wrapInputError, noRoute, userHasSpecifiedInputOutput, showApproveFlow, approval, priceImpactSeverity, isValid, swapCallbackError, isExpertMode]);\n  const [{\n    showConfirm,\n    txPending,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    txPending: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n  const handleHalfInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, (Number(maxAmountInput.toExact()) / 2).toString());\n  }, [maxAmountInput, onUserInput]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput)));\n\n  const onSwap = () => {\n    if (showWrap && onWrap) {\n      onWrap();\n    } else if (isExpertMode) {\n      handleSwap();\n    } else {\n      setSwapState({\n        tradeToConfirm: trade,\n        attemptingTxn: false,\n        swapErrorMessage: undefined,\n        showConfirm: true,\n        txHash: undefined\n      });\n    }\n  };\n\n  useEffect(() => {\n    onCurrencySelection(Field.INPUT, Token.ETHER);\n  }, [onCurrencySelection, allTokens]);\n  useEffect(() => {\n    if (currency0) {\n      onCurrencySelection(Field.INPUT, currency0);\n    }\n\n    if (currency1) {\n      onCurrencySelection(Field.OUTPUT, currency1);\n    }\n  }, [onCurrencySelection, currency0, currency1]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(async _ref2 => {\n      let {\n        response,\n        summary\n      } = _ref2;\n      setSwapState({\n        attemptingTxn: false,\n        txPending: true,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: response.hash\n      });\n\n      try {\n        var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n\n        const receipt = await response.wait();\n        finalizedTransaction(receipt, {\n          summary\n        });\n        setSwapState({\n          attemptingTxn: false,\n          txPending: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: undefined,\n          txHash: response.hash\n        });\n        ReactGA.event({\n          category: 'Swap',\n          action: recipient === null ? 'Swap w/o Send' : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? 'Swap w/o Send + recipient' : 'Swap w/ Send',\n          label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol].join('/')\n        });\n      } catch (error) {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined\n        });\n      }\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, finalizedTransaction, trade]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [showConfirm && /*#__PURE__*/_jsxDEV(ConfirmSwapModal, {\n      isOpen: showConfirm,\n      trade: trade,\n      originalTrade: tradeToConfirm,\n      onAcceptChanges: handleAcceptChanges,\n      attemptingTxn: attemptingTxn,\n      txPending: txPending,\n      txHash: txHash,\n      recipient: recipient,\n      allowedSlippage: allowedSlippage,\n      onConfirm: handleSwap,\n      swapErrorMessage: swapErrorMessage,\n      onDismiss: handleConfirmDismiss\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CurrencyInput, {\n      title: `${t('from')}:`,\n      id: \"swap-currency-input\",\n      currency: currencies[Field.INPUT],\n      onHalf: handleHalfInput,\n      onMax: handleMaxInput,\n      showHalfButton: true,\n      showMaxButton: !atMaxAmountInput,\n      otherCurrency: currencies[Field.OUTPUT],\n      handleCurrencySelect: handleCurrencySelect,\n      amount: formattedAmounts[Field.INPUT],\n      setAmount: handleTypeInput,\n      bgClass: currencyBgClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"exchangeSwap\",\n      children: /*#__PURE__*/_jsxDEV(ExchangeIcon, {\n        onClick: onSwitchTokens\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrencyInput, {\n      title: `${t('toEstimate')}:`,\n      id: \"swap-currency-output\",\n      currency: currencies[Field.OUTPUT],\n      showPrice: Boolean(trade && trade.executionPrice),\n      showMaxButton: false,\n      otherCurrency: currencies[Field.INPUT],\n      handleCurrencySelect: handleOtherCurrencySelect,\n      amount: formattedAmounts[Field.OUTPUT],\n      setAmount: handleTypeOutput,\n      bgClass: currencyBgClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this), trade && trade.executionPrice && /*#__PURE__*/_jsxDEV(Box, {\n      className: \"swapPrice\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        children: [t('price'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"1\", ' ', (_ref3 = mainPrice ? currencies[Field.INPUT] : currencies[Field.OUTPUT]) === null || _ref3 === void 0 ? void 0 : _ref3.symbol, ' ', \"=\", ' ', (mainPrice ? trade.executionPrice : trade.executionPrice.invert()).toSignificant(6), ' ', (_ref4 = mainPrice ? currencies[Field.OUTPUT] : currencies[Field.INPUT]) === null || _ref4 === void 0 ? void 0 : _ref4.symbol, ' ', /*#__PURE__*/_jsxDEV(PriceExchangeIcon, {\n          onClick: () => {\n            setMainPrice(!mainPrice);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 9\n    }, this), !showWrap && isExpertMode && /*#__PURE__*/_jsxDEV(Box, {\n      className: \"recipientInput\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"recipientInputHeader\",\n        children: [recipient !== null ? /*#__PURE__*/_jsxDEV(ArrowDown, {\n          size: \"16\",\n          color: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => onChangeRecipient(recipient !== null ? null : ''),\n          children: recipient !== null ? `- ${t('removeSend')}` : `+ ${t('addSendOptional')}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this), recipient !== null && /*#__PURE__*/_jsxDEV(AddressInput, {\n        label: t('recipient'),\n        placeholder: t('walletOrENS'),\n        value: recipient,\n        onChange: onChangeRecipient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AdvancedSwapDetails, {\n      trade: trade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"swapButtonWrapper\",\n      children: [showApproveFlow && /*#__PURE__*/_jsxDEV(Box, {\n        width: \"48%\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          disabled: approving || approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n          onClick: async () => {\n            setApproving(true);\n\n            try {\n              await approveCallback();\n              setApproving(false);\n            } catch (err) {\n              setApproving(false);\n            }\n          },\n          children: approval === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(Box, {\n            className: \"content\",\n            children: [t('approving'), \" \", /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 17\n          }, this) : approvalSubmitted && approval === ApprovalState.APPROVED ? t('approved') : `${t('approve')} ${(_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        width: showApproveFlow ? '48%' : '100%',\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          disabled: swapButtonDisabled,\n          onClick: account ? onSwap : connectWallet,\n          children: swapButtonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 451,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Swap, \"C7ohsIhmmuh/AH+IR0sRUYYZPn4=\", false, function () {\n  return [useTranslation, useActiveWeb3React, useSwapState, useDerivedSwapInfo, useToggledVersion, useTransactionFinalizer, useExpertModeManager, useWrapCallback, useAllTokens, useSwapActionHandlers, useENSAddress, useUserSlippageTolerance, useApproveCallbackFromTrade, useWalletModalToggle, useSwapCallback];\n});\n\n_c = Swap;\nexport default Swap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Swap\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/Swap/Swap.tsx"],"names":["React","useState","useMemo","useCallback","useEffect","JSBI","Token","ReactGA","ArrowDown","Box","Button","CircularProgress","useWalletModalToggle","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSlippageTolerance","Field","useAllTokens","CurrencyInput","ConfirmSwapModal","AdvancedSwapDetails","AddressInput","useActiveWeb3React","ApprovalState","useApproveCallbackFromTrade","useSwapCallback","useTransactionFinalizer","useENSAddress","useWrapCallback","WrapType","useToggledVersion","Version","addMaticToMetamask","isSupportedNetwork","confirmPriceImpactWithoutFee","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","useTranslation","Swap","currency0","currency1","currencyBgClass","t","account","independentField","typedValue","recipient","v1Trade","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","toggledVersion","finalizedTransaction","isExpertMode","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","allTokens","showWrap","NOT_APPLICABLE","tradesByVersion","v1","v2","trade","undefined","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","address","recipientAddress","allowedSlippage","approving","setApproving","approval","approveCallback","dependentField","parsedAmounts","inputAmount","outputAmount","formattedAmounts","toExact","route","userHasSpecifiedInputOutput","Boolean","greaterThan","BigInt","noRoute","priceImpactWithoutFee","approvalSubmitted","setApprovalSubmitted","ethereum","window","mainPrice","setMainPrice","priceImpactSeverity","isValid","showApproveFlow","NOT_APPROVED","PENDING","APPROVED","toggleWalletModal","connectWallet","handleCurrencySelect","inputCurrency","handleOtherCurrencySelect","outputCurrency","callback","swapCallback","error","swapCallbackError","swapButtonText","WRAP","UNWRAP","swapButtonDisabled","showConfirm","txPending","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","handleTypeInput","value","handleTypeOutput","maxAmountInput","handleMaxInput","handleHalfInput","Number","toString","atMaxAmountInput","equalTo","onSwap","handleSwap","ETHER","handleAcceptChanges","handleConfirmDismiss","then","response","summary","hash","receipt","wait","event","category","action","label","currency","symbol","join","message","catch","executionPrice","invert","toSignificant","err"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Currency, CurrencyAmount, JSBI, Token, Trade } from '@uniswap/sdk';\nimport ReactGA from 'react-ga';\nimport { ArrowDown } from 'react-feather';\nimport { Box, Button, CircularProgress } from '@material-ui/core';\nimport { useWalletModalToggle } from 'state/application/hooks';\nimport {\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState,\n} from 'state/swap/hooks';\nimport {\n  useExpertModeManager,\n  useUserSlippageTolerance,\n} from 'state/user/hooks';\nimport { Field } from 'state/swap/actions';\nimport { useAllTokens } from 'hooks/Tokens';\nimport {\n  CurrencyInput,\n  ConfirmSwapModal,\n  AdvancedSwapDetails,\n  AddressInput,\n} from 'components';\nimport { useActiveWeb3React } from 'hooks';\nimport {\n  ApprovalState,\n  useApproveCallbackFromTrade,\n} from 'hooks/useApproveCallback';\nimport { useSwapCallback } from 'hooks/useSwapCallback';\nimport { useTransactionFinalizer } from 'state/transactions/hooks';\nimport useENSAddress from 'hooks/useENSAddress';\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback';\nimport useToggledVersion, { Version } from 'hooks/useToggledVersion';\nimport {\n  addMaticToMetamask,\n  isSupportedNetwork,\n  confirmPriceImpactWithoutFee,\n  maxAmountSpend,\n} from 'utils';\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices';\nimport { ReactComponent as PriceExchangeIcon } from 'assets/images/PriceExchangeIcon.svg';\nimport { ReactComponent as ExchangeIcon } from 'assets/images/ExchangeIcon.svg';\nimport 'components/styles/Swap.scss';\nimport { useTranslation } from 'react-i18next';\n\nconst Swap: React.FC<{\n  currency0?: Currency;\n  currency1?: Currency;\n  currencyBgClass?: string;\n}> = ({ currency0, currency1, currencyBgClass }) => {\n  const { t } = useTranslation();\n  const { account } = useActiveWeb3React();\n  const { independentField, typedValue, recipient } = useSwapState();\n  const {\n    v1Trade,\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n  } = useDerivedSwapInfo();\n  const toggledVersion = useToggledVersion();\n  const finalizedTransaction = useTransactionFinalizer();\n  const [isExpertMode] = useExpertModeManager();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue,\n  );\n  const allTokens = useAllTokens();\n\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE;\n  const tradesByVersion = {\n    [Version.v1]: v1Trade,\n    [Version.v2]: v2Trade,\n  };\n  const trade = showWrap ? undefined : tradesByVersion[toggledVersion];\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  } = useSwapActionHandlers();\n  const { address: recipientAddress } = useENSAddress(recipient);\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const [approving, setApproving] = useState(false);\n  const [approval, approveCallback] = useApproveCallbackFromTrade(\n    trade,\n    allowedSlippage,\n  );\n  const dependentField: Field =\n    independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const parsedAmounts = useMemo(() => {\n    return showWrap\n      ? {\n          [Field.INPUT]: parsedAmount,\n          [Field.OUTPUT]: parsedAmount,\n        }\n      : {\n          [Field.INPUT]:\n            independentField === Field.INPUT\n              ? parsedAmount\n              : trade?.inputAmount,\n          [Field.OUTPUT]:\n            independentField === Field.OUTPUT\n              ? parsedAmount\n              : trade?.outputAmount,\n        };\n  }, [parsedAmount, independentField, trade, showWrap]);\n  const formattedAmounts = useMemo(() => {\n    return {\n      [independentField]: typedValue,\n      [dependentField]: showWrap\n        ? parsedAmounts[independentField]?.toExact() ?? ''\n        : parsedAmounts[dependentField]?.toExact() ?? '',\n    };\n  }, [independentField, typedValue, dependentField, showWrap, parsedAmounts]);\n  const route = trade?.route;\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] &&\n      currencies[Field.OUTPUT] &&\n      parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0)),\n  );\n  const noRoute = !route;\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade);\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false);\n  const { ethereum } = window as any;\n  const [mainPrice, setMainPrice] = useState(true);\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee);\n  const isValid = !swapInputError;\n\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode);\n\n  const toggleWalletModal = useWalletModalToggle();\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n\n  const connectWallet = () => {\n    if (ethereum && !isSupportedNetwork(ethereum)) {\n      addMaticToMetamask();\n    } else {\n      toggleWalletModal();\n    }\n  };\n\n  const handleCurrencySelect = useCallback(\n    (inputCurrency) => {\n      setApprovalSubmitted(false); // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency);\n    },\n    [onCurrencySelection],\n  );\n\n  const handleOtherCurrencySelect = useCallback(\n    (outputCurrency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection],\n  );\n\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    recipient,\n  );\n\n  const swapButtonText = useMemo(() => {\n    if (account) {\n      if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n        return t('selectToken');\n      } else if (\n        formattedAmounts[Field.INPUT] === '' &&\n        formattedAmounts[Field.OUTPUT] === ''\n      ) {\n        return t('enterAmount');\n      } else if (showWrap) {\n        return wrapType === WrapType.WRAP\n          ? t('wrap')\n          : wrapType === WrapType.UNWRAP\n          ? t('unWrap')\n          : '';\n      } else if (noRoute && userHasSpecifiedInputOutput) {\n        return t('insufficientLiquidityTrade');\n      } else {\n        return swapInputError ?? t('swap');\n      }\n    } else {\n      return ethereum && !isSupportedNetwork(ethereum)\n        ? t('switchPolygon')\n        : t('connectWallet');\n    }\n  }, [\n    t,\n    formattedAmounts,\n    currencies,\n    account,\n    ethereum,\n    noRoute,\n    userHasSpecifiedInputOutput,\n    showWrap,\n    wrapType,\n    swapInputError,\n  ]);\n\n  const swapButtonDisabled = useMemo(() => {\n    if (account) {\n      if (showWrap) {\n        return Boolean(wrapInputError);\n      } else if (noRoute && userHasSpecifiedInputOutput) {\n        return true;\n      } else if (showApproveFlow) {\n        return (\n          !isValid ||\n          approval !== ApprovalState.APPROVED ||\n          (priceImpactSeverity > 3 && !isExpertMode)\n        );\n      } else {\n        return (\n          !isValid ||\n          (priceImpactSeverity > 3 && !isExpertMode) ||\n          !!swapCallbackError\n        );\n      }\n    } else {\n      return false;\n    }\n  }, [\n    account,\n    showWrap,\n    wrapInputError,\n    noRoute,\n    userHasSpecifiedInputOutput,\n    showApproveFlow,\n    approval,\n    priceImpactSeverity,\n    isValid,\n    swapCallbackError,\n    isExpertMode,\n  ]);\n\n  const [\n    {\n      showConfirm,\n      txPending,\n      tradeToConfirm,\n      swapErrorMessage,\n      attemptingTxn,\n      txHash,\n    },\n    setSwapState,\n  ] = useState<{\n    showConfirm: boolean;\n    txPending?: boolean;\n    tradeToConfirm: Trade | undefined;\n    attemptingTxn: boolean;\n    swapErrorMessage: string | undefined;\n    txHash: string | undefined;\n  }>({\n    showConfirm: false,\n    txPending: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  });\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value);\n    },\n    [onUserInput],\n  );\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value);\n    },\n    [onUserInput],\n  );\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(\n    currencyBalances[Field.INPUT],\n  );\n\n  const handleMaxInput = useCallback(() => {\n    maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  const handleHalfInput = useCallback(() => {\n    maxAmountInput &&\n      onUserInput(\n        Field.INPUT,\n        (Number(maxAmountInput.toExact()) / 2).toString(),\n      );\n  }, [maxAmountInput, onUserInput]);\n\n  const atMaxAmountInput = Boolean(\n    maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput),\n  );\n\n  const onSwap = () => {\n    if (showWrap && onWrap) {\n      onWrap();\n    } else if (isExpertMode) {\n      handleSwap();\n    } else {\n      setSwapState({\n        tradeToConfirm: trade,\n        attemptingTxn: false,\n        swapErrorMessage: undefined,\n        showConfirm: true,\n        txHash: undefined,\n      });\n    }\n  };\n\n  useEffect(() => {\n    onCurrencySelection(Field.INPUT, Token.ETHER);\n  }, [onCurrencySelection, allTokens]);\n\n  useEffect(() => {\n    if (currency0) {\n      onCurrencySelection(Field.INPUT, currency0);\n    }\n    if (currency1) {\n      onCurrencySelection(Field.OUTPUT, currency1);\n    }\n  }, [onCurrencySelection, currency0, currency1]);\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm,\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash,\n    });\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n\n  const handleSwap = useCallback(() => {\n    if (\n      priceImpactWithoutFee &&\n      !confirmPriceImpactWithoutFee(priceImpactWithoutFee)\n    ) {\n      return;\n    }\n    if (!swapCallback) {\n      return;\n    }\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined,\n    });\n    swapCallback()\n      .then(async ({ response, summary }) => {\n        setSwapState({\n          attemptingTxn: false,\n          txPending: true,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: undefined,\n          txHash: response.hash,\n        });\n\n        try {\n          const receipt = await response.wait();\n          finalizedTransaction(receipt, {\n            summary,\n          });\n          setSwapState({\n            attemptingTxn: false,\n            txPending: false,\n            tradeToConfirm,\n            showConfirm,\n            swapErrorMessage: undefined,\n            txHash: response.hash,\n          });\n          ReactGA.event({\n            category: 'Swap',\n            action:\n              recipient === null\n                ? 'Swap w/o Send'\n                : (recipientAddress ?? recipient) === account\n                ? 'Swap w/o Send + recipient'\n                : 'Swap w/ Send',\n            label: [\n              trade?.inputAmount?.currency?.symbol,\n              trade?.outputAmount?.currency?.symbol,\n            ].join('/'),\n          });\n        } catch (error) {\n          setSwapState({\n            attemptingTxn: false,\n            tradeToConfirm,\n            showConfirm,\n            swapErrorMessage: (error as any).message,\n            txHash: undefined,\n          });\n        }\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        });\n      });\n  }, [\n    tradeToConfirm,\n    account,\n    priceImpactWithoutFee,\n    recipient,\n    recipientAddress,\n    showConfirm,\n    swapCallback,\n    finalizedTransaction,\n    trade,\n  ]);\n\n  return (\n    <Box>\n      {showConfirm && (\n        <ConfirmSwapModal\n          isOpen={showConfirm}\n          trade={trade}\n          originalTrade={tradeToConfirm}\n          onAcceptChanges={handleAcceptChanges}\n          attemptingTxn={attemptingTxn}\n          txPending={txPending}\n          txHash={txHash}\n          recipient={recipient}\n          allowedSlippage={allowedSlippage}\n          onConfirm={handleSwap}\n          swapErrorMessage={swapErrorMessage}\n          onDismiss={handleConfirmDismiss}\n        />\n      )}\n      <CurrencyInput\n        title={`${t('from')}:`}\n        id='swap-currency-input'\n        currency={currencies[Field.INPUT]}\n        onHalf={handleHalfInput}\n        onMax={handleMaxInput}\n        showHalfButton={true}\n        showMaxButton={!atMaxAmountInput}\n        otherCurrency={currencies[Field.OUTPUT]}\n        handleCurrencySelect={handleCurrencySelect}\n        amount={formattedAmounts[Field.INPUT]}\n        setAmount={handleTypeInput}\n        bgClass={currencyBgClass}\n      />\n      <Box className='exchangeSwap'>\n        <ExchangeIcon onClick={onSwitchTokens} />\n      </Box>\n      <CurrencyInput\n        title={`${t('toEstimate')}:`}\n        id='swap-currency-output'\n        currency={currencies[Field.OUTPUT]}\n        showPrice={Boolean(trade && trade.executionPrice)}\n        showMaxButton={false}\n        otherCurrency={currencies[Field.INPUT]}\n        handleCurrencySelect={handleOtherCurrencySelect}\n        amount={formattedAmounts[Field.OUTPUT]}\n        setAmount={handleTypeOutput}\n        bgClass={currencyBgClass}\n      />\n      {trade && trade.executionPrice && (\n        <Box className='swapPrice'>\n          <small>{t('price')}:</small>\n          <small>\n            1{' '}\n            {\n              (mainPrice ? currencies[Field.INPUT] : currencies[Field.OUTPUT])\n                ?.symbol\n            }{' '}\n            ={' '}\n            {(mainPrice\n              ? trade.executionPrice\n              : trade.executionPrice.invert()\n            ).toSignificant(6)}{' '}\n            {\n              (mainPrice ? currencies[Field.OUTPUT] : currencies[Field.INPUT])\n                ?.symbol\n            }{' '}\n            <PriceExchangeIcon\n              onClick={() => {\n                setMainPrice(!mainPrice);\n              }}\n            />\n          </small>\n        </Box>\n      )}\n      {!showWrap && isExpertMode && (\n        <Box className='recipientInput'>\n          <Box className='recipientInputHeader'>\n            {recipient !== null ? (\n              <ArrowDown size='16' color='white' />\n            ) : (\n              <Box />\n            )}\n            <Button\n              onClick={() => onChangeRecipient(recipient !== null ? null : '')}\n            >\n              {recipient !== null\n                ? `- ${t('removeSend')}`\n                : `+ ${t('addSendOptional')}`}\n            </Button>\n          </Box>\n          {recipient !== null && (\n            <AddressInput\n              label={t('recipient')}\n              placeholder={t('walletOrENS')}\n              value={recipient}\n              onChange={onChangeRecipient}\n            />\n          )}\n        </Box>\n      )}\n      <AdvancedSwapDetails trade={trade} />\n      <Box className='swapButtonWrapper'>\n        {showApproveFlow && (\n          <Box width='48%'>\n            <Button\n              fullWidth\n              disabled={\n                approving ||\n                approval !== ApprovalState.NOT_APPROVED ||\n                approvalSubmitted\n              }\n              onClick={async () => {\n                setApproving(true);\n                try {\n                  await approveCallback();\n                  setApproving(false);\n                } catch (err) {\n                  setApproving(false);\n                }\n              }}\n            >\n              {approval === ApprovalState.PENDING ? (\n                <Box className='content'>\n                  {t('approving')} <CircularProgress size={16} />\n                </Box>\n              ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                t('approved')\n              ) : (\n                `${t('approve')} ${currencies[Field.INPUT]?.symbol}`\n              )}\n            </Button>\n          </Box>\n        )}\n        <Box width={showApproveFlow ? '48%' : '100%'}>\n          <Button\n            fullWidth\n            disabled={swapButtonDisabled as boolean}\n            onClick={account ? onSwap : connectWallet}\n          >\n            {swapButtonText}\n          </Button>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Swap;\n"]},"metadata":{},"sourceType":"module"}