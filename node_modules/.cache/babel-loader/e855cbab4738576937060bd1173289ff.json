{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/AnalyticsTokenDetails/AnalyticsTokenChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { Box } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport dayjs from 'dayjs';\nimport { formatCompact, getFormattedPrice, getPriceClass, formatNumber, getChartDates, getChartStartTime, getLimitedData, getYAXISValuesAnalytics } from 'utils';\nimport { AreaChart, ChartType } from 'components';\nimport { getTokenChartData } from 'utils';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CHART_VOLUME = 0;\nconst CHART_LIQUIDITY = 1;\nconst CHART_PRICE = 2;\n\nconst AnalyticsTokenChart = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const match = useRouteMatch();\n  const tokenAddress = match.params.id;\n  const [tokenChartData, updateTokenChartData] = useState(null);\n  const chartIndexes = [CHART_VOLUME, CHART_LIQUIDITY, CHART_PRICE];\n  const chartIndexTexts = [t('volume'), t('liquidity'), t('price')];\n  const [chartIndex, setChartIndex] = useState(CHART_VOLUME);\n  const [durationIndex, setDurationIndex] = useState(GlobalConst.analyticChart.ONE_MONTH_CHART);\n  const chartData = useMemo(() => {\n    if (!tokenChartData) return;\n    return tokenChartData.map(item => {\n      switch (chartIndex) {\n        case CHART_VOLUME:\n          return Number(item.dailyVolumeUSD);\n\n        case CHART_LIQUIDITY:\n          return Number(item.totalLiquidityUSD);\n\n        case CHART_PRICE:\n          return Number(item.priceUSD);\n\n        default:\n          return;\n      }\n    });\n  }, [tokenChartData, chartIndex]);\n  const currentData = useMemo(() => {\n    if (!token) return;\n\n    switch (chartIndex) {\n      case CHART_VOLUME:\n        return token.oneDayVolumeUSD;\n\n      case CHART_LIQUIDITY:\n        return token.totalLiquidityUSD;\n\n      case CHART_PRICE:\n        return token.priceUSD;\n\n      default:\n        return;\n    }\n  }, [token, chartIndex]);\n  const currentPercent = useMemo(() => {\n    if (!token) return;\n\n    switch (chartIndex) {\n      case CHART_VOLUME:\n        return token.volumeChangeUSD;\n\n      case CHART_LIQUIDITY:\n        return token.liquidityChangeUSD;\n\n      case CHART_PRICE:\n        return token.priceChangeUSD;\n\n      default:\n        return;\n    }\n  }, [token, chartIndex]);\n  useEffect(() => {\n    async function fetchTokenChartData() {\n      updateTokenChartData(null);\n      const chartData = await getTokenChartData(tokenAddress, durationIndex === GlobalConst.analyticChart.ALL_CHART ? 0 : getChartStartTime(durationIndex));\n\n      if (chartData) {\n        const newChartData = getLimitedData(chartData, GlobalConst.analyticChart.CHART_COUNT);\n        updateTokenChartData(newChartData);\n      }\n    }\n\n    fetchTokenChartData();\n  }, [updateTokenChartData, tokenAddress, durationIndex]);\n  const currentPercentClass = getPriceClass(Number(currentPercent));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"flex flex-wrap justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        mt: 1.5,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: chartIndexTexts[chartIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1,\n          children: currentData && currentPercent ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              className: \"flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"$\", currentData > 100000 ? formatCompact(currentData) : formatNumber(currentData)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                className: `priceChangeWrapper ${currentPercentClass}`,\n                ml: 1,\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [getFormattedPrice(Number(currentPercent)), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: dayjs().format('MMM DD, YYYY')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            variant: \"rect\",\n            width: \"120px\",\n            height: \"30px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex flex-col items-end\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          mt: 1.5,\n          children: /*#__PURE__*/_jsxDEV(ChartType, {\n            chartTypes: chartIndexes,\n            typeTexts: chartIndexTexts,\n            chartType: chartIndex,\n            setChartType: setChartIndex\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1.5,\n          children: /*#__PURE__*/_jsxDEV(ChartType, {\n            chartTypes: GlobalData.analytics.CHART_DURATIONS,\n            typeTexts: GlobalData.analytics.CHART_DURATION_TEXTS,\n            chartType: durationIndex,\n            setChartType: setDurationIndex\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      width: 1,\n      children: tokenChartData ? /*#__PURE__*/_jsxDEV(AreaChart, {\n        data: chartData,\n        yAxisValues: getYAXISValuesAnalytics(chartData),\n        dates: tokenChartData.map(value => value.date),\n        width: \"100%\",\n        height: 240,\n        categories: getChartDates(tokenChartData, durationIndex)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rect\",\n        width: \"100%\",\n        height: 217\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AnalyticsTokenChart, \"ZYeXKsIPDsbBP9cnRlNLckwj5fc=\", false, function () {\n  return [useTranslation, useRouteMatch];\n});\n\n_c = AnalyticsTokenChart;\nexport default AnalyticsTokenChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnalyticsTokenChart\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/AnalyticsTokenDetails/AnalyticsTokenChart.tsx"],"names":["React","useState","useEffect","useMemo","useRouteMatch","Box","Skeleton","dayjs","formatCompact","getFormattedPrice","getPriceClass","formatNumber","getChartDates","getChartStartTime","getLimitedData","getYAXISValuesAnalytics","AreaChart","ChartType","getTokenChartData","GlobalConst","GlobalData","useTranslation","CHART_VOLUME","CHART_LIQUIDITY","CHART_PRICE","AnalyticsTokenChart","token","t","match","tokenAddress","params","id","tokenChartData","updateTokenChartData","chartIndexes","chartIndexTexts","chartIndex","setChartIndex","durationIndex","setDurationIndex","analyticChart","ONE_MONTH_CHART","chartData","map","item","Number","dailyVolumeUSD","totalLiquidityUSD","priceUSD","currentData","oneDayVolumeUSD","currentPercent","volumeChangeUSD","liquidityChangeUSD","priceChangeUSD","fetchTokenChartData","ALL_CHART","newChartData","CHART_COUNT","currentPercentClass","format","analytics","CHART_DURATIONS","CHART_DURATION_TEXTS","value","date"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { Box } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport dayjs from 'dayjs';\nimport {\n  formatCompact,\n  getFormattedPrice,\n  getPriceClass,\n  formatNumber,\n  getChartDates,\n  getChartStartTime,\n  getLimitedData,\n  getYAXISValuesAnalytics,\n} from 'utils';\nimport { AreaChart, ChartType } from 'components';\nimport { getTokenChartData } from 'utils';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { useTranslation } from 'react-i18next';\n\nconst CHART_VOLUME = 0;\nconst CHART_LIQUIDITY = 1;\nconst CHART_PRICE = 2;\n\nconst AnalyticsTokenChart: React.FC<{ token: any }> = ({ token }) => {\n  const { t } = useTranslation();\n  const match = useRouteMatch<{ id: string }>();\n  const tokenAddress = match.params.id;\n  const [tokenChartData, updateTokenChartData] = useState<any>(null);\n  const chartIndexes = [CHART_VOLUME, CHART_LIQUIDITY, CHART_PRICE];\n  const chartIndexTexts = [t('volume'), t('liquidity'), t('price')];\n  const [chartIndex, setChartIndex] = useState(CHART_VOLUME);\n  const [durationIndex, setDurationIndex] = useState(\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\n  );\n\n  const chartData = useMemo(() => {\n    if (!tokenChartData) return;\n    return tokenChartData.map((item: any) => {\n      switch (chartIndex) {\n        case CHART_VOLUME:\n          return Number(item.dailyVolumeUSD);\n        case CHART_LIQUIDITY:\n          return Number(item.totalLiquidityUSD);\n        case CHART_PRICE:\n          return Number(item.priceUSD);\n        default:\n          return;\n      }\n    });\n  }, [tokenChartData, chartIndex]);\n\n  const currentData = useMemo(() => {\n    if (!token) return;\n    switch (chartIndex) {\n      case CHART_VOLUME:\n        return token.oneDayVolumeUSD;\n      case CHART_LIQUIDITY:\n        return token.totalLiquidityUSD;\n      case CHART_PRICE:\n        return token.priceUSD;\n      default:\n        return;\n    }\n  }, [token, chartIndex]);\n\n  const currentPercent = useMemo(() => {\n    if (!token) return;\n    switch (chartIndex) {\n      case CHART_VOLUME:\n        return token.volumeChangeUSD;\n      case CHART_LIQUIDITY:\n        return token.liquidityChangeUSD;\n      case CHART_PRICE:\n        return token.priceChangeUSD;\n      default:\n        return;\n    }\n  }, [token, chartIndex]);\n\n  useEffect(() => {\n    async function fetchTokenChartData() {\n      updateTokenChartData(null);\n      const chartData = await getTokenChartData(\n        tokenAddress,\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\n          ? 0\n          : getChartStartTime(durationIndex),\n      );\n      if (chartData) {\n        const newChartData = getLimitedData(\n          chartData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        updateTokenChartData(newChartData);\n      }\n    }\n    fetchTokenChartData();\n  }, [updateTokenChartData, tokenAddress, durationIndex]);\n\n  const currentPercentClass = getPriceClass(Number(currentPercent));\n\n  return (\n    <>\n      <Box className='flex flex-wrap justify-between'>\n        <Box mt={1.5}>\n          <span>{chartIndexTexts[chartIndex]}</span>\n          <Box mt={1}>\n            {currentData && currentPercent ? (\n              <>\n                <Box className='flex items-center'>\n                  <h4>\n                    $\n                    {currentData > 100000\n                      ? formatCompact(currentData)\n                      : formatNumber(currentData)}\n                  </h4>\n                  <Box\n                    className={`priceChangeWrapper ${currentPercentClass}`}\n                    ml={1}\n                  >\n                    <small>{getFormattedPrice(Number(currentPercent))}%</small>\n                  </Box>\n                </Box>\n                <Box>\n                  <span>{dayjs().format('MMM DD, YYYY')}</span>\n                </Box>\n              </>\n            ) : (\n              <Skeleton variant='rect' width='120px' height='30px' />\n            )}\n          </Box>\n        </Box>\n        <Box className='flex flex-col items-end'>\n          <Box mt={1.5}>\n            <ChartType\n              chartTypes={chartIndexes}\n              typeTexts={chartIndexTexts}\n              chartType={chartIndex}\n              setChartType={setChartIndex}\n            />\n          </Box>\n          <Box mt={1.5}>\n            <ChartType\n              chartTypes={GlobalData.analytics.CHART_DURATIONS}\n              typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\n              chartType={durationIndex}\n              setChartType={setDurationIndex}\n            />\n          </Box>\n        </Box>\n      </Box>\n      <Box mt={2} width={1}>\n        {tokenChartData ? (\n          <AreaChart\n            data={chartData}\n            yAxisValues={getYAXISValuesAnalytics(chartData)}\n            dates={tokenChartData.map((value: any) => value.date)}\n            width='100%'\n            height={240}\n            categories={getChartDates(tokenChartData, durationIndex)}\n          />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={217} />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsTokenChart;\n"]},"metadata":{},"sourceType":"module"}