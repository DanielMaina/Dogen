{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.marshaller = void 0;\n\nconst utils_1 = require(\"@0x/utils\");\n\nconst ethereum_types_1 = require(\"ethereum-types\");\n\nconst ethUtil = require(\"ethereumjs-util\");\n\nconst _ = require(\"lodash\");\n\nconst utils_2 = require(\"./utils\");\n/**\n * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)\n */\n\n\nexports.marshaller = {\n  /**\n   * Unmarshall block without transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block without transaction data\n   */\n  unmarshalIntoBlockWithoutTransactionData(blockWithHexValues) {\n    const block = Object.assign(Object.assign({}, blockWithHexValues), {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty)\n    });\n    return block;\n  },\n\n  /**\n   * Unmarshall block with transaction data\n   * @param blockWithHexValues block to unmarshall\n   * @return unmarshalled block with transaction data\n   */\n  unmarshalIntoBlockWithTransactionData(blockWithHexValues) {\n    const block = Object.assign(Object.assign({}, blockWithHexValues), {\n      gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),\n      gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),\n      size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),\n      timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),\n      number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),\n      difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),\n      totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty),\n      transactions: []\n    });\n    block.transactions = _.map(blockWithHexValues.transactions, tx => {\n      const transaction = exports.marshaller.unmarshalTransaction(tx);\n      return transaction;\n    });\n    return block;\n  },\n\n  /**\n   * Unmarshall transaction\n   * @param txRpc transaction to unmarshall\n   * @return unmarshalled transaction\n   */\n  unmarshalTransaction(txRpc) {\n    const tx = Object.assign(Object.assign({}, txRpc), {\n      blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null,\n      transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null,\n      nonce: utils_2.utils.convertHexToNumber(txRpc.nonce),\n      gas: utils_2.utils.convertHexToNumber(txRpc.gas),\n      gasPrice: txRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice) : undefined,\n      maxFeePerGas: txRpc.maxFeePerGas !== undefined ? utils_2.utils.convertAmountToBigNumber(txRpc.maxFeePerGas) : undefined,\n      maxPriorityFeePerGas: txRpc.maxPriorityFeePerGas !== undefined ? utils_2.utils.convertAmountToBigNumber(txRpc.maxPriorityFeePerGas) : undefined,\n      value: utils_2.utils.convertAmountToBigNumber(txRpc.value)\n    });\n    return tx;\n  },\n\n  /**\n   * Unmarshall transaction receipt\n   * @param txReceiptRpc transaction receipt to unmarshall\n   * @return unmarshalled transaction receipt\n   */\n  unmarshalTransactionReceipt(txReceiptRpc) {\n    const txReceipt = Object.assign(Object.assign({}, txReceiptRpc), {\n      blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex),\n      cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed),\n      gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed),\n      logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller))\n    });\n    return txReceipt;\n  },\n\n  /**\n   * Unmarshall transaction data\n   * @param txDataRpc transaction data to unmarshall\n   * @return unmarshalled transaction data\n   */\n  unmarshalTxData(txDataRpc) {\n    if (txDataRpc.from === undefined) {\n      throw new Error(`txData must include valid 'from' value.`);\n    }\n\n    const txData = {\n      to: txDataRpc.to,\n      from: txDataRpc.from,\n      data: txDataRpc.data,\n      value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined,\n      gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined,\n      gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined,\n      maxFeePerGas: txDataRpc.maxFeePerGas !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.maxFeePerGas) : undefined,\n      maxPriorityFeePerGas: txDataRpc.maxPriorityFeePerGas !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.maxPriorityFeePerGas) : undefined,\n      nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined\n    };\n    return txData;\n  },\n\n  /**\n   * Marshall transaction data\n   * @param txData transaction data to marshall\n   * @return marshalled transaction data\n   */\n  marshalTxData(txData) {\n    if (txData.from === undefined) {\n      throw new Error(`txData must include valid 'from' value.`);\n    }\n\n    const callTxDataBase = Object.assign({}, txData);\n    delete callTxDataBase.from;\n\n    const callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n\n    const txDataRPC = Object.assign(Object.assign({}, callTxDataBaseRPC), {\n      from: exports.marshaller.marshalAddress(txData.from)\n    });\n    const prunableIfUndefined = ['gasPrice', 'maxFeePerGas', 'maxPriorityFeePerGas', 'gas', 'value', 'nonce'];\n\n    _.each(txDataRPC, (value, key) => {\n      if (value === undefined && _.includes(prunableIfUndefined, key)) {\n        delete txDataRPC[key];\n      }\n    });\n\n    return txDataRPC;\n  },\n\n  /**\n   * Marshall call data\n   * @param callData call data to marshall\n   * @return marshalled call data\n   */\n  marshalCallData(callData) {\n    const callTxDataBase = Object.assign({}, callData);\n    delete callTxDataBase.from;\n    delete callTxDataBase.overrides;\n\n    const callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n\n    const callDataRPC = Object.assign(Object.assign({}, callTxDataBaseRPC), {\n      from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from)\n    });\n    return callDataRPC;\n  },\n\n  /**\n   * Marshall call overrides parameter for for a geth eth_call.\n   * @param overrides overrides to marshal\n   * @return marshalled overrides\n   */\n  marshalCallOverrides(overrides) {\n    const marshalled = {};\n\n    for (const address in overrides) {\n      if (address) {\n        const override = overrides[address];\n        const marshalledAddress = exports.marshaller.marshalAddress(address);\n        const marshalledOverride = marshalled[marshalledAddress] = {};\n\n        if (override.code !== undefined) {\n          marshalledOverride.code = override.code;\n        }\n\n        if (override.nonce !== undefined) {\n          marshalledOverride.nonce = utils_2.utils.encodeAmountAsHexString(override.nonce);\n        }\n\n        if (override.balance !== undefined) {\n          marshalledOverride.balance = utils_2.utils.encodeAmountAsHexString(override.balance);\n        }\n\n        if (Object.keys(marshalledOverride).length === 0) {\n          delete marshalled[marshalledAddress];\n        }\n      }\n    }\n\n    return marshalled;\n  },\n\n  /**\n   * Marshall address\n   * @param address address to marshall\n   * @return marshalled address\n   */\n  marshalAddress(address) {\n    if (utils_1.addressUtils.isAddress(address)) {\n      return ethUtil.addHexPrefix(address);\n    }\n\n    throw new Error(`Invalid address encountered: ${address}`);\n  },\n\n  /**\n   * Marshall block param\n   * @param blockParam block param to marshall\n   * @return marshalled block param\n   */\n  marshalBlockParam(blockParam) {\n    if (blockParam === undefined) {\n      return ethereum_types_1.BlockParamLiteral.Latest;\n    }\n\n    const encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;\n    return encodedBlockParam;\n  },\n\n  /**\n   * Unmarshall log\n   * @param rawLog log to unmarshall\n   * @return unmarshalled log\n   */\n  unmarshalLog(rawLog) {\n    const formattedLog = Object.assign(Object.assign({}, rawLog), {\n      logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex),\n      blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber),\n      transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex)\n    });\n    return formattedLog;\n  },\n\n  _marshalCallTxDataBase(callTxDataBase) {\n    let accessList;\n\n    if (callTxDataBase.accessList && Object.keys(callTxDataBase.accessList).length) {\n      accessList = Object.entries(callTxDataBase.accessList).map(_ref => {\n        let [address, storageKeys] = _ref;\n        return {\n          address,\n          storageKeys\n        };\n      });\n    }\n\n    const callTxDataBaseRPC = {\n      data: callTxDataBase.data,\n      to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to),\n      gasPrice: callTxDataBase.gasPrice === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice),\n      maxFeePerGas: callTxDataBase.maxFeePerGas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.maxFeePerGas),\n      maxPriorityFeePerGas: callTxDataBase.maxPriorityFeePerGas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.maxPriorityFeePerGas),\n      gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas),\n      value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value),\n      nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce),\n      accessList\n    };\n    return callTxDataBaseRPC;\n  }\n\n};","map":{"version":3,"sources":["../../src/marshaller.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAcA,MAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAYA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;AAEG;;;AACU,OAAA,CAAA,UAAA,GAAa;AACtB;;;;AAIG;AACH,EAAA,wCAAwC,CACpC,kBADoC,EACc;AAElD,UAAM,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,kBADI,CAAA,EACc;AACrB,MAAA,QAAQ,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,QAA5C,CADW;AAErB,MAAA,OAAO,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,OAA5C,CAFY;AAGrB,MAAA,IAAI,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,IAA5C,CAHe;AAIrB,MAAA,SAAS,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,SAA5C,CAJU;AAKrB,MAAA,MAAM,EAAE,kBAAkB,CAAC,MAAnB,KAA8B,IAA9B,GAAqC,IAArC,GAA4C,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,MAA5C,CAL/B;AAMrB,MAAA,UAAU,EAAE,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,kBAAkB,CAAC,UAAlD,CANS;AAOrB,MAAA,eAAe,EAAE,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,kBAAkB,CAAC,eAAlD;AAPI,KADd,CAAX;AAUA,WAAO,KAAP;AACH,GApBqB;;AAqBtB;;;;AAIG;AACH,EAAA,qCAAqC,CAAC,kBAAD,EAAgD;AACjF,UAAM,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,kBADI,CAAA,EACc;AACrB,MAAA,QAAQ,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,QAA5C,CADW;AAErB,MAAA,OAAO,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,OAA5C,CAFY;AAGrB,MAAA,IAAI,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,IAA5C,CAHe;AAIrB,MAAA,SAAS,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,SAA5C,CAJU;AAKrB,MAAA,MAAM,EAAE,kBAAkB,CAAC,MAAnB,KAA8B,IAA9B,GAAqC,IAArC,GAA4C,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,kBAAkB,CAAC,MAA5C,CAL/B;AAMrB,MAAA,UAAU,EAAE,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,kBAAkB,CAAC,UAAlD,CANS;AAOrB,MAAA,eAAe,EAAE,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,kBAAkB,CAAC,eAAlD,CAPI;AAQrB,MAAA,YAAY,EAAE;AARO,KADd,CAAX;AAWA,IAAA,KAAK,CAAC,YAAN,GAAqB,CAAC,CAAC,GAAF,CAAM,kBAAkB,CAAC,YAAzB,EAAwC,EAAD,IAAuB;AAC/E,YAAM,WAAW,GAAG,OAAA,CAAA,UAAA,CAAW,oBAAX,CAAgC,EAAhC,CAApB;AACA,aAAO,WAAP;AACH,KAHoB,CAArB;AAIA,WAAO,KAAP;AACH,GA3CqB;;AA4CtB;;;;AAIG;AACH,EAAA,oBAAoB,CAAC,KAAD,EAAsB;AACtC,UAAM,EAAE,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,KADC,CAAA,EACI;AACR,MAAA,WAAW,EAAE,KAAK,CAAC,WAAN,KAAsB,IAAtB,GAA6B,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,KAAK,CAAC,WAA/B,CAA7B,GAA2E,IADhF;AAER,MAAA,gBAAgB,EAAE,KAAK,CAAC,gBAAN,KAA2B,IAA3B,GAAkC,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,KAAK,CAAC,gBAA/B,CAAlC,GAAqF,IAF/F;AAGR,MAAA,KAAK,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,KAAK,CAAC,KAA/B,CAHC;AAIR,MAAA,GAAG,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,KAAK,CAAC,GAA/B,CAJG;AAKR,MAAA,QAAQ,EAAE,KAAK,CAAC,QAAN,KAAmB,SAAnB,GAA+B,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,KAAK,CAAC,QAArC,CAA/B,GAAgF,SALlF;AAMR,MAAA,YAAY,EACR,KAAK,CAAC,YAAN,KAAuB,SAAvB,GAAmC,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,KAAK,CAAC,YAArC,CAAnC,GAAwF,SAPpF;AAQR,MAAA,oBAAoB,EAChB,KAAK,CAAC,oBAAN,KAA+B,SAA/B,GACM,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,KAAK,CAAC,oBAArC,CADN,GAEM,SAXF;AAYR,MAAA,KAAK,EAAE,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,KAAK,CAAC,KAArC;AAZC,KADJ,CAAR;AAeA,WAAO,EAAP;AACH,GAlEqB;;AAmEtB;;;;AAIG;AACH,EAAA,2BAA2B,CAAC,YAAD,EAAoC;AAC3D,UAAM,SAAS,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,YADQ,CAAA,EACI;AACf,MAAA,WAAW,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,YAAY,CAAC,WAAtC,CADE;AAEf,MAAA,gBAAgB,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,YAAY,CAAC,gBAAtC,CAFH;AAGf,MAAA,iBAAiB,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,YAAY,CAAC,iBAAtC,CAHJ;AAIf,MAAA,OAAO,EAAE,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,YAAY,CAAC,OAAtC,CAJM;AAKf,MAAA,IAAI,EAAE,CAAC,CAAC,GAAF,CAAM,YAAY,CAAC,IAAnB,EAAyB,OAAA,CAAA,UAAA,CAAW,YAAX,CAAwB,IAAxB,CAA6B,OAAA,CAAA,UAA7B,CAAzB;AALS,KADJ,CAAf;AAQA,WAAO,SAAP;AACH,GAlFqB;;AAmFtB;;;;AAIG;AACH,EAAA,eAAe,CAAC,SAAD,EAAqB;AAChC,QAAI,SAAS,CAAC,IAAV,KAAmB,SAAvB,EAAkC;AAC9B,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACH;;AACD,UAAM,MAAM,GAAG;AACX,MAAA,EAAE,EAAE,SAAS,CAAC,EADH;AAEX,MAAA,IAAI,EAAE,SAAS,CAAC,IAFL;AAGX,MAAA,IAAI,EAAE,SAAS,CAAC,IAHL;AAIX,MAAA,KAAK,EAAE,SAAS,CAAC,KAAV,KAAoB,SAApB,GAAgC,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,SAAS,CAAC,KAAzC,CAAhC,GAAkF,SAJ9E;AAKX,MAAA,GAAG,EAAE,SAAS,CAAC,GAAV,KAAkB,SAAlB,GAA8B,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,SAAS,CAAC,GAAnC,CAA9B,GAAwE,SALlE;AAMX,MAAA,QAAQ,EAAE,SAAS,CAAC,QAAV,KAAuB,SAAvB,GAAmC,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,SAAS,CAAC,QAAzC,CAAnC,GAAwF,SANvF;AAOX,MAAA,YAAY,EACR,SAAS,CAAC,YAAV,KAA2B,SAA3B,GACM,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,SAAS,CAAC,YAAzC,CADN,GAEM,SAVC;AAWX,MAAA,oBAAoB,EAChB,SAAS,CAAC,oBAAV,KAAmC,SAAnC,GACM,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,SAAS,CAAC,oBAAzC,CADN,GAEM,SAdC;AAeX,MAAA,KAAK,EAAE,SAAS,CAAC,KAAV,KAAoB,SAApB,GAAgC,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,SAAS,CAAC,KAAnC,CAAhC,GAA4E;AAfxE,KAAf;AAiBA,WAAO,MAAP;AACH,GA9GqB;;AA+GtB;;;;AAIG;AACH,EAAA,aAAa,CAAC,MAAD,EAAwB;AACjC,QAAI,MAAM,CAAC,IAAP,KAAgB,SAApB,EAA+B;AAC3B,YAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACH;;AACD,UAAM,cAAc,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,MADa,CAApB;AAGA,WAAO,cAAc,CAAC,IAAtB;;AACA,UAAM,iBAAiB,GAAG,OAAA,CAAA,UAAA,CAAW,sBAAX,CAAkC,cAAlC,CAA1B;;AACA,UAAM,SAAS,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,iBADQ,CAAA,EACS;AACpB,MAAA,IAAI,EAAE,OAAA,CAAA,UAAA,CAAW,cAAX,CAA0B,MAAM,CAAC,IAAjC;AADc,KADT,CAAf;AAIA,UAAM,mBAAmB,GAAG,CAAC,UAAD,EAAa,cAAb,EAA6B,sBAA7B,EAAqD,KAArD,EAA4D,OAA5D,EAAqE,OAArE,CAA5B;;AACA,IAAA,CAAC,CAAC,IAAF,CAAO,SAAP,EAAkB,CAAC,KAAD,EAAa,GAAb,KAA4B;AAC1C,UAAI,KAAK,KAAK,SAAV,IAAuB,CAAC,CAAC,QAAF,CAAW,mBAAX,EAAgC,GAAhC,CAA3B,EAAiE;AAC7D,eAAQ,SAAiB,CAAC,GAAD,CAAzB;AACH;AACJ,KAJD;;AAKA,WAAO,SAAP;AACH,GAxIqB;;AAyItB;;;;AAIG;AACH,EAAA,eAAe,CAAC,QAAD,EAA4B;AACvC,UAAM,cAAc,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,QADa,CAApB;AAGA,WAAO,cAAc,CAAC,IAAtB;AACA,WAAO,cAAc,CAAC,SAAtB;;AACA,UAAM,iBAAiB,GAAG,OAAA,CAAA,UAAA,CAAW,sBAAX,CAAkC,cAAlC,CAA1B;;AACA,UAAM,WAAW,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,iBADU,CAAA,EACO;AACpB,MAAA,IAAI,EAAE,QAAQ,CAAC,IAAT,KAAkB,SAAlB,GAA8B,SAA9B,GAA0C,OAAA,CAAA,UAAA,CAAW,cAAX,CAA0B,QAAQ,CAAC,IAAnC;AAD5B,KADP,CAAjB;AAIA,WAAO,WAAP;AACH,GA1JqB;;AA2JtB;;;;AAIG;AACH,EAAA,oBAAoB,CAAC,SAAD,EAA6B;AAC7C,UAAM,UAAU,GAAyB,EAAzC;;AACA,SAAK,MAAM,OAAX,IAAsB,SAAtB,EAAiC;AAC7B,UAAI,OAAJ,EAAa;AACT,cAAM,QAAQ,GAAG,SAAS,CAAC,OAAD,CAA1B;AACA,cAAM,iBAAiB,GAAG,OAAA,CAAA,UAAA,CAAW,cAAX,CAA0B,OAA1B,CAA1B;AACA,cAAM,kBAAkB,GAAsD,UAAU,CACpF,iBADoF,CAAV,GAE1E,EAFJ;;AAGA,YAAI,QAAQ,CAAC,IAAT,KAAkB,SAAtB,EAAiC;AAC7B,UAAA,kBAAkB,CAAC,IAAnB,GAA0B,QAAQ,CAAC,IAAnC;AACH;;AACD,YAAI,QAAQ,CAAC,KAAT,KAAmB,SAAvB,EAAkC;AAC9B,UAAA,kBAAkB,CAAC,KAAnB,GAA2B,OAAA,CAAA,KAAA,CAAM,uBAAN,CAA8B,QAAQ,CAAC,KAAvC,CAA3B;AACH;;AACD,YAAI,QAAQ,CAAC,OAAT,KAAqB,SAAzB,EAAoC;AAChC,UAAA,kBAAkB,CAAC,OAAnB,GAA6B,OAAA,CAAA,KAAA,CAAM,uBAAN,CAA8B,QAAQ,CAAC,OAAvC,CAA7B;AACH;;AACD,YAAI,MAAM,CAAC,IAAP,CAAY,kBAAZ,EAAgC,MAAhC,KAA2C,CAA/C,EAAkD;AAC9C,iBAAO,UAAU,CAAC,iBAAD,CAAjB;AACH;AACJ;AACJ;;AACD,WAAO,UAAP;AACH,GAxLqB;;AAyLtB;;;;AAIG;AACH,EAAA,cAAc,CAAC,OAAD,EAAgB;AAC1B,QAAI,OAAA,CAAA,YAAA,CAAa,SAAb,CAAuB,OAAvB,CAAJ,EAAqC;AACjC,aAAO,OAAO,CAAC,YAAR,CAAqB,OAArB,CAAP;AACH;;AACD,UAAM,IAAI,KAAJ,CAAU,gCAAgC,OAAO,EAAjD,CAAN;AACH,GAnMqB;;AAoMtB;;;;AAIG;AACH,EAAA,iBAAiB,CAAC,UAAD,EAAqD;AAClE,QAAI,UAAU,KAAK,SAAnB,EAA8B;AAC1B,aAAO,gBAAA,CAAA,iBAAA,CAAkB,MAAzB;AACH;;AACD,UAAM,iBAAiB,GAAG,CAAC,CAAC,QAAF,CAAW,UAAX,IAAyB,OAAA,CAAA,KAAA,CAAM,WAAN,CAAkB,UAAlB,CAAzB,GAAyD,UAAnF;AACA,WAAO,iBAAP;AACH,GA/MqB;;AAgNtB;;;;AAIG;AACH,EAAA,YAAY,CAAC,MAAD,EAAoB;AAC5B,UAAM,YAAY,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACX,MADW,CAAA,EACL;AACT,MAAA,QAAQ,EAAE,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,MAAM,CAAC,QAAtC,CADD;AAET,MAAA,WAAW,EAAE,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,MAAM,CAAC,WAAtC,CAFJ;AAGT,MAAA,gBAAgB,EAAE,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,MAAM,CAAC,gBAAtC;AAHT,KADK,CAAlB;AAMA,WAAO,YAAP;AACH,GA7NqB;;AA8NtB,EAAA,sBAAsB,CAAC,cAAD,EAAwC;AAC1D,QAAI,UAAJ;;AACA,QAAI,cAAc,CAAC,UAAf,IAA6B,MAAM,CAAC,IAAP,CAAY,cAAc,CAAC,UAA3B,EAAuC,MAAxE,EAAgF;AAC5E,MAAA,UAAU,GAAG,MAAM,CAAC,OAAP,CAAe,cAAc,CAAC,UAA9B,EAA0C,GAA1C,CAA8C;AAAA,YAAC,CAAC,OAAD,EAAU,WAAV,CAAD;AAAA,eAA6B;AACpF,UAAA,OADoF;AAEpF,UAAA;AAFoF,SAA7B;AAAA,OAA9C,CAAb;AAIH;;AACD,UAAM,iBAAiB,GAAG;AACtB,MAAA,IAAI,EAAE,cAAc,CAAC,IADC;AAEtB,MAAA,EAAE,EAAE,cAAc,CAAC,EAAf,KAAsB,SAAtB,GAAkC,SAAlC,GAA8C,OAAA,CAAA,UAAA,CAAW,cAAX,CAA0B,cAAc,CAAC,EAAzC,CAF5B;AAGtB,MAAA,QAAQ,EACJ,cAAc,CAAC,QAAf,KAA4B,SAA5B,GACM,SADN,GAEM,OAAA,CAAA,KAAA,CAAM,uBAAN,CAA8B,cAAc,CAAC,QAA7C,CANY;AAOtB,MAAA,YAAY,EACR,cAAc,CAAC,YAAf,KAAgC,SAAhC,GACM,SADN,GAEM,OAAA,CAAA,KAAA,CAAM,uBAAN,CAA8B,cAAc,CAAC,YAA7C,CAVY;AAWtB,MAAA,oBAAoB,EAChB,cAAc,CAAC,oBAAf,KAAwC,SAAxC,GACM,SADN,GAEM,OAAA,CAAA,KAAA,CAAM,uBAAN,CAA8B,cAAc,CAAC,oBAA7C,CAdY;AAetB,MAAA,GAAG,EAAE,cAAc,CAAC,GAAf,KAAuB,SAAvB,GAAmC,SAAnC,GAA+C,OAAA,CAAA,KAAA,CAAM,uBAAN,CAA8B,cAAc,CAAC,GAA7C,CAf9B;AAgBtB,MAAA,KAAK,EAAE,cAAc,CAAC,KAAf,KAAyB,SAAzB,GAAqC,SAArC,GAAiD,OAAA,CAAA,KAAA,CAAM,uBAAN,CAA8B,cAAc,CAAC,KAA7C,CAhBlC;AAiBtB,MAAA,KAAK,EAAE,cAAc,CAAC,KAAf,KAAyB,SAAzB,GAAqC,SAArC,GAAiD,OAAA,CAAA,KAAA,CAAM,uBAAN,CAA8B,cAAc,CAAC,KAA7C,CAjBlC;AAkBtB,MAAA;AAlBsB,KAA1B;AAoBA,WAAO,iBAAP;AACH;;AA3PqB,CAAb","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.marshaller = void 0;\nconst utils_1 = require(\"@0x/utils\");\nconst ethereum_types_1 = require(\"ethereum-types\");\nconst ethUtil = require(\"ethereumjs-util\");\nconst _ = require(\"lodash\");\nconst utils_2 = require(\"./utils\");\n/**\n * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)\n */\nexports.marshaller = {\n    /**\n     * Unmarshall block without transaction data\n     * @param blockWithHexValues block to unmarshall\n     * @return unmarshalled block without transaction data\n     */\n    unmarshalIntoBlockWithoutTransactionData(blockWithHexValues) {\n        const block = Object.assign(Object.assign({}, blockWithHexValues), { gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit), gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed), size: utils_2.utils.convertHexToNumber(blockWithHexValues.size), timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp), number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number), difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty), totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty) });\n        return block;\n    },\n    /**\n     * Unmarshall block with transaction data\n     * @param blockWithHexValues block to unmarshall\n     * @return unmarshalled block with transaction data\n     */\n    unmarshalIntoBlockWithTransactionData(blockWithHexValues) {\n        const block = Object.assign(Object.assign({}, blockWithHexValues), { gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit), gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed), size: utils_2.utils.convertHexToNumber(blockWithHexValues.size), timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp), number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number), difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty), totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty), transactions: [] });\n        block.transactions = _.map(blockWithHexValues.transactions, (tx) => {\n            const transaction = exports.marshaller.unmarshalTransaction(tx);\n            return transaction;\n        });\n        return block;\n    },\n    /**\n     * Unmarshall transaction\n     * @param txRpc transaction to unmarshall\n     * @return unmarshalled transaction\n     */\n    unmarshalTransaction(txRpc) {\n        const tx = Object.assign(Object.assign({}, txRpc), { blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null, transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null, nonce: utils_2.utils.convertHexToNumber(txRpc.nonce), gas: utils_2.utils.convertHexToNumber(txRpc.gas), gasPrice: txRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice) : undefined, maxFeePerGas: txRpc.maxFeePerGas !== undefined ? utils_2.utils.convertAmountToBigNumber(txRpc.maxFeePerGas) : undefined, maxPriorityFeePerGas: txRpc.maxPriorityFeePerGas !== undefined\n                ? utils_2.utils.convertAmountToBigNumber(txRpc.maxPriorityFeePerGas)\n                : undefined, value: utils_2.utils.convertAmountToBigNumber(txRpc.value) });\n        return tx;\n    },\n    /**\n     * Unmarshall transaction receipt\n     * @param txReceiptRpc transaction receipt to unmarshall\n     * @return unmarshalled transaction receipt\n     */\n    unmarshalTransactionReceipt(txReceiptRpc) {\n        const txReceipt = Object.assign(Object.assign({}, txReceiptRpc), { blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber), transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex), cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed), gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed), logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller)) });\n        return txReceipt;\n    },\n    /**\n     * Unmarshall transaction data\n     * @param txDataRpc transaction data to unmarshall\n     * @return unmarshalled transaction data\n     */\n    unmarshalTxData(txDataRpc) {\n        if (txDataRpc.from === undefined) {\n            throw new Error(`txData must include valid 'from' value.`);\n        }\n        const txData = {\n            to: txDataRpc.to,\n            from: txDataRpc.from,\n            data: txDataRpc.data,\n            value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined,\n            gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined,\n            gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined,\n            maxFeePerGas: txDataRpc.maxFeePerGas !== undefined\n                ? utils_2.utils.convertAmountToBigNumber(txDataRpc.maxFeePerGas)\n                : undefined,\n            maxPriorityFeePerGas: txDataRpc.maxPriorityFeePerGas !== undefined\n                ? utils_2.utils.convertAmountToBigNumber(txDataRpc.maxPriorityFeePerGas)\n                : undefined,\n            nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined,\n        };\n        return txData;\n    },\n    /**\n     * Marshall transaction data\n     * @param txData transaction data to marshall\n     * @return marshalled transaction data\n     */\n    marshalTxData(txData) {\n        if (txData.from === undefined) {\n            throw new Error(`txData must include valid 'from' value.`);\n        }\n        const callTxDataBase = Object.assign({}, txData);\n        delete callTxDataBase.from;\n        const callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n        const txDataRPC = Object.assign(Object.assign({}, callTxDataBaseRPC), { from: exports.marshaller.marshalAddress(txData.from) });\n        const prunableIfUndefined = ['gasPrice', 'maxFeePerGas', 'maxPriorityFeePerGas', 'gas', 'value', 'nonce'];\n        _.each(txDataRPC, (value, key) => {\n            if (value === undefined && _.includes(prunableIfUndefined, key)) {\n                delete txDataRPC[key];\n            }\n        });\n        return txDataRPC;\n    },\n    /**\n     * Marshall call data\n     * @param callData call data to marshall\n     * @return marshalled call data\n     */\n    marshalCallData(callData) {\n        const callTxDataBase = Object.assign({}, callData);\n        delete callTxDataBase.from;\n        delete callTxDataBase.overrides;\n        const callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);\n        const callDataRPC = Object.assign(Object.assign({}, callTxDataBaseRPC), { from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from) });\n        return callDataRPC;\n    },\n    /**\n     * Marshall call overrides parameter for for a geth eth_call.\n     * @param overrides overrides to marshal\n     * @return marshalled overrides\n     */\n    marshalCallOverrides(overrides) {\n        const marshalled = {};\n        for (const address in overrides) {\n            if (address) {\n                const override = overrides[address];\n                const marshalledAddress = exports.marshaller.marshalAddress(address);\n                const marshalledOverride = (marshalled[marshalledAddress] = {});\n                if (override.code !== undefined) {\n                    marshalledOverride.code = override.code;\n                }\n                if (override.nonce !== undefined) {\n                    marshalledOverride.nonce = utils_2.utils.encodeAmountAsHexString(override.nonce);\n                }\n                if (override.balance !== undefined) {\n                    marshalledOverride.balance = utils_2.utils.encodeAmountAsHexString(override.balance);\n                }\n                if (Object.keys(marshalledOverride).length === 0) {\n                    delete marshalled[marshalledAddress];\n                }\n            }\n        }\n        return marshalled;\n    },\n    /**\n     * Marshall address\n     * @param address address to marshall\n     * @return marshalled address\n     */\n    marshalAddress(address) {\n        if (utils_1.addressUtils.isAddress(address)) {\n            return ethUtil.addHexPrefix(address);\n        }\n        throw new Error(`Invalid address encountered: ${address}`);\n    },\n    /**\n     * Marshall block param\n     * @param blockParam block param to marshall\n     * @return marshalled block param\n     */\n    marshalBlockParam(blockParam) {\n        if (blockParam === undefined) {\n            return ethereum_types_1.BlockParamLiteral.Latest;\n        }\n        const encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;\n        return encodedBlockParam;\n    },\n    /**\n     * Unmarshall log\n     * @param rawLog log to unmarshall\n     * @return unmarshalled log\n     */\n    unmarshalLog(rawLog) {\n        const formattedLog = Object.assign(Object.assign({}, rawLog), { logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex), blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber), transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex) });\n        return formattedLog;\n    },\n    _marshalCallTxDataBase(callTxDataBase) {\n        let accessList;\n        if (callTxDataBase.accessList && Object.keys(callTxDataBase.accessList).length) {\n            accessList = Object.entries(callTxDataBase.accessList).map(([address, storageKeys]) => ({\n                address,\n                storageKeys,\n            }));\n        }\n        const callTxDataBaseRPC = {\n            data: callTxDataBase.data,\n            to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to),\n            gasPrice: callTxDataBase.gasPrice === undefined\n                ? undefined\n                : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice),\n            maxFeePerGas: callTxDataBase.maxFeePerGas === undefined\n                ? undefined\n                : utils_2.utils.encodeAmountAsHexString(callTxDataBase.maxFeePerGas),\n            maxPriorityFeePerGas: callTxDataBase.maxPriorityFeePerGas === undefined\n                ? undefined\n                : utils_2.utils.encodeAmountAsHexString(callTxDataBase.maxPriorityFeePerGas),\n            gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas),\n            value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value),\n            nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce),\n            accessList,\n        };\n        return callTxDataBaseRPC;\n    },\n};\n//# sourceMappingURL=marshaller.js.map"]},"metadata":{},"sourceType":"script"}