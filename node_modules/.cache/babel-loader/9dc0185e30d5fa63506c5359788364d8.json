{"ast":null,"code":"/* Sanitization Subprovider\n * For Parity compatibility\n * removes irregular keys\n */\nconst inherits = require('util').inherits;\n\nconst Subprovider = require('./subprovider.js');\n\nconst extend = require('xtend');\n\nconst ethUtil = require('ethereumjs-util');\n\nmodule.exports = SanitizerSubprovider;\ninherits(SanitizerSubprovider, Subprovider);\n\nfunction SanitizerSubprovider(opts) {\n  const self = this;\n}\n\nSanitizerSubprovider.prototype.handleRequest = function (payload, next, end) {\n  var txParams = payload.params[0];\n\n  if (typeof txParams === 'object' && !Array.isArray(txParams)) {\n    var sanitized = cloneTxParams(txParams);\n    payload.params[0] = sanitized;\n  }\n\n  next();\n}; // we use this to clean any custom params from the txParams\n\n\nvar permitted = ['from', 'to', 'value', 'data', 'gas', 'gasPrice', 'nonce', 'fromBlock', 'toBlock', 'address', 'topics'];\n\nfunction cloneTxParams(txParams) {\n  var sanitized = permitted.reduce(function (copy, permitted) {\n    if (permitted in txParams) {\n      if (Array.isArray(txParams[permitted])) {\n        copy[permitted] = txParams[permitted].map(function (item) {\n          return sanitize(item);\n        });\n      } else {\n        copy[permitted] = sanitize(txParams[permitted]);\n      }\n    }\n\n    return copy;\n  }, {});\n  return sanitized;\n}\n\nfunction sanitize(value) {\n  switch (value) {\n    case 'latest':\n      return value;\n\n    case 'pending':\n      return value;\n\n    case 'earliest':\n      return value;\n\n    default:\n      if (typeof value === 'string') {\n        return ethUtil.addHexPrefix(value.toLowerCase());\n      } else {\n        return value;\n      }\n\n  }\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/node_modules/@arkane-network/web3-provider-engine/subproviders/sanitizer.js"],"names":["inherits","require","Subprovider","extend","ethUtil","module","exports","SanitizerSubprovider","opts","self","prototype","handleRequest","payload","next","end","txParams","params","Array","isArray","sanitized","cloneTxParams","permitted","reduce","copy","map","item","sanitize","value","addHexPrefix","toLowerCase"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,QAAjC;;AACA,MAAME,WAAW,GAAGD,OAAO,CAAC,kBAAD,CAA3B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,OAAD,CAAtB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,iBAAD,CAAvB;;AAEAI,MAAM,CAACC,OAAP,GAAiBC,oBAAjB;AAEAP,QAAQ,CAACO,oBAAD,EAAuBL,WAAvB,CAAR;;AAEA,SAASK,oBAAT,CAA8BC,IAA9B,EAAmC;AACjC,QAAMC,IAAI,GAAG,IAAb;AACD;;AAEDF,oBAAoB,CAACG,SAArB,CAA+BC,aAA/B,GAA+C,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,GAAxB,EAA4B;AACzE,MAAIC,QAAQ,GAAGH,OAAO,CAACI,MAAR,CAAe,CAAf,CAAf;;AAEA,MAAI,OAAOD,QAAP,KAAoB,QAApB,IAAgC,CAACE,KAAK,CAACC,OAAN,CAAcH,QAAd,CAArC,EAA8D;AAC5D,QAAII,SAAS,GAAGC,aAAa,CAACL,QAAD,CAA7B;AACAH,IAAAA,OAAO,CAACI,MAAR,CAAe,CAAf,IAAoBG,SAApB;AACD;;AAEDN,EAAAA,IAAI;AACL,CATD,C,CAWA;;;AACA,IAAIQ,SAAS,GAAG,CACd,MADc,EAEd,IAFc,EAGd,OAHc,EAId,MAJc,EAKd,KALc,EAMd,UANc,EAOd,OAPc,EAQd,WARc,EASd,SATc,EAUd,SAVc,EAWd,QAXc,CAAhB;;AAcA,SAASD,aAAT,CAAuBL,QAAvB,EAAgC;AAC9B,MAAII,SAAS,GAAKE,SAAS,CAACC,MAAV,CAAiB,UAASC,IAAT,EAAeF,SAAf,EAA0B;AAC3D,QAAIA,SAAS,IAAIN,QAAjB,EAA2B;AACzB,UAAIE,KAAK,CAACC,OAAN,CAAcH,QAAQ,CAACM,SAAD,CAAtB,CAAJ,EAAwC;AACtCE,QAAAA,IAAI,CAACF,SAAD,CAAJ,GAAkBN,QAAQ,CAACM,SAAD,CAAR,CACjBG,GADiB,CACb,UAASC,IAAT,EAAe;AAClB,iBAAOC,QAAQ,CAACD,IAAD,CAAf;AACD,SAHiB,CAAlB;AAID,OALD,MAKO;AACLF,QAAAA,IAAI,CAACF,SAAD,CAAJ,GAAkBK,QAAQ,CAACX,QAAQ,CAACM,SAAD,CAAT,CAA1B;AACD;AACF;;AACD,WAAOE,IAAP;AACD,GAZiB,EAYf,EAZe,CAAlB;AAcA,SAAOJ,SAAP;AACD;;AAED,SAASO,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,UAAQA,KAAR;AACE,SAAK,QAAL;AACE,aAAOA,KAAP;;AACF,SAAK,SAAL;AACE,aAAOA,KAAP;;AACF,SAAK,UAAL;AACE,aAAOA,KAAP;;AACF;AACE,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAOvB,OAAO,CAACwB,YAAR,CAAqBD,KAAK,CAACE,WAAN,EAArB,CAAP;AACD,OAFD,MAEO;AACL,eAAOF,KAAP;AACD;;AAZL;AAcD","sourcesContent":["/* Sanitization Subprovider\n * For Parity compatibility\n * removes irregular keys\n */\n\nconst inherits = require('util').inherits\nconst Subprovider = require('./subprovider.js')\nconst extend = require('xtend')\nconst ethUtil = require('ethereumjs-util')\n\nmodule.exports = SanitizerSubprovider\n\ninherits(SanitizerSubprovider, Subprovider)\n\nfunction SanitizerSubprovider(opts){\n  const self = this\n}\n\nSanitizerSubprovider.prototype.handleRequest = function(payload, next, end){\n  var txParams = payload.params[0]\n\n  if (typeof txParams === 'object' && !Array.isArray(txParams)) {\n    var sanitized = cloneTxParams(txParams)\n    payload.params[0] = sanitized\n  }\n\n  next()\n}\n\n// we use this to clean any custom params from the txParams\nvar permitted = [\n  'from',\n  'to',\n  'value',\n  'data',\n  'gas',\n  'gasPrice',\n  'nonce',\n  'fromBlock',\n  'toBlock',\n  'address',\n  'topics',\n]\n\nfunction cloneTxParams(txParams){\n  var sanitized  =  permitted.reduce(function(copy, permitted) {\n    if (permitted in txParams) {\n      if (Array.isArray(txParams[permitted])) {\n        copy[permitted] = txParams[permitted]\n        .map(function(item) {\n          return sanitize(item)\n        })\n      } else {\n        copy[permitted] = sanitize(txParams[permitted])\n      }\n    }\n    return copy\n  }, {})\n\n  return sanitized\n}\n\nfunction sanitize(value) {\n  switch (value) {\n    case 'latest':\n      return value\n    case 'pending':\n      return value\n    case 'earliest':\n      return value\n    default:\n      if (typeof value === 'string') {\n        return ethUtil.addHexPrefix(value.toLowerCase())\n      } else {\n        return value\n      }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}