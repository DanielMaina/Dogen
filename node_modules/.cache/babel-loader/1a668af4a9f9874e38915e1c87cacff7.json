{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.utils = void 0;\n\nconst utils_1 = require(\"@0x/utils\");\n\nconst _ = require(\"lodash\");\n\nexports.utils = {\n  convertHexToNumber(value) {\n    const valueBigNumber = new utils_1.BigNumber(value);\n    const valueNumber = valueBigNumber.toNumber();\n    return valueNumber;\n  },\n\n  convertHexToNumberOrNull(hex) {\n    if (hex === null) {\n      return null;\n    }\n\n    const decimal = exports.utils.convertHexToNumber(hex);\n    return decimal;\n  },\n\n  convertAmountToBigNumber(value) {\n    const num = value || 0;\n    const isBigNumber = utils_1.BigNumber.isBigNumber(num);\n\n    if (isBigNumber) {\n      return num;\n    }\n\n    if (_.isString(num) && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) {\n      return new utils_1.BigNumber(num.replace('0x', ''), 16);\n    }\n\n    const baseTen = 10;\n    return new utils_1.BigNumber(num.toString(baseTen), baseTen);\n  },\n\n  encodeAmountAsHexString(value) {\n    const valueBigNumber = exports.utils.convertAmountToBigNumber(value);\n    const hexBase = 16;\n    const valueHex = valueBigNumber.toString(hexBase);\n    return valueBigNumber.isLessThan(0) ? `-0x${valueHex.substr(1)}` : `0x${valueHex}`;\n  },\n\n  numberToHex(value) {\n    if (!isFinite(value) && !exports.utils.isHexStrict(value)) {\n      throw new Error(`Given input ${value} is not a number.`);\n    }\n\n    const valueBigNumber = new utils_1.BigNumber(value);\n    const hexBase = 16;\n    const result = valueBigNumber.toString(hexBase);\n    return valueBigNumber.lt(0) ? `-0x${result.substr(1)}` : `0x${result}`;\n  },\n\n  isHexStrict(hex) {\n    return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(_.isNumber(hex) ? hex.toString() : hex);\n  }\n\n};","map":{"version":3,"sources":["../../src/utils.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEa,OAAA,CAAA,KAAA,GAAQ;AACjB,EAAA,kBAAkB,CAAC,KAAD,EAAc;AAC5B,UAAM,cAAc,GAAG,IAAI,OAAA,CAAA,SAAJ,CAAc,KAAd,CAAvB;AACA,UAAM,WAAW,GAAG,cAAc,CAAC,QAAf,EAApB;AACA,WAAO,WAAP;AACH,GALgB;;AAMjB,EAAA,wBAAwB,CAAC,GAAD,EAAmB;AACvC,QAAI,GAAG,KAAK,IAAZ,EAAkB;AACd,aAAO,IAAP;AACH;;AACD,UAAM,OAAO,GAAG,OAAA,CAAA,KAAA,CAAM,kBAAN,CAAyB,GAAzB,CAAhB;AACA,WAAO,OAAP;AACH,GAZgB;;AAajB,EAAA,wBAAwB,CAAC,KAAD,EAAmC;AACvD,UAAM,GAAG,GAAG,KAAK,IAAI,CAArB;AACA,UAAM,WAAW,GAAG,OAAA,CAAA,SAAA,CAAU,WAAV,CAAsB,GAAtB,CAApB;;AACA,QAAI,WAAJ,EAAiB;AACb,aAAO,GAAP;AACH;;AAED,QAAI,CAAC,CAAC,QAAF,CAAW,GAAX,MAAoB,GAAG,CAAC,OAAJ,CAAY,IAAZ,MAAsB,CAAtB,IAA2B,GAAG,CAAC,OAAJ,CAAY,KAAZ,MAAuB,CAAtE,CAAJ,EAA8E;AAC1E,aAAO,IAAI,OAAA,CAAA,SAAJ,CAAc,GAAG,CAAC,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAd,EAAqC,EAArC,CAAP;AACH;;AAED,UAAM,OAAO,GAAG,EAAhB;AACA,WAAO,IAAI,OAAA,CAAA,SAAJ,CAAe,GAAc,CAAC,QAAf,CAAwB,OAAxB,CAAf,EAAiD,OAAjD,CAAP;AACH,GA1BgB;;AA2BjB,EAAA,uBAAuB,CAAC,KAAD,EAAmC;AACtD,UAAM,cAAc,GAAG,OAAA,CAAA,KAAA,CAAM,wBAAN,CAA+B,KAA/B,CAAvB;AACA,UAAM,OAAO,GAAG,EAAhB;AACA,UAAM,QAAQ,GAAG,cAAc,CAAC,QAAf,CAAwB,OAAxB,CAAjB;AAEA,WAAO,cAAc,CAAC,UAAf,CAA0B,CAA1B,IAA+B,MAAM,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAkB,EAAvD,GAA4D,KAAK,QAAQ,EAAhF;AACH,GAjCgB;;AAkCjB,EAAA,WAAW,CAAC,KAAD,EAAc;AACrB,QAAI,CAAC,QAAQ,CAAC,KAAD,CAAT,IAAoB,CAAC,OAAA,CAAA,KAAA,CAAM,WAAN,CAAkB,KAAlB,CAAzB,EAAmD;AAC/C,YAAM,IAAI,KAAJ,CAAU,eAAe,KAAK,mBAA9B,CAAN;AACH;;AAED,UAAM,cAAc,GAAG,IAAI,OAAA,CAAA,SAAJ,CAAc,KAAd,CAAvB;AACA,UAAM,OAAO,GAAG,EAAhB;AACA,UAAM,MAAM,GAAG,cAAc,CAAC,QAAf,CAAwB,OAAxB,CAAf;AAEA,WAAO,cAAc,CAAC,EAAf,CAAkB,CAAlB,IAAuB,MAAM,MAAM,CAAC,MAAP,CAAc,CAAd,CAAgB,EAA7C,GAAkD,KAAK,MAAM,EAApE;AACH,GA5CgB;;AA6CjB,EAAA,WAAW,CAAC,GAAD,EAAqB;AAC5B,WACI,CAAC,CAAC,CAAC,QAAF,CAAW,GAAX,KAAmB,CAAC,CAAC,QAAF,CAAW,GAAX,CAApB,KAAwC,qBAAqB,IAArB,CAA0B,CAAC,CAAC,QAAF,CAAW,GAAX,IAAkB,GAAG,CAAC,QAAJ,EAAlB,GAAmC,GAA7D,CAD5C;AAGH;;AAjDgB,CAAR","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utils = void 0;\nconst utils_1 = require(\"@0x/utils\");\nconst _ = require(\"lodash\");\nexports.utils = {\n    convertHexToNumber(value) {\n        const valueBigNumber = new utils_1.BigNumber(value);\n        const valueNumber = valueBigNumber.toNumber();\n        return valueNumber;\n    },\n    convertHexToNumberOrNull(hex) {\n        if (hex === null) {\n            return null;\n        }\n        const decimal = exports.utils.convertHexToNumber(hex);\n        return decimal;\n    },\n    convertAmountToBigNumber(value) {\n        const num = value || 0;\n        const isBigNumber = utils_1.BigNumber.isBigNumber(num);\n        if (isBigNumber) {\n            return num;\n        }\n        if (_.isString(num) && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) {\n            return new utils_1.BigNumber(num.replace('0x', ''), 16);\n        }\n        const baseTen = 10;\n        return new utils_1.BigNumber(num.toString(baseTen), baseTen);\n    },\n    encodeAmountAsHexString(value) {\n        const valueBigNumber = exports.utils.convertAmountToBigNumber(value);\n        const hexBase = 16;\n        const valueHex = valueBigNumber.toString(hexBase);\n        return valueBigNumber.isLessThan(0) ? `-0x${valueHex.substr(1)}` : `0x${valueHex}`;\n    },\n    numberToHex(value) {\n        if (!isFinite(value) && !exports.utils.isHexStrict(value)) {\n            throw new Error(`Given input ${value} is not a number.`);\n        }\n        const valueBigNumber = new utils_1.BigNumber(value);\n        const hexBase = 16;\n        const result = valueBigNumber.toString(hexBase);\n        return valueBigNumber.lt(0) ? `-0x${result.substr(1)}` : `0x${result}`;\n    },\n    isHexStrict(hex) {\n        return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(_.isNumber(hex) ? hex.toString() : hex));\n    },\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}