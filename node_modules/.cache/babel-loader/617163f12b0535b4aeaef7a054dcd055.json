{"ast":null,"code":"var _process$env$REACT_AP;\n\nimport { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletLinkConnector } from './WalletLink';\nimport { PortisConnector } from './Portis';\nimport { FortmaticConnector } from './Fortmatic';\nimport { ArkaneConnector } from './Arkane';\nimport { NetworkConnector } from './NetworkConnector';\nimport { SafeAppConnector } from './SafeApp';\nconst POLLING_INTERVAL = 12000;\nconst NETWORK_URL = 'https://rpc-sg.dogechain.dog/'; // const FORMATIC_KEY = 'pk_live_F937DF033A1666BF'\n// const PORTIS_ID = 'c0e2bf01-4b08-4fd5-ac7b-8e26b58cd236'\n\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY;\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID;\nexport const NETWORK_CHAIN_ID = parseInt((_process$env$REACT_AP = process.env.REACT_APP_CHAIN_ID) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : '1');\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\n}\n\nexport const network = new NetworkConnector({\n  urls: {\n    [Number('2000')]: NETWORK_URL\n  }\n});\nlet networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport const injected = new InjectedConnector({\n  supportedChainIds: [2000]\n});\nexport const safeApp = new SafeAppConnector(); // mainnet only\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    2000: NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true\n}); // mainnet only\n\nexport const arkaneconnect = new ArkaneConnector({\n  clientID: 'QuickSwap',\n  chainId: 2000\n}); // mainnet only\n\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY !== null && FORMATIC_KEY !== void 0 ? FORMATIC_KEY : '',\n  chainId: 2000\n}); // mainnet only\n\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID !== null && PORTIS_ID !== void 0 ? PORTIS_ID : '',\n  networks: [2000],\n  config: {\n    nodeUrl: NETWORK_URL,\n    chainId: 2000\n  }\n}); // mainnet only\n\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl: 'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg',\n  supportedChainIds: [2000]\n});\nexport const ledger = new LedgerConnector({\n  chainId: 2000,\n  url: NETWORK_URL,\n  pollingInterval: POLLING_INTERVAL\n});","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/connectors/index.ts"],"names":["Web3Provider","InjectedConnector","WalletConnectConnector","LedgerConnector","WalletLinkConnector","PortisConnector","FortmaticConnector","ArkaneConnector","NetworkConnector","SafeAppConnector","POLLING_INTERVAL","NETWORK_URL","FORMATIC_KEY","process","env","REACT_APP_FORTMATIC_KEY","PORTIS_ID","REACT_APP_PORTIS_ID","NETWORK_CHAIN_ID","parseInt","REACT_APP_CHAIN_ID","Error","network","urls","Number","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","safeApp","walletconnect","rpc","bridge","qrcode","arkaneconnect","clientID","chainId","fortmatic","apiKey","portis","dAppId","networks","config","nodeUrl","walletlink","url","appName","appLogoUrl","ledger","pollingInterval"],"mappings":"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","sourcesContent":["import { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { LedgerConnector } from '@web3-react/ledger-connector';\nimport { WalletLinkConnector } from './WalletLink';\nimport { PortisConnector } from './Portis';\n\nimport { FortmaticConnector } from './Fortmatic';\nimport { ArkaneConnector } from './Arkane';\nimport { NetworkConnector } from './NetworkConnector';\nimport { SafeAppConnector } from './SafeApp';\n\nconst POLLING_INTERVAL = 12000;\n\nconst NETWORK_URL = 'https://rpc-sg.dogechain.dog/';\n// const FORMATIC_KEY = 'pk_live_F937DF033A1666BF'\n// const PORTIS_ID = 'c0e2bf01-4b08-4fd5-ac7b-8e26b58cd236'\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY;\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID;\n\nexport const NETWORK_CHAIN_ID: number = parseInt(\n  process.env.REACT_APP_CHAIN_ID ?? '1',\n);\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(\n    `REACT_APP_NETWORK_URL must be a defined environment variable`,\n  );\n}\n\nexport const network = new NetworkConnector({\n  urls: { [Number('2000')]: NETWORK_URL },\n});\n\nlet networkLibrary: Web3Provider | undefined;\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary =\n    networkLibrary ?? new Web3Provider(network.provider as any));\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [2000],\n});\n\nexport const safeApp = new SafeAppConnector();\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 2000: NETWORK_URL },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n});\n\n// mainnet only\nexport const arkaneconnect = new ArkaneConnector({\n  clientID: 'QuickSwap',\n  chainId: 2000,\n});\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY ?? '',\n  chainId: 2000,\n});\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID ?? '',\n  networks: [2000],\n  config: {\n    nodeUrl: NETWORK_URL,\n    chainId: 2000,\n  },\n});\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl:\n    'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg',\n  supportedChainIds: [2000],\n});\n\nexport const ledger = new LedgerConnector({\n  chainId: 2000,\n  url: NETWORK_URL,\n  pollingInterval: POLLING_INTERVAL,\n});\n"]},"metadata":{},"sourceType":"module"}