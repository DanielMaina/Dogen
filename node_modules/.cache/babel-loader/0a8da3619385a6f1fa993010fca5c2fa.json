{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { JSBI, Percent, TokenAmount } from '@uniswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePair } from 'data/Reserves';\nimport { useTotalSupply } from 'data/TotalSupply';\nimport { useActiveWeb3React } from 'hooks';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { tryParseAmount } from 'state/swap/hooks';\nimport { useTokenBalances } from 'state/wallet/hooks';\nimport { Field, typeInput } from './actions';\nexport function useBurnState() {\n  _s();\n\n  return useSelector(state => state.burn);\n}\n\n_s(useBurnState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useDerivedBurnInfo(currencyA, currencyB) {\n  _s2();\n\n  var _pair$liquidityToken$, _pair$liquidityToken;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue\n  } = useBurnState(); // pair + totalsupply\n\n  const [, pair] = usePair(currencyA, currencyB); // balances\n\n  const relevantTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, [pair === null || pair === void 0 ? void 0 : pair.liquidityToken]);\n  const userLiquidity = relevantTokenBalances === null || relevantTokenBalances === void 0 ? void 0 : relevantTokenBalances[(_pair$liquidityToken$ = pair === null || pair === void 0 ? void 0 : (_pair$liquidityToken = pair.liquidityToken) === null || _pair$liquidityToken === void 0 ? void 0 : _pair$liquidityToken.address) !== null && _pair$liquidityToken$ !== void 0 ? _pair$liquidityToken$ : ''];\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n  }; // liquidity values\n\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const liquidityValueA = pair && totalSupply && userLiquidity && tokenA && // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValueB = pair && totalSupply && userLiquidity && tokenB && // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValues = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  };\n  let percentToRemove = new Percent('0', '100'); // user specified a %\n\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  } // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair !== null && pair !== void 0 && pair.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\n      }\n    }\n  } // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField]);\n      const liquidityValue = liquidityValues[independentField];\n\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw);\n      }\n    }\n  }\n\n  const parsedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: userLiquidity && percentToRemove && percentToRemove.greaterThan('0') ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient) : undefined,\n    [Field.CURRENCY_A]: tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient) : undefined,\n    [Field.CURRENCY_B]: tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient) : undefined\n  };\n  let error;\n\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : 'Enter an amount';\n  }\n\n  return {\n    pair,\n    parsedAmounts,\n    error\n  };\n}\n\n_s2(useDerivedBurnInfo, \"nXDzgAsCiVcRk2K4cCNCtktw7eI=\", false, function () {\n  return [useActiveWeb3React, useBurnState, usePair, useTokenBalances, useTotalSupply];\n});\n\nexport function useBurnActionHandlers() {\n  _s3();\n\n  const dispatch = useDispatch();\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  return {\n    onUserInput\n  };\n}\n\n_s3(useBurnActionHandlers, \"lEPT7YuAO+/A5u9H2YSu9Ik8G/0=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/burn/hooks.ts"],"names":["JSBI","Percent","TokenAmount","useCallback","useDispatch","useSelector","usePair","useTotalSupply","useActiveWeb3React","wrappedCurrency","tryParseAmount","useTokenBalances","Field","typeInput","useBurnState","state","burn","useDerivedBurnInfo","currencyA","currencyB","account","chainId","independentField","typedValue","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","tokenA","tokenB","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","raw","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","token","multiply","quotient","error","useBurnActionHandlers","dispatch","onUserInput","field"],"mappings":"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","sourcesContent":["import {\n  Currency,\n  CurrencyAmount,\n  JSBI,\n  Pair,\n  Percent,\n  TokenAmount,\n} from '@uniswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePair } from 'data/Reserves';\nimport { useTotalSupply } from 'data/TotalSupply';\nimport { useActiveWeb3React } from 'hooks';\nimport { AppDispatch, AppState } from 'state';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { tryParseAmount } from 'state/swap/hooks';\nimport { useTokenBalances } from 'state/wallet/hooks';\nimport { Field, typeInput } from './actions';\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>((state) => state.burn);\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  pair?: Pair | null;\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent;\n    [Field.LIQUIDITY]?: TokenAmount;\n    [Field.CURRENCY_A]?: CurrencyAmount;\n    [Field.CURRENCY_B]?: CurrencyAmount;\n  };\n  error?: string;\n} {\n  const { account, chainId } = useActiveWeb3React();\n\n  const { independentField, typedValue } = useBurnState();\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB);\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [\n    pair?.liquidityToken,\n  ]);\n  const userLiquidity: undefined | TokenAmount =\n    relevantTokenBalances?.[pair?.liquidityToken?.address ?? ''];\n\n  const [tokenA, tokenB] = [\n    wrappedCurrency(currencyA, chainId),\n    wrappedCurrency(currencyB, chainId),\n  ];\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  };\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken);\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(\n          tokenA,\n          pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw,\n        )\n      : undefined;\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(\n          tokenB,\n          pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw,\n        )\n      : undefined;\n  const liquidityValues: {\n    [Field.CURRENCY_A]?: TokenAmount;\n    [Field.CURRENCY_B]?: TokenAmount;\n  } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  };\n\n  let percentToRemove: Percent = new Percent('0', '100');\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n      if (\n        independentAmount &&\n        userLiquidity &&\n        !independentAmount.greaterThan(userLiquidity)\n      ) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(\n        typedValue,\n        tokens[independentField],\n      );\n      const liquidityValue = liquidityValues[independentField];\n      if (\n        independentAmount &&\n        liquidityValue &&\n        !independentAmount.greaterThan(liquidityValue)\n      ) {\n        percentToRemove = new Percent(\n          independentAmount.raw,\n          liquidityValue.raw,\n        );\n      }\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent;\n    [Field.LIQUIDITY]?: TokenAmount;\n    [Field.CURRENCY_A]?: TokenAmount;\n    [Field.CURRENCY_B]?: TokenAmount;\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? new TokenAmount(\n            userLiquidity.token,\n            percentToRemove.multiply(userLiquidity.raw).quotient,\n          )\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA &&\n      percentToRemove &&\n      percentToRemove.greaterThan('0') &&\n      liquidityValueA\n        ? new TokenAmount(\n            tokenA,\n            percentToRemove.multiply(liquidityValueA.raw).quotient,\n          )\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB &&\n      percentToRemove &&\n      percentToRemove.greaterThan('0') &&\n      liquidityValueB\n        ? new TokenAmount(\n            tokenB,\n            percentToRemove.multiply(liquidityValueB.raw).quotient,\n          )\n        : undefined,\n  };\n\n  let error: string | undefined;\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n\n  if (\n    !parsedAmounts[Field.LIQUIDITY] ||\n    !parsedAmounts[Field.CURRENCY_A] ||\n    !parsedAmounts[Field.CURRENCY_B]\n  ) {\n    error = error ?? 'Enter an amount';\n  }\n\n  return { pair, parsedAmounts, error };\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void;\n} {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }));\n    },\n    [dispatch],\n  );\n\n  return {\n    onUserInput,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}