{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/ConfirmSwapModal/SwapModalHeader.tsx\",\n    _s = $RefreshSig$();\n\nimport { TradeType } from '@uniswap/sdk';\nimport React, { useMemo } from 'react';\nimport { AlertTriangle } from 'react-feather';\nimport { Box, Button } from '@material-ui/core';\nimport { Field } from 'state/swap/actions';\nimport { DoubleCurrencyLogo } from 'components';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport { computeSlippageAdjustedAmounts } from 'utils/prices';\nimport { ReactComponent as ArrowDownIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/ArrowDownIcon.svg\";\nimport { formatTokenAmount } from 'utils';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SwapModalHeader = _ref => {\n  _s();\n\n  let {\n    trade,\n    allowedSlippage,\n    showAcceptChanges,\n    onAcceptChanges,\n    onConfirm\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const slippageAdjustedAmounts = useMemo(() => computeSlippageAdjustedAmounts(trade, allowedSlippage), [trade, allowedSlippage]);\n  const usdPrice = useUSDCPrice(trade.inputAmount.currency);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      mt: 10,\n      className: \"flex justify-center\",\n      children: /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n        currency0: trade.inputAmount.currency,\n        currency1: trade.outputAmount.currency,\n        size: 48\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"swapContent\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [t('swap'), \" \", formatTokenAmount(trade.inputAmount), ' ', trade.inputAmount.currency.symbol, \" ($\", Number(usdPrice === null || usdPrice === void 0 ? void 0 : usdPrice.toSignificant()) * Number(trade.inputAmount.toSignificant(2)), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [formatTokenAmount(trade.outputAmount), ' ', trade.outputAmount.currency.symbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), showAcceptChanges && /*#__PURE__*/_jsxDEV(Box, {\n      className: \"priceUpdate\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(AlertTriangle, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: t('priceUpdated')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onAcceptChanges,\n        children: t('accept')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"transactionText\",\n      children: [trade.tradeType === TradeType.EXACT_INPUT ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"small\",\n        children: t('outputEstimated1', {\n          amount: formatTokenAmount(slippageAdjustedAmounts[Field.OUTPUT]),\n          symbol: trade.outputAmount.currency.symbol\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"small\",\n        children: t('inputEstimated', {\n          amount: formatTokenAmount(slippageAdjustedAmounts[Field.INPUT]),\n          symbol: trade.inputAmount.currency.symbol\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onConfirm,\n        className: \"swapButton\",\n        children: t('confirmSwap')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SwapModalHeader, \"ZUpTfTYdKF85yGupHQRoVgJuK9M=\", false, function () {\n  return [useTranslation, useUSDCPrice];\n});\n\n_c = SwapModalHeader;\nexport default SwapModalHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwapModalHeader\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/ConfirmSwapModal/SwapModalHeader.tsx"],"names":["TradeType","React","useMemo","AlertTriangle","Box","Button","Field","DoubleCurrencyLogo","useUSDCPrice","computeSlippageAdjustedAmounts","formatTokenAmount","useTranslation","SwapModalHeader","trade","allowedSlippage","showAcceptChanges","onAcceptChanges","onConfirm","t","slippageAdjustedAmounts","usdPrice","inputAmount","currency","outputAmount","symbol","Number","toSignificant","tradeType","EXACT_INPUT","amount","OUTPUT","INPUT"],"mappings":"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","sourcesContent":["import { Trade, TradeType } from '@uniswap/sdk';\nimport React, { useMemo } from 'react';\nimport { AlertTriangle } from 'react-feather';\nimport { Box, Button } from '@material-ui/core';\nimport { Field } from 'state/swap/actions';\nimport { DoubleCurrencyLogo } from 'components';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport { computeSlippageAdjustedAmounts } from 'utils/prices';\nimport { ReactComponent as ArrowDownIcon } from 'assets/images/ArrowDownIcon.svg';\nimport { formatTokenAmount } from 'utils';\nimport { useTranslation } from 'react-i18next';\n\ninterface SwapModalHeaderProps {\n  trade: Trade;\n  allowedSlippage: number;\n  showAcceptChanges: boolean;\n  onAcceptChanges: () => void;\n  onConfirm: () => void;\n}\n\nconst SwapModalHeader: React.FC<SwapModalHeaderProps> = ({\n  trade,\n  allowedSlippage,\n  showAcceptChanges,\n  onAcceptChanges,\n  onConfirm,\n}) => {\n  const { t } = useTranslation();\n  const slippageAdjustedAmounts = useMemo(\n    () => computeSlippageAdjustedAmounts(trade, allowedSlippage),\n    [trade, allowedSlippage],\n  );\n  const usdPrice = useUSDCPrice(trade.inputAmount.currency);\n\n  return (\n    <Box>\n      <Box mt={10} className='flex justify-center'>\n        <DoubleCurrencyLogo\n          currency0={trade.inputAmount.currency}\n          currency1={trade.outputAmount.currency}\n          size={48}\n        />\n      </Box>\n      <Box className='swapContent'>\n        <p>\n          {t('swap')} {formatTokenAmount(trade.inputAmount)}{' '}\n          {trade.inputAmount.currency.symbol} ($\n          {Number(usdPrice?.toSignificant()) *\n            Number(trade.inputAmount.toSignificant(2))}\n          )\n        </p>\n        <ArrowDownIcon />\n        <p>\n          {formatTokenAmount(trade.outputAmount)}{' '}\n          {trade.outputAmount.currency.symbol}\n        </p>\n      </Box>\n      {showAcceptChanges && (\n        <Box className='priceUpdate'>\n          <Box>\n            <AlertTriangle size={20} />\n            <p>{t('priceUpdated')}</p>\n          </Box>\n          <Button onClick={onAcceptChanges}>{t('accept')}</Button>\n        </Box>\n      )}\n      <Box className='transactionText'>\n        {trade.tradeType === TradeType.EXACT_INPUT ? (\n          <p className='small'>\n            {t('outputEstimated1', {\n              amount: formatTokenAmount(slippageAdjustedAmounts[Field.OUTPUT]),\n              symbol: trade.outputAmount.currency.symbol,\n            })}\n          </p>\n        ) : (\n          <p className='small'>\n            {t('inputEstimated', {\n              amount: formatTokenAmount(slippageAdjustedAmounts[Field.INPUT]),\n              symbol: trade.inputAmount.currency.symbol,\n            })}\n          </p>\n        )}\n        <Button onClick={onConfirm} className='swapButton'>\n          {t('confirmSwap')}\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default SwapModalHeader;\n"]},"metadata":{},"sourceType":"module"}