{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/AnalyticsPage/AnalyticsLiquidityChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { Box } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { useGlobalData } from 'state/application/hooks';\nimport { formatCompact, getChartData, getPriceClass, getChartDates, getChartStartTime, getLimitedData } from 'utils';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { AreaChart, ChartType } from 'components';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ndayjs.extend(utc);\n\nconst AnalyticsLiquidityChart = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    globalData\n  } = useGlobalData();\n  const [durationIndex, setDurationIndex] = useState(GlobalConst.analyticChart.ONE_MONTH_CHART);\n  const [globalChartData, updateGlobalChartData] = useState(null);\n  useEffect(() => {\n    const fetchChartData = async () => {\n      updateGlobalChartData(null);\n      const [newChartData] = await getChartData(durationIndex === GlobalConst.analyticChart.ALL_CHART ? 0 : getChartStartTime(durationIndex));\n\n      if (newChartData) {\n        const chartData = getLimitedData(newChartData, GlobalConst.analyticChart.CHART_COUNT);\n        updateGlobalChartData(chartData);\n      }\n    };\n\n    fetchChartData();\n  }, [updateGlobalChartData, durationIndex]);\n  const liquidityPercentClass = getPriceClass(globalData ? Number(globalData.liquidityChangeUSD) : 0);\n  const yAxisValues = useMemo(() => {\n    if (globalChartData) {\n      const dailyVolumes = globalChartData.map(value => Number(value.totalLiquidityUSD)); // this is for defining the scale for the liquidity values to present in graph. Liquidity values are more than 100M so set the min and max amount with rounding after dividing into 20000000 to show all liquidity values into the graph\n\n      const minVolume = Math.floor(Math.min(...dailyVolumes) / 20000000) * 20000000;\n      const maxVolume = Math.ceil(Math.max(...dailyVolumes) / 20000000) * 20000000;\n      const values = []; // show 10 values in the y axis of the graph\n\n      const step = (maxVolume - minVolume) / 10;\n\n      for (let i = maxVolume; i >= minVolume; i -= step) {\n        values.push(i);\n      }\n\n      return values;\n    } else {\n      return undefined;\n    }\n  }, [globalChartData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"flex justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-disabled text-bold text-uppercase\",\n        children: t('liquidity')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartType, {\n        typeTexts: GlobalData.analytics.CHART_DURATION_TEXTS,\n        chartTypes: GlobalData.analytics.CHART_DURATIONS,\n        chartType: durationIndex,\n        setChartType: setDurationIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), globalData ? /*#__PURE__*/_jsxDEV(Box, {\n      mt: 0.5,\n      className: \"flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"$\", formatCompact(globalData.totalLiquidityUSD)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        ml: 1,\n        height: 23,\n        px: 1,\n        borderRadius: 40,\n        className: liquidityPercentClass,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [`${globalData.liquidityChangeUSD > 0 ? '+' : ''}\n                      ${globalData.liquidityChangeUSD.toLocaleString()}`, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      my: 0.5,\n      children: /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rect\",\n        width: \"100%\",\n        height: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-disabled\",\n        children: dayjs.utc().format('MMM DD, YYYY')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      children: globalChartData ? /*#__PURE__*/_jsxDEV(AreaChart, {\n        data: globalChartData.map(value => Number(value.totalLiquidityUSD)),\n        yAxisValues: yAxisValues,\n        dates: globalChartData.map(value => value.date),\n        width: \"100%\",\n        height: 250,\n        categories: getChartDates(globalChartData, durationIndex)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rect\",\n        width: \"100%\",\n        height: 223\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AnalyticsLiquidityChart, \"KW4MKy76DSx+H0oqTDvdU/xfxBA=\", false, function () {\n  return [useTranslation, useGlobalData];\n});\n\n_c = AnalyticsLiquidityChart;\nexport default AnalyticsLiquidityChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnalyticsLiquidityChart\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/AnalyticsPage/AnalyticsLiquidityChart.tsx"],"names":["React","useEffect","useState","useMemo","Box","Skeleton","dayjs","utc","useGlobalData","formatCompact","getChartData","getPriceClass","getChartDates","getChartStartTime","getLimitedData","GlobalConst","GlobalData","AreaChart","ChartType","useTranslation","extend","AnalyticsLiquidityChart","t","globalData","durationIndex","setDurationIndex","analyticChart","ONE_MONTH_CHART","globalChartData","updateGlobalChartData","fetchChartData","newChartData","ALL_CHART","chartData","CHART_COUNT","liquidityPercentClass","Number","liquidityChangeUSD","yAxisValues","dailyVolumes","map","value","totalLiquidityUSD","minVolume","Math","floor","min","maxVolume","ceil","max","values","step","i","push","undefined","analytics","CHART_DURATION_TEXTS","CHART_DURATIONS","toLocaleString","format","date"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\nimport { Box } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { useGlobalData } from 'state/application/hooks';\nimport {\n  formatCompact,\n  getChartData,\n  getPriceClass,\n  getChartDates,\n  getChartStartTime,\n  getLimitedData,\n} from 'utils';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { AreaChart, ChartType } from 'components';\nimport { useTranslation } from 'react-i18next';\ndayjs.extend(utc);\n\nconst AnalyticsLiquidityChart: React.FC = () => {\n  const { t } = useTranslation();\n  const { globalData } = useGlobalData();\n  const [durationIndex, setDurationIndex] = useState(\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\n  );\n  const [globalChartData, updateGlobalChartData] = useState<any[] | null>(null);\n\n  useEffect(() => {\n    const fetchChartData = async () => {\n      updateGlobalChartData(null);\n      const [newChartData] = await getChartData(\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\n          ? 0\n          : getChartStartTime(durationIndex),\n      );\n      if (newChartData) {\n        const chartData = getLimitedData(\n          newChartData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        updateGlobalChartData(chartData);\n      }\n    };\n    fetchChartData();\n  }, [updateGlobalChartData, durationIndex]);\n\n  const liquidityPercentClass = getPriceClass(\n    globalData ? Number(globalData.liquidityChangeUSD) : 0,\n  );\n\n  const yAxisValues = useMemo(() => {\n    if (globalChartData) {\n      const dailyVolumes: number[] = globalChartData.map((value: any) =>\n        Number(value.totalLiquidityUSD),\n      );\n      // this is for defining the scale for the liquidity values to present in graph. Liquidity values are more than 100M so set the min and max amount with rounding after dividing into 20000000 to show all liquidity values into the graph\n      const minVolume =\n        Math.floor(Math.min(...dailyVolumes) / 20000000) * 20000000;\n      const maxVolume =\n        Math.ceil(Math.max(...dailyVolumes) / 20000000) * 20000000;\n      const values = [];\n      // show 10 values in the y axis of the graph\n      const step = (maxVolume - minVolume) / 10;\n      for (let i = maxVolume; i >= minVolume; i -= step) {\n        values.push(i);\n      }\n      return values;\n    } else {\n      return undefined;\n    }\n  }, [globalChartData]);\n\n  return (\n    <>\n      <Box className='flex justify-between'>\n        <span className='text-disabled text-bold text-uppercase'>\n          {t('liquidity')}\n        </span>\n        <ChartType\n          typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\n          chartTypes={GlobalData.analytics.CHART_DURATIONS}\n          chartType={durationIndex}\n          setChartType={setDurationIndex}\n        />\n      </Box>\n      {globalData ? (\n        <Box mt={0.5} className='flex items-center'>\n          <h5>${formatCompact(globalData.totalLiquidityUSD)}</h5>\n          <Box\n            ml={1}\n            height={23}\n            px={1}\n            borderRadius={40}\n            className={liquidityPercentClass}\n          >\n            <span>\n              {`${globalData.liquidityChangeUSD > 0 ? '+' : ''}\n                      ${globalData.liquidityChangeUSD.toLocaleString()}`}\n              %\n            </span>\n          </Box>\n        </Box>\n      ) : (\n        <Box my={0.5}>\n          <Skeleton variant='rect' width='100%' height={24} />\n        </Box>\n      )}\n      <Box>\n        <span className='text-disabled'>\n          {dayjs.utc().format('MMM DD, YYYY')}\n        </span>\n      </Box>\n      <Box mt={2}>\n        {globalChartData ? (\n          <AreaChart\n            data={globalChartData.map((value: any) =>\n              Number(value.totalLiquidityUSD),\n            )}\n            yAxisValues={yAxisValues}\n            dates={globalChartData.map((value: any) => value.date)}\n            width='100%'\n            height={250}\n            categories={getChartDates(globalChartData, durationIndex)}\n          />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={223} />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsLiquidityChart;\n"]},"metadata":{},"sourceType":"module"}