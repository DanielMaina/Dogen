{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\nimport { ChainId } from '@uniswap/sdk';\nimport { Arkane } from '@arkane-network/web3-arkane-provider';\nimport { ArkaneConnect, SecretType } from '@arkane-network/arkane-connect';\nimport Web3 from 'web3';\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.TESTNET]: 'mumbai',\n  [ChainId.MAINNET]: 'doge'\n};\nexport class ArkaneConnector extends AbstractConnector {\n  constructor(_ref) {\n    let {\n      clientID,\n      chainId\n    } = _ref;\n    invariant(Object.keys(CHAIN_ID_NETWORK_ARGUMENT).includes(chainId.toString()), `Unsupported chainId ${chainId}`);\n    super({\n      supportedChainIds: [chainId]\n    });\n    this.clientID = void 0;\n    this.chainId = void 0;\n    this.arkane = void 0;\n    this.clientID = clientID;\n    this.chainId = chainId;\n  }\n\n  async activate() {\n    const options = {\n      clientId: this.clientID,\n      secretType: SecretType.MATIC,\n      signMethod: 'POPUP',\n      skipAuthentication: false\n    };\n    const arkaneProvider = await Arkane.createArkaneProviderEngine(options);\n\n    if (!this.arkane) {\n      this.arkane = new ArkaneConnect(this.clientID);\n    }\n\n    const web3 = new Web3(arkaneProvider);\n    const accounts = await web3.eth.getAccounts();\n    return {\n      provider: arkaneProvider,\n      chainId: this.chainId,\n      account: accounts[0]\n    };\n  }\n\n  async getProvider() {\n    const options = {\n      clientId: this.clientID,\n      secretType: SecretType.MATIC,\n      signMethod: 'POPUP',\n      skipAuthentication: false\n    };\n    return Arkane.createArkaneProviderEngine(options);\n  }\n\n  async getChainId() {\n    return this.chainId;\n  }\n\n  async getAccount() {\n    return this.arkane.flows.getAccount(SecretType.MATIC).then(accounts => accounts.wallets[0].address);\n  }\n\n  deactivate() {\n    console.log('deactivate');\n  }\n\n  async close() {\n    await this.arkane.logout();\n    this.emitDeactivate();\n  }\n\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/connectors/Arkane.ts"],"names":["AbstractConnector","invariant","ChainId","Arkane","ArkaneConnect","SecretType","Web3","CHAIN_ID_NETWORK_ARGUMENT","TESTNET","MAINNET","ArkaneConnector","constructor","clientID","chainId","Object","keys","includes","toString","supportedChainIds","arkane","activate","options","clientId","secretType","MATIC","signMethod","skipAuthentication","arkaneProvider","createArkaneProviderEngine","web3","accounts","eth","getAccounts","provider","account","getProvider","getChainId","getAccount","flows","then","wallets","address","deactivate","console","log","close","logout","emitDeactivate"],"mappings":"AACA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,sCAAvB;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,gCAA1C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAOA,MAAMC,yBAEL,GAAG;AACF,GAACL,OAAO,CAACM,OAAT,GAAmB,QADjB;AAEF,GAACN,OAAO,CAACO,OAAT,GAAmB;AAFjB,CAFJ;AAYA,OAAO,MAAMC,eAAN,SAA8BV,iBAA9B,CAAgD;AAMrDW,EAAAA,WAAW,OAAkD;AAAA,QAAjD;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAiD;AAC3DZ,IAAAA,SAAS,CACPa,MAAM,CAACC,IAAP,CAAYR,yBAAZ,EAAuCS,QAAvC,CAAgDH,OAAO,CAACI,QAAR,EAAhD,CADO,EAEN,uBAAsBJ,OAAQ,EAFxB,CAAT;AAIA,UAAM;AAAEK,MAAAA,iBAAiB,EAAE,CAACL,OAAD;AAArB,KAAN;AAL2D,SAL5CD,QAK4C;AAAA,SAJ5CC,OAI4C;AAAA,SAFtDM,MAEsD;AAO3D,SAAKP,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;AAEoB,QAARO,QAAQ,GAA6B;AAChD,UAAMC,OAAO,GAAG;AACdC,MAAAA,QAAQ,EAAE,KAAKV,QADD;AAEdW,MAAAA,UAAU,EAAElB,UAAU,CAACmB,KAFT;AAGdC,MAAAA,UAAU,EAAE,OAHE;AAIdC,MAAAA,kBAAkB,EAAE;AAJN,KAAhB;AAMA,UAAMC,cAAc,GAAG,MAAMxB,MAAM,CAACyB,0BAAP,CAAkCP,OAAlC,CAA7B;;AACA,QAAI,CAAC,KAAKF,MAAV,EAAkB;AAChB,WAAKA,MAAL,GAAc,IAAIf,aAAJ,CAAkB,KAAKQ,QAAvB,CAAd;AACD;;AAED,UAAMiB,IAAI,GAAG,IAAIvB,IAAJ,CAASqB,cAAT,CAAb;AACA,UAAMG,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB;AAEA,WAAO;AACLC,MAAAA,QAAQ,EAAEN,cADL;AAELd,MAAAA,OAAO,EAAE,KAAKA,OAFT;AAGLqB,MAAAA,OAAO,EAAEJ,QAAQ,CAAC,CAAD;AAHZ,KAAP;AAKD;;AAEuB,QAAXK,WAAW,GAAiB;AACvC,UAAMd,OAAO,GAAG;AACdC,MAAAA,QAAQ,EAAE,KAAKV,QADD;AAEdW,MAAAA,UAAU,EAAElB,UAAU,CAACmB,KAFT;AAGdC,MAAAA,UAAU,EAAE,OAHE;AAIdC,MAAAA,kBAAkB,EAAE;AAJN,KAAhB;AAMA,WAAOvB,MAAM,CAACyB,0BAAP,CAAkCP,OAAlC,CAAP;AACD;;AAEsB,QAAVe,UAAU,GAA6B;AAClD,WAAO,KAAKvB,OAAZ;AACD;;AAEsB,QAAVwB,UAAU,GAA2B;AAChD,WAAO,KAAKlB,MAAL,CAAYmB,KAAZ,CACJD,UADI,CACOhC,UAAU,CAACmB,KADlB,EAEJe,IAFI,CAEET,QAAD,IAA2BA,QAAQ,CAACU,OAAT,CAAiB,CAAjB,EAAoBC,OAFhD,CAAP;AAGD;;AAEMC,EAAAA,UAAU,GAAS;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD;;AAEiB,QAALC,KAAK,GAAkB;AAClC,UAAM,KAAK1B,MAAL,CAAY2B,MAAZ,EAAN;AACA,SAAKC,cAAL;AACD;;AAlEoD","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\nimport { ChainId } from '@uniswap/sdk';\nimport { Arkane } from '@arkane-network/web3-arkane-provider';\nimport { ArkaneConnect, SecretType } from '@arkane-network/arkane-connect';\nimport Web3 from 'web3';\n\ntype ArkaneSupportedChains = Extract<\n  ChainId,\n  ChainId.MAINNET | ChainId.TESTNET\n>;\n\nconst CHAIN_ID_NETWORK_ARGUMENT: {\n  readonly [chainId in ArkaneSupportedChains]: string | undefined;\n} = {\n  [ChainId.TESTNET]: 'mumbai',\n  [ChainId.MAINNET]: 'doge',\n};\n\ninterface ArkaneConnectorArguments {\n  clientID: string;\n  chainId: number;\n}\n\nexport class ArkaneConnector extends AbstractConnector {\n  private readonly clientID: string;\n  private readonly chainId: number;\n\n  public arkane: any;\n\n  constructor({ clientID, chainId }: ArkaneConnectorArguments) {\n    invariant(\n      Object.keys(CHAIN_ID_NETWORK_ARGUMENT).includes(chainId.toString()),\n      `Unsupported chainId ${chainId}`,\n    );\n    super({ supportedChainIds: [chainId] });\n\n    this.clientID = clientID;\n    this.chainId = chainId;\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    const options = {\n      clientId: this.clientID,\n      secretType: SecretType.MATIC,\n      signMethod: 'POPUP',\n      skipAuthentication: false,\n    };\n    const arkaneProvider = await Arkane.createArkaneProviderEngine(options);\n    if (!this.arkane) {\n      this.arkane = new ArkaneConnect(this.clientID);\n    }\n\n    const web3 = new Web3(arkaneProvider as any);\n    const accounts = await web3.eth.getAccounts();\n\n    return {\n      provider: arkaneProvider,\n      chainId: this.chainId,\n      account: accounts[0],\n    };\n  }\n\n  public async getProvider(): Promise<any> {\n    const options = {\n      clientId: this.clientID,\n      secretType: SecretType.MATIC,\n      signMethod: 'POPUP',\n      skipAuthentication: false,\n    };\n    return Arkane.createArkaneProviderEngine(options);\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId;\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.arkane.flows\n      .getAccount(SecretType.MATIC)\n      .then((accounts: any): string => accounts.wallets[0].address);\n  }\n\n  public deactivate(): void {\n    console.log('deactivate');\n  }\n\n  public async close(): Promise<void> {\n    await this.arkane.logout();\n    this.emitDeactivate();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}