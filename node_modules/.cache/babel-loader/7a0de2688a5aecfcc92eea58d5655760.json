{"ast":null,"code":"const CONSERVATIVE_BLOCK_GAS_LIMIT = 10000000; // conservative, hard-coded estimate of the current block gas limit\n\nexport const DEFAULT_GAS_REQUIRED = 200000; // the default value for calls that don't specify gasRequired\n// chunks array into chunks\n// evenly distributes items among the chunks\n\nexport function chunkArray(items) {\n  let gasLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CONSERVATIVE_BLOCK_GAS_LIMIT * 10;\n  const chunks = [];\n  let currentChunk = [];\n  let currentChunkCumulativeGas = 0;\n\n  for (let i = 0; i < items.length; i++) {\n    var _gasRequired;\n\n    const item = items[i]; // calculate the gas required by the current item\n\n    const gasRequired = (_gasRequired = item === null || item === void 0 ? void 0 : item.gasRequired) !== null && _gasRequired !== void 0 ? _gasRequired : DEFAULT_GAS_REQUIRED; // if the current chunk is empty, or the current item wouldn't push it over the gas limit,\n    // append the current item and increment the cumulative gas\n\n    if (currentChunk.length === 0 || currentChunkCumulativeGas + gasRequired < gasLimit) {\n      currentChunk.push(item);\n      currentChunkCumulativeGas += gasRequired;\n    } else {\n      // otherwise, push the current chunk and create a new chunk\n      chunks.push(currentChunk);\n      currentChunk = [item];\n      currentChunkCumulativeGas = gasRequired;\n    }\n  }\n\n  if (currentChunk.length > 0) chunks.push(currentChunk);\n  return chunks;\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/utils/chunkArray.ts"],"names":["CONSERVATIVE_BLOCK_GAS_LIMIT","DEFAULT_GAS_REQUIRED","chunkArray","items","gasLimit","chunks","currentChunk","currentChunkCumulativeGas","i","length","item","gasRequired","push"],"mappings":"AAAA,MAAMA,4BAA4B,GAAG,QAArC,C,CAAiD;;AACjD,OAAO,MAAMC,oBAAoB,GAAG,MAA7B,C,CAAsC;AAE7C;AACA;;AACA,OAAO,SAASC,UAAT,CACLC,KADK,EAGE;AAAA,MADPC,QACO,uEADIJ,4BAA4B,GAAG,EACnC;AACP,QAAMK,MAAa,GAAG,EAAtB;AACA,MAAIC,YAAiB,GAAG,EAAxB;AACA,MAAIC,yBAAyB,GAAG,CAAhC;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAA;;AACrC,UAAME,IAAI,GAAGP,KAAK,CAACK,CAAD,CAAlB,CADqC,CAGrC;;AACA,UAAMG,WAAW,mBACdD,IADc,aACdA,IADc,uBACdA,IAAD,CAAoCC,WADrB,uDACoCV,oBADrD,CAJqC,CAOrC;AACA;;AACA,QACEK,YAAY,CAACG,MAAb,KAAwB,CAAxB,IACAF,yBAAyB,GAAGI,WAA5B,GAA0CP,QAF5C,EAGE;AACAE,MAAAA,YAAY,CAACM,IAAb,CAAkBF,IAAlB;AACAH,MAAAA,yBAAyB,IAAII,WAA7B;AACD,KAND,MAMO;AACL;AACAN,MAAAA,MAAM,CAACO,IAAP,CAAYN,YAAZ;AACAA,MAAAA,YAAY,GAAG,CAACI,IAAD,CAAf;AACAH,MAAAA,yBAAyB,GAAGI,WAA5B;AACD;AACF;;AACD,MAAIL,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6BJ,MAAM,CAACO,IAAP,CAAYN,YAAZ;AAE7B,SAAOD,MAAP;AACD","sourcesContent":["const CONSERVATIVE_BLOCK_GAS_LIMIT = 10_000_000; // conservative, hard-coded estimate of the current block gas limit\nexport const DEFAULT_GAS_REQUIRED = 200_000; // the default value for calls that don't specify gasRequired\n\n// chunks array into chunks\n// evenly distributes items among the chunks\nexport function chunkArray<T>(\n  items: T[],\n  gasLimit = CONSERVATIVE_BLOCK_GAS_LIMIT * 10,\n): T[][] {\n  const chunks: T[][] = [];\n  let currentChunk: T[] = [];\n  let currentChunkCumulativeGas = 0;\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n\n    // calculate the gas required by the current item\n    const gasRequired =\n      (item as { gasRequired?: number })?.gasRequired ?? DEFAULT_GAS_REQUIRED;\n\n    // if the current chunk is empty, or the current item wouldn't push it over the gas limit,\n    // append the current item and increment the cumulative gas\n    if (\n      currentChunk.length === 0 ||\n      currentChunkCumulativeGas + gasRequired < gasLimit\n    ) {\n      currentChunk.push(item);\n      currentChunkCumulativeGas += gasRequired;\n    } else {\n      // otherwise, push the current chunk and create a new chunk\n      chunks.push(currentChunk);\n      currentChunk = [item];\n      currentChunkCumulativeGas = gasRequired;\n    }\n  }\n  if (currentChunk.length > 0) chunks.push(currentChunk);\n\n  return chunks;\n}\n"]},"metadata":{},"sourceType":"module"}