{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { getAddress } from '@ethersproject/address';\nimport { Contract } from '@ethersproject/contracts';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport { blockClient, client, txClient } from 'apollo/client';\nimport { GET_BLOCK, GLOBAL_DATA, GLOBAL_CHART, GET_BLOCKS, TOKENS_CURRENT, TOKENS_DYNAMIC, TOKEN_CHART, TOKEN_DATA1, TOKEN_DATA2, PAIR_CHART, PAIR_DATA, PAIRS_BULK1, PAIRS_HISTORICAL_BULK, PRICES_BY_BLOCK, PAIRS_CURRENT, ALL_PAIRS, ALL_TOKENS, TOKEN_INFO, TOKEN_INFO_OLD, FILTERED_TRANSACTIONS, SWAP_TRANSACTIONS, HOURLY_PAIR_RATES, GLOBAL_ALLDATA, ETH_PRICE, PAIR_ID } from 'apollo/queries';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { CurrencyAmount, Percent, JSBI, ETHER, Token, TokenAmount, Pair } from '@uniswap/sdk';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { AddressZero } from '@ethersproject/constants';\nimport { GlobalConst, GlobalValue, SUPPORTED_WALLETS } from 'constants/index';\nimport { unwrappedToken } from './wrappedCurrency';\nimport { useUSDCPriceToken } from './useUSDCPrice';\nimport { injected } from 'connectors';\ndayjs.extend(utc);\ndayjs.extend(weekOfYear);\nexport { default as addMaticToMetamask } from './addMaticToMetamask';\nconst TOKEN_OVERRIDES = {\n  '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': {\n    name: 'Ether (Wrapped)',\n    symbol: 'ETH'\n  },\n  '0x1416946162b1c2c871a73b07e932d2fb6c932069': {\n    name: 'Energi',\n    symbol: 'NRGE'\n  }\n};\nexport async function getBlockFromTimestamp(timestamp) {\n  var _result$data, _result$data$blocks, _result$data$blocks$;\n\n  const result = await blockClient.query({\n    query: GET_BLOCK,\n    variables: {\n      timestampFrom: timestamp,\n      timestampTo: timestamp + 600\n    },\n    fetchPolicy: 'network-only'\n  });\n  return result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$blocks = _result$data.blocks) === null || _result$data$blocks === void 0 ? void 0 : (_result$data$blocks$ = _result$data$blocks[0]) === null || _result$data$blocks$ === void 0 ? void 0 : _result$data$blocks$.number;\n}\nexport function formatCompact(unformatted) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 18;\n  let maximumFractionDigits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  let maxPrecision = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n  const formatter = Intl.NumberFormat('en', {\n    notation: 'compact',\n    maximumFractionDigits\n  });\n  if (!unformatted) return '0';\n  if (unformatted === Infinity) return 'âˆž';\n  let formatted = Number(unformatted);\n\n  if (unformatted instanceof BigNumber) {\n    formatted = Number(formatUnits(unformatted.toString(), decimals));\n  }\n\n  return formatter.format(Number(formatted.toPrecision(maxPrecision)));\n}\nexport const getPercentChange = (valueNow, value24HoursAgo) => {\n  const adjustedPercentChange = (valueNow - value24HoursAgo) / value24HoursAgo * 100;\n\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return 0;\n  }\n\n  return adjustedPercentChange;\n};\nexport async function splitQuery(query, localClient, vars, list) {\n  let skipCount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;\n  let fetchedData = {};\n  let allFound = false;\n  let skip = 0;\n\n  while (!allFound) {\n    let end = list.length;\n\n    if (skip + skipCount < list.length) {\n      end = skip + skipCount;\n    }\n\n    const sliced = list.slice(skip, end);\n    const result = await localClient.query({\n      query: query(...vars, sliced),\n      fetchPolicy: 'network-only'\n    });\n    fetchedData = { ...fetchedData,\n      ...result.data\n    };\n\n    if (Object.keys(result.data).length < skipCount || skip + skipCount > list.length) {\n      allFound = true;\n    } else {\n      skip += skipCount;\n    }\n  }\n\n  return fetchedData;\n}\nexport async function getBlocksFromTimestamps(timestamps) {\n  let skipCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n\n  if ((timestamps === null || timestamps === void 0 ? void 0 : timestamps.length) === 0) {\n    return [];\n  }\n\n  const fetchedData = await splitQuery(GET_BLOCKS, blockClient, [], timestamps, skipCount);\n  const blocks = [];\n\n  if (fetchedData) {\n    for (const t in fetchedData) {\n      if (fetchedData[t].length > 0) {\n        blocks.push({\n          timestamp: t.split('t')[1],\n          number: fetchedData[t][0]['number']\n        });\n      }\n    }\n  }\n\n  return blocks;\n}\nexport const get2DayPercentChange = (valueNow, value24HoursAgo, value48HoursAgo) => {\n  // get volume info for both 24 hour periods\n  const currentChange = valueNow - value24HoursAgo;\n  const previousChange = value24HoursAgo - value48HoursAgo;\n  const adjustedPercentChange = (currentChange - previousChange) / previousChange * 100;\n\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0];\n  }\n\n  return [currentChange, adjustedPercentChange];\n};\nexport const getEthPrice = async () => {\n  const utcCurrentTime = dayjs();\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n  let ethPrice = 0;\n  let ethPriceOneDay = 0;\n  let priceChangeETH = 0;\n\n  try {\n    var _result$data$bundles$, _result$data2, _result$data2$bundles, _resultOneDay$data$bu, _resultOneDay$data, _resultOneDay$data$bu2;\n\n    const oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n    const result = await client.query({\n      query: ETH_PRICE(),\n      fetchPolicy: 'network-only'\n    });\n    const resultOneDay = await client.query({\n      query: ETH_PRICE(oneDayBlock),\n      fetchPolicy: 'network-only'\n    });\n    const currentPrice = Number((_result$data$bundles$ = result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : (_result$data2$bundles = _result$data2.bundles[0]) === null || _result$data2$bundles === void 0 ? void 0 : _result$data2$bundles.ethPrice) !== null && _result$data$bundles$ !== void 0 ? _result$data$bundles$ : 0);\n    const oneDayBackPrice = Number((_resultOneDay$data$bu = resultOneDay === null || resultOneDay === void 0 ? void 0 : (_resultOneDay$data = resultOneDay.data) === null || _resultOneDay$data === void 0 ? void 0 : (_resultOneDay$data$bu2 = _resultOneDay$data.bundles[0]) === null || _resultOneDay$data$bu2 === void 0 ? void 0 : _resultOneDay$data$bu2.ethPrice) !== null && _resultOneDay$data$bu !== void 0 ? _resultOneDay$data$bu : 0);\n    priceChangeETH = getPercentChange(currentPrice, oneDayBackPrice);\n    ethPrice = currentPrice;\n    ethPriceOneDay = oneDayBackPrice;\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [ethPrice, ethPriceOneDay, priceChangeETH];\n};\nexport const getTokenInfo = async (ethPrice, ethPriceOld, address) => {\n  const utcCurrentTime = dayjs();\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n  const utcOneWeekBack = utcCurrentTime.subtract(7, 'day').unix();\n  const oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n  const twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack);\n  const oneWeekBlock = await getBlockFromTimestamp(utcOneWeekBack);\n\n  try {\n    var _oneDayResult$data, _twoDayResult$data, _oneWeekResult$data, _current$data, _current$data$tokens;\n\n    const current = await client.query({\n      query: TOKEN_INFO(address),\n      fetchPolicy: 'network-only'\n    });\n    const oneDayResult = await client.query({\n      query: TOKEN_INFO_OLD(oneDayBlock, address),\n      fetchPolicy: 'network-only'\n    });\n    const twoDayResult = await client.query({\n      query: TOKEN_INFO_OLD(twoDayBlock, address),\n      fetchPolicy: 'network-only'\n    });\n    const oneWeekResult = await client.query({\n      query: TOKEN_INFO_OLD(oneWeekBlock, address),\n      fetchPolicy: 'network-only'\n    });\n    const oneDayData = oneDayResult === null || oneDayResult === void 0 ? void 0 : (_oneDayResult$data = oneDayResult.data) === null || _oneDayResult$data === void 0 ? void 0 : _oneDayResult$data.tokens.reduce((obj, cur) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    const twoDayData = twoDayResult === null || twoDayResult === void 0 ? void 0 : (_twoDayResult$data = twoDayResult.data) === null || _twoDayResult$data === void 0 ? void 0 : _twoDayResult$data.tokens.reduce((obj, cur) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    const oneWeekData = oneWeekResult === null || oneWeekResult === void 0 ? void 0 : (_oneWeekResult$data = oneWeekResult.data) === null || _oneWeekResult$data === void 0 ? void 0 : _oneWeekResult$data.tokens.reduce((obj, cur) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    const bulkResults = await Promise.all(current && oneDayData && twoDayData && (current === null || current === void 0 ? void 0 : (_current$data = current.data) === null || _current$data === void 0 ? void 0 : (_current$data$tokens = _current$data.tokens) === null || _current$data$tokens === void 0 ? void 0 : _current$data$tokens.map(async token => {\n      var _oneDayHistory$totalL, _oneDayHistory, _data$totalLiquidity, _oneDayHistory$tradeV, _oneDayHistory2, _data$tradeVolume, _oneDayHistory$derive, _oneDayHistory3, _data$derivedETH, _twoDayHistory$totalL, _twoDayHistory, _data$totalLiquidity2, _twoDayHistory$tradeV, _twoDayHistory2, _data$tradeVolume2, _twoDayHistory$derive, _twoDayHistory3, _data$derivedETH2, _oneWeekHistory$total, _oneWeekHistory, _data$totalLiquidity3, _oneWeekHistory$trade, _oneWeekHistory2, _data$tradeVolume3, _oneWeekHistory$deriv, _oneWeekHistory3, _data$derivedETH3, _oneDayHistory$tradeV2, _oneDayHistory4, _twoDayHistory$tradeV2, _twoDayHistory4, _oneWeekHistory$trade2, _oneWeekHistory4, _oneDayHistory$totalL2, _oneDayHistory5, _oneDayHistory$derive2, _oneDayHistory6, _oneDayHistory7, _oneDayHistory8;\n\n      const data = token;\n      let oneDayHistory = oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData[token.id];\n      let twoDayHistory = twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData[token.id];\n      let oneWeekHistory = oneWeekData === null || oneWeekData === void 0 ? void 0 : oneWeekData[token.id]; // this is because old history data returns exact same data as current data when the old data does not exist\n\n      if (Number((_oneDayHistory$totalL = (_oneDayHistory = oneDayHistory) === null || _oneDayHistory === void 0 ? void 0 : _oneDayHistory.totalLiquidity) !== null && _oneDayHistory$totalL !== void 0 ? _oneDayHistory$totalL : 0) === Number((_data$totalLiquidity = data === null || data === void 0 ? void 0 : data.totalLiquidity) !== null && _data$totalLiquidity !== void 0 ? _data$totalLiquidity : 0) && Number((_oneDayHistory$tradeV = (_oneDayHistory2 = oneDayHistory) === null || _oneDayHistory2 === void 0 ? void 0 : _oneDayHistory2.tradeVolume) !== null && _oneDayHistory$tradeV !== void 0 ? _oneDayHistory$tradeV : 0) === Number((_data$tradeVolume = data === null || data === void 0 ? void 0 : data.tradeVolume) !== null && _data$tradeVolume !== void 0 ? _data$tradeVolume : 0) && Number((_oneDayHistory$derive = (_oneDayHistory3 = oneDayHistory) === null || _oneDayHistory3 === void 0 ? void 0 : _oneDayHistory3.derivedETH) !== null && _oneDayHistory$derive !== void 0 ? _oneDayHistory$derive : 0) === Number((_data$derivedETH = data === null || data === void 0 ? void 0 : data.derivedETH) !== null && _data$derivedETH !== void 0 ? _data$derivedETH : 0)) {\n        oneDayHistory = null;\n      }\n\n      if (Number((_twoDayHistory$totalL = (_twoDayHistory = twoDayHistory) === null || _twoDayHistory === void 0 ? void 0 : _twoDayHistory.totalLiquidity) !== null && _twoDayHistory$totalL !== void 0 ? _twoDayHistory$totalL : 0) === Number((_data$totalLiquidity2 = data === null || data === void 0 ? void 0 : data.totalLiquidity) !== null && _data$totalLiquidity2 !== void 0 ? _data$totalLiquidity2 : 0) && Number((_twoDayHistory$tradeV = (_twoDayHistory2 = twoDayHistory) === null || _twoDayHistory2 === void 0 ? void 0 : _twoDayHistory2.tradeVolume) !== null && _twoDayHistory$tradeV !== void 0 ? _twoDayHistory$tradeV : 0) === Number((_data$tradeVolume2 = data === null || data === void 0 ? void 0 : data.tradeVolume) !== null && _data$tradeVolume2 !== void 0 ? _data$tradeVolume2 : 0) && Number((_twoDayHistory$derive = (_twoDayHistory3 = twoDayHistory) === null || _twoDayHistory3 === void 0 ? void 0 : _twoDayHistory3.derivedETH) !== null && _twoDayHistory$derive !== void 0 ? _twoDayHistory$derive : 0) === Number((_data$derivedETH2 = data === null || data === void 0 ? void 0 : data.derivedETH) !== null && _data$derivedETH2 !== void 0 ? _data$derivedETH2 : 0)) {\n        twoDayHistory = null;\n      }\n\n      if (Number((_oneWeekHistory$total = (_oneWeekHistory = oneWeekHistory) === null || _oneWeekHistory === void 0 ? void 0 : _oneWeekHistory.totalLiquidity) !== null && _oneWeekHistory$total !== void 0 ? _oneWeekHistory$total : 0) === Number((_data$totalLiquidity3 = data === null || data === void 0 ? void 0 : data.totalLiquidity) !== null && _data$totalLiquidity3 !== void 0 ? _data$totalLiquidity3 : 0) && Number((_oneWeekHistory$trade = (_oneWeekHistory2 = oneWeekHistory) === null || _oneWeekHistory2 === void 0 ? void 0 : _oneWeekHistory2.tradeVolume) !== null && _oneWeekHistory$trade !== void 0 ? _oneWeekHistory$trade : 0) === Number((_data$tradeVolume3 = data === null || data === void 0 ? void 0 : data.tradeVolume) !== null && _data$tradeVolume3 !== void 0 ? _data$tradeVolume3 : 0) && Number((_oneWeekHistory$deriv = (_oneWeekHistory3 = oneWeekHistory) === null || _oneWeekHistory3 === void 0 ? void 0 : _oneWeekHistory3.derivedETH) !== null && _oneWeekHistory$deriv !== void 0 ? _oneWeekHistory$deriv : 0) === Number((_data$derivedETH3 = data === null || data === void 0 ? void 0 : data.derivedETH) !== null && _data$derivedETH3 !== void 0 ? _data$derivedETH3 : 0)) {\n        oneWeekHistory = null;\n      } // calculate percentage changes and daily changes\n\n\n      const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data.tradeVolumeUSD, (_oneDayHistory$tradeV2 = (_oneDayHistory4 = oneDayHistory) === null || _oneDayHistory4 === void 0 ? void 0 : _oneDayHistory4.tradeVolumeUSD) !== null && _oneDayHistory$tradeV2 !== void 0 ? _oneDayHistory$tradeV2 : 0, (_twoDayHistory$tradeV2 = (_twoDayHistory4 = twoDayHistory) === null || _twoDayHistory4 === void 0 ? void 0 : _twoDayHistory4.tradeVolumeUSD) !== null && _twoDayHistory$tradeV2 !== void 0 ? _twoDayHistory$tradeV2 : 0);\n      const oneWeekVolumeUSD = data.tradeVolumeUSD - ((_oneWeekHistory$trade2 = (_oneWeekHistory4 = oneWeekHistory) === null || _oneWeekHistory4 === void 0 ? void 0 : _oneWeekHistory4.tradeVolumeUSD) !== null && _oneWeekHistory$trade2 !== void 0 ? _oneWeekHistory$trade2 : 0);\n      const currentLiquidityUSD = (data === null || data === void 0 ? void 0 : data.totalLiquidity) * ethPrice * (data === null || data === void 0 ? void 0 : data.derivedETH);\n      const oldLiquidityUSD = ((_oneDayHistory$totalL2 = (_oneDayHistory5 = oneDayHistory) === null || _oneDayHistory5 === void 0 ? void 0 : _oneDayHistory5.totalLiquidity) !== null && _oneDayHistory$totalL2 !== void 0 ? _oneDayHistory$totalL2 : 0) * ethPriceOld * ((_oneDayHistory$derive2 = (_oneDayHistory6 = oneDayHistory) === null || _oneDayHistory6 === void 0 ? void 0 : _oneDayHistory6.derivedETH) !== null && _oneDayHistory$derive2 !== void 0 ? _oneDayHistory$derive2 : 0); // percent changes\n\n      const priceChangeUSD = getPercentChange((data === null || data === void 0 ? void 0 : data.derivedETH) * ethPrice, (_oneDayHistory7 = oneDayHistory) !== null && _oneDayHistory7 !== void 0 && _oneDayHistory7.derivedETH ? ((_oneDayHistory8 = oneDayHistory) === null || _oneDayHistory8 === void 0 ? void 0 : _oneDayHistory8.derivedETH) * ethPriceOld : 0); // set data\n\n      data.priceUSD = (data === null || data === void 0 ? void 0 : data.derivedETH) * ethPrice;\n      data.totalLiquidityUSD = currentLiquidityUSD;\n      data.oneDayVolumeUSD = oneDayVolumeUSD;\n      data.oneWeekVolumeUSD = oneWeekVolumeUSD;\n      data.volumeChangeUSD = volumeChangeUSD;\n      data.priceChangeUSD = priceChangeUSD;\n      data.liquidityChangeUSD = getPercentChange(currentLiquidityUSD !== null && currentLiquidityUSD !== void 0 ? currentLiquidityUSD : 0, oldLiquidityUSD !== null && oldLiquidityUSD !== void 0 ? oldLiquidityUSD : 0); // new tokens\n\n      if (!oneDayHistory && data) {\n        data.oneDayVolumeUSD = data.tradeVolumeUSD;\n        data.oneDayVolumeETH = data.tradeVolume * data.derivedETH;\n      } // update name data for\n\n\n      updateNameData({\n        token0: data\n      }); // HOTFIX for Aave\n\n      if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\n        const aaveData = await client.query({\n          query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\n          fetchPolicy: 'network-only'\n        });\n        const result = aaveData.data.pairs[0];\n        data.totalLiquidityUSD = Number(result.reserveUSD) / 2;\n        data.liquidityChangeUSD = 0;\n        data.priceChangeUSD = 0;\n      }\n\n      return data;\n    })));\n    return bulkResults;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTopTokens = async function (ethPrice, ethPriceOld) {\n  let count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;\n  const utcCurrentTime = dayjs();\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n  const oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n  const twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack);\n\n  try {\n    var _oneDayResult$data2, _twoDayResult$data2, _current$data2, _current$data2$tokens;\n\n    const current = await client.query({\n      query: TOKENS_CURRENT(count),\n      fetchPolicy: 'network-only'\n    });\n    const oneDayResult = await client.query({\n      query: TOKENS_DYNAMIC(oneDayBlock, count),\n      fetchPolicy: 'network-only'\n    });\n    const twoDayResult = await client.query({\n      query: TOKENS_DYNAMIC(twoDayBlock, count),\n      fetchPolicy: 'network-only'\n    });\n    const oneDayData = oneDayResult === null || oneDayResult === void 0 ? void 0 : (_oneDayResult$data2 = oneDayResult.data) === null || _oneDayResult$data2 === void 0 ? void 0 : _oneDayResult$data2.tokens.reduce((obj, cur) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    const twoDayData = twoDayResult === null || twoDayResult === void 0 ? void 0 : (_twoDayResult$data2 = twoDayResult.data) === null || _twoDayResult$data2 === void 0 ? void 0 : _twoDayResult$data2.tokens.reduce((obj, cur) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    const bulkResults = await Promise.all(current && oneDayData && twoDayData && (current === null || current === void 0 ? void 0 : (_current$data2 = current.data) === null || _current$data2 === void 0 ? void 0 : (_current$data2$tokens = _current$data2.tokens) === null || _current$data2$tokens === void 0 ? void 0 : _current$data2$tokens.map(async token => {\n      var _oneDayHistory$totalL3, _oneDayHistory9, _data$totalLiquidity4, _oneDayHistory$tradeV3, _oneDayHistory10, _data$tradeVolume4, _oneDayHistory$derive3, _oneDayHistory11, _data$derivedETH4, _twoDayHistory$totalL2, _twoDayHistory5, _data$totalLiquidity5, _twoDayHistory$tradeV3, _twoDayHistory6, _data$tradeVolume5, _twoDayHistory$derive2, _twoDayHistory7, _data$derivedETH5, _oneDayHistory$tradeV4, _oneDayHistory12, _twoDayHistory$tradeV4, _twoDayHistory8, _oneDayHistory$totalL4, _oneDayHistory13, _oneDayHistory$derive4, _oneDayHistory14, _oneDayHistory15, _oneDayHistory16;\n\n      const data = token; // let liquidityDataThisToken = liquidityData?.[token.id]\n\n      let oneDayHistory = oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData[token.id];\n      let twoDayHistory = twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData[token.id]; // this is because old history data returns exact same data as current data when the old data does not exist\n\n      if (Number((_oneDayHistory$totalL3 = (_oneDayHistory9 = oneDayHistory) === null || _oneDayHistory9 === void 0 ? void 0 : _oneDayHistory9.totalLiquidity) !== null && _oneDayHistory$totalL3 !== void 0 ? _oneDayHistory$totalL3 : 0) === Number((_data$totalLiquidity4 = data === null || data === void 0 ? void 0 : data.totalLiquidity) !== null && _data$totalLiquidity4 !== void 0 ? _data$totalLiquidity4 : 0) && Number((_oneDayHistory$tradeV3 = (_oneDayHistory10 = oneDayHistory) === null || _oneDayHistory10 === void 0 ? void 0 : _oneDayHistory10.tradeVolume) !== null && _oneDayHistory$tradeV3 !== void 0 ? _oneDayHistory$tradeV3 : 0) === Number((_data$tradeVolume4 = data === null || data === void 0 ? void 0 : data.tradeVolume) !== null && _data$tradeVolume4 !== void 0 ? _data$tradeVolume4 : 0) && Number((_oneDayHistory$derive3 = (_oneDayHistory11 = oneDayHistory) === null || _oneDayHistory11 === void 0 ? void 0 : _oneDayHistory11.derivedETH) !== null && _oneDayHistory$derive3 !== void 0 ? _oneDayHistory$derive3 : 0) === Number((_data$derivedETH4 = data === null || data === void 0 ? void 0 : data.derivedETH) !== null && _data$derivedETH4 !== void 0 ? _data$derivedETH4 : 0)) {\n        oneDayHistory = null;\n      }\n\n      if (Number((_twoDayHistory$totalL2 = (_twoDayHistory5 = twoDayHistory) === null || _twoDayHistory5 === void 0 ? void 0 : _twoDayHistory5.totalLiquidity) !== null && _twoDayHistory$totalL2 !== void 0 ? _twoDayHistory$totalL2 : 0) === Number((_data$totalLiquidity5 = data === null || data === void 0 ? void 0 : data.totalLiquidity) !== null && _data$totalLiquidity5 !== void 0 ? _data$totalLiquidity5 : 0) && Number((_twoDayHistory$tradeV3 = (_twoDayHistory6 = twoDayHistory) === null || _twoDayHistory6 === void 0 ? void 0 : _twoDayHistory6.tradeVolume) !== null && _twoDayHistory$tradeV3 !== void 0 ? _twoDayHistory$tradeV3 : 0) === Number((_data$tradeVolume5 = data === null || data === void 0 ? void 0 : data.tradeVolume) !== null && _data$tradeVolume5 !== void 0 ? _data$tradeVolume5 : 0) && Number((_twoDayHistory$derive2 = (_twoDayHistory7 = twoDayHistory) === null || _twoDayHistory7 === void 0 ? void 0 : _twoDayHistory7.derivedETH) !== null && _twoDayHistory$derive2 !== void 0 ? _twoDayHistory$derive2 : 0) === Number((_data$derivedETH5 = data === null || data === void 0 ? void 0 : data.derivedETH) !== null && _data$derivedETH5 !== void 0 ? _data$derivedETH5 : 0)) {\n        twoDayHistory = null;\n      } // calculate percentage changes and daily changes\n\n\n      const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data.tradeVolumeUSD, (_oneDayHistory$tradeV4 = (_oneDayHistory12 = oneDayHistory) === null || _oneDayHistory12 === void 0 ? void 0 : _oneDayHistory12.tradeVolumeUSD) !== null && _oneDayHistory$tradeV4 !== void 0 ? _oneDayHistory$tradeV4 : 0, (_twoDayHistory$tradeV4 = (_twoDayHistory8 = twoDayHistory) === null || _twoDayHistory8 === void 0 ? void 0 : _twoDayHistory8.tradeVolumeUSD) !== null && _twoDayHistory$tradeV4 !== void 0 ? _twoDayHistory$tradeV4 : 0);\n      const currentLiquidityUSD = (data === null || data === void 0 ? void 0 : data.totalLiquidity) * ethPrice * (data === null || data === void 0 ? void 0 : data.derivedETH);\n      const oldLiquidityUSD = ((_oneDayHistory$totalL4 = (_oneDayHistory13 = oneDayHistory) === null || _oneDayHistory13 === void 0 ? void 0 : _oneDayHistory13.totalLiquidity) !== null && _oneDayHistory$totalL4 !== void 0 ? _oneDayHistory$totalL4 : 0) * ethPriceOld * ((_oneDayHistory$derive4 = (_oneDayHistory14 = oneDayHistory) === null || _oneDayHistory14 === void 0 ? void 0 : _oneDayHistory14.derivedETH) !== null && _oneDayHistory$derive4 !== void 0 ? _oneDayHistory$derive4 : 0); // percent changes\n\n      const priceChangeUSD = getPercentChange((data === null || data === void 0 ? void 0 : data.derivedETH) * ethPrice, (_oneDayHistory15 = oneDayHistory) !== null && _oneDayHistory15 !== void 0 && _oneDayHistory15.derivedETH ? ((_oneDayHistory16 = oneDayHistory) === null || _oneDayHistory16 === void 0 ? void 0 : _oneDayHistory16.derivedETH) * ethPriceOld : 0); // set data\n\n      data.priceUSD = (data === null || data === void 0 ? void 0 : data.derivedETH) * ethPrice;\n      data.totalLiquidityUSD = currentLiquidityUSD;\n      data.oneDayVolumeUSD = oneDayVolumeUSD;\n      data.volumeChangeUSD = volumeChangeUSD;\n      data.priceChangeUSD = priceChangeUSD;\n      data.liquidityChangeUSD = getPercentChange(currentLiquidityUSD !== null && currentLiquidityUSD !== void 0 ? currentLiquidityUSD : 0, oldLiquidityUSD !== null && oldLiquidityUSD !== void 0 ? oldLiquidityUSD : 0); // new tokens\n\n      if (!oneDayHistory && data) {\n        data.oneDayVolumeUSD = data.tradeVolumeUSD;\n        data.oneDayVolumeETH = data.tradeVolume * data.derivedETH;\n      } // update name data for\n\n\n      updateNameData({\n        token0: data\n      }); // HOTFIX for Aave\n\n      if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\n        const aaveData = await client.query({\n          query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\n          fetchPolicy: 'network-only'\n        });\n        const result = aaveData.data.pairs[0];\n        data.totalLiquidityUSD = Number(result.reserveUSD) / 2;\n        data.liquidityChangeUSD = 0;\n        data.priceChangeUSD = 0;\n      }\n\n      return data;\n    })));\n    return bulkResults;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTimestampsForChanges = () => {\n  const utcCurrentTime = dayjs(); //utcCurrentTime = utcCurrentTime.subtract(0.3,  'day');\n\n  const t1 = utcCurrentTime.subtract(1, 'day').startOf('minute').unix();\n  const t2 = utcCurrentTime.subtract(2, 'day').startOf('minute').unix();\n  const tWeek = utcCurrentTime.subtract(1, 'week').startOf('minute').unix();\n  return [t1, t2, tWeek];\n};\nexport const getTokenPairs = async (tokenAddress, tokenAddress1) => {\n  try {\n    var _result$data3, _result$data4, _result$data5, _result$data6, _result$data7;\n\n    // fetch all current and historical data\n    const result = await client.query({\n      query: TOKEN_DATA1(tokenAddress, tokenAddress1),\n      fetchPolicy: 'network-only'\n    });\n    return (_result$data3 = result.data) === null || _result$data3 === void 0 ? void 0 : _result$data3['pairs0'].concat((_result$data4 = result.data) === null || _result$data4 === void 0 ? void 0 : _result$data4['pairs1']).concat((_result$data5 = result.data) === null || _result$data5 === void 0 ? void 0 : _result$data5['pairs2']).concat((_result$data6 = result.data) === null || _result$data6 === void 0 ? void 0 : _result$data6['pairs3']).concat((_result$data7 = result.data) === null || _result$data7 === void 0 ? void 0 : _result$data7['pairs4']);\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTokenPairs2 = async tokenAddress => {\n  try {\n    var _result$data8, _result$data9;\n\n    // fetch all current and historical data\n    const result = await client.query({\n      query: TOKEN_DATA2(tokenAddress),\n      fetchPolicy: 'network-only'\n    });\n    return (_result$data8 = result.data) === null || _result$data8 === void 0 ? void 0 : _result$data8['pairs0'].concat((_result$data9 = result.data) === null || _result$data9 === void 0 ? void 0 : _result$data9['pairs1']);\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTopPairs = async count => {\n  try {\n    var _result$data10;\n\n    // fetch all current and historical data\n    const result = await client.query({\n      query: PAIRS_CURRENT(count),\n      fetchPolicy: 'network-only'\n    });\n    return (_result$data10 = result.data) === null || _result$data10 === void 0 ? void 0 : _result$data10['pairs'];\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport function getSecondsOneDay() {\n  return 60 * 60 * 24;\n}\nexport const getIntervalTokenData = async function (tokenAddress, startTime) {\n  let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3600;\n  let latestBlock = arguments.length > 3 ? arguments[3] : undefined;\n  const utcEndTime = dayjs.utc();\n  let time = startTime; // create an array of hour start times until we reach current hour\n  // buffer by half hour to catch case where graph isnt synced to latest block\n\n  const timestamps = [];\n\n  while (time < utcEndTime.unix()) {\n    timestamps.push(time);\n    time += interval;\n  } // backout if invalid timestamp format\n\n\n  if (timestamps.length === 0) {\n    return [];\n  } // once you have all the timestamps, get the blocks for each timestamp in a bulk query\n\n\n  let blocks;\n\n  try {\n    blocks = await getBlocksFromTimestamps(timestamps, 100); // catch failing case\n\n    if (!blocks || blocks.length === 0) {\n      return [];\n    }\n\n    if (latestBlock) {\n      blocks = blocks.filter(b => {\n        return Number(b.number) <= latestBlock;\n      });\n    }\n\n    const result = await splitQuery(PRICES_BY_BLOCK, client, [tokenAddress], blocks, 50); // format token ETH price results\n\n    const values = [];\n\n    for (const row in result) {\n      var _result$row$derivedET, _result$row;\n\n      const timestamp = row.split('t')[1];\n      const derivedETH = Number((_result$row$derivedET = (_result$row = result[row]) === null || _result$row === void 0 ? void 0 : _result$row.derivedETH) !== null && _result$row$derivedET !== void 0 ? _result$row$derivedET : 0);\n\n      if (timestamp) {\n        values.push({\n          timestamp,\n          derivedETH\n        });\n      }\n    } // go through eth usd prices and assign to original values array\n\n\n    let index = 0;\n\n    for (const brow in result) {\n      const timestamp = brow.split('b')[1];\n\n      if (timestamp) {\n        values[index].priceUSD = result[brow].ethPrice * values[index].derivedETH;\n        index += 1;\n      }\n    }\n\n    const formattedHistory = []; // for each hour, construct the open and close price\n\n    for (let i = 0; i < values.length - 1; i++) {\n      formattedHistory.push({\n        timestamp: values[i].timestamp,\n        open: Number(values[i].priceUSD),\n        close: Number(values[i + 1].priceUSD)\n      });\n    }\n\n    return formattedHistory;\n  } catch (e) {\n    console.log(e);\n    console.log('error fetching blocks');\n    return [];\n  }\n};\nexport const getPairTransactions = async pairAddress => {\n  try {\n    const result = await txClient.query({\n      query: FILTERED_TRANSACTIONS,\n      variables: {\n        allPairs: [pairAddress]\n      },\n      fetchPolicy: 'no-cache'\n    });\n    return {\n      mints: result.data.mints,\n      burns: result.data.burns,\n      swaps: result.data.swaps\n    };\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\nexport const getPairAddress = async (token0Address, token1Address) => {\n  const pairData = await client.query({\n    query: PAIR_ID(token0Address, token1Address)\n  });\n  const pairs = pairData && pairData.data ? pairData.data.pairs0.concat(pairData.data.pairs1) : undefined;\n  if (!pairs || pairs.length === 0) return;\n  const pairId = pairs[0].id;\n  const tokenReversed = pairData.data.pairs1.length > 0;\n  return {\n    pairId,\n    tokenReversed\n  };\n};\nexport const getSwapTransactions = async (pairId, startTime) => {\n  let allFound = false;\n  let swapTx = [];\n  const oneDayAgo = dayjs.utc().subtract(1, 'day').unix();\n  let sTimestamp = startTime !== null && startTime !== void 0 ? startTime : oneDayAgo;\n\n  while (!allFound) {\n    try {\n      const result = await txClient.query({\n        query: SWAP_TRANSACTIONS,\n        variables: {\n          allPairs: [pairId],\n          lastTime: sTimestamp\n        }\n      });\n\n      if (result.data.swaps.length < 1000) {\n        allFound = true;\n      }\n\n      const swaps = result.data.swaps;\n      sTimestamp = Number(swaps[swaps.length - 1].transaction.timestamp);\n      swapTx = swapTx.concat(swaps);\n    } catch (e) {}\n  }\n\n  return swapTx.filter((item, ind, self) => ind === self.findIndex(item1 => item1.transaction.id === item.transaction.id)).reverse();\n};\nexport const getTokenChartData = async (tokenAddress, startTime) => {\n  let data = [];\n  const utcEndTime = dayjs.utc();\n\n  try {\n    let allFound = false;\n    let skip = 0;\n\n    while (!allFound) {\n      const result = await client.query({\n        query: TOKEN_CHART,\n        variables: {\n          startTime: startTime,\n          tokenAddr: tokenAddress,\n          skip\n        },\n        fetchPolicy: 'network-only'\n      });\n\n      if (result.data.tokenDayDatas.length < 1000) {\n        allFound = true;\n      }\n\n      skip += 1000;\n      data = data.concat(result.data.tokenDayDatas);\n    }\n\n    const dayIndexSet = new Set();\n    const dayIndexArray = [];\n    const oneDay = getSecondsOneDay();\n    data.forEach((dayData, i) => {\n      // add the day index to the set of days\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n      dayIndexArray.push(data[i]);\n      dayData.dailyVolumeUSD = Number(dayData.dailyVolumeUSD);\n    }); // fill in empty days\n\n    let timestamp = data[0] && data[0].date ? data[0].date : startTime;\n    let latestLiquidityUSD = data[0] && data[0].totalLiquidityUSD;\n    let latestPriceUSD = data[0] && data[0].priceUSD; //let latestPairDatas = data[0] && data[0].mostLiquidPairs\n\n    let index = 1;\n\n    while (timestamp < utcEndTime.startOf('minute').unix() - oneDay) {\n      const nextDay = timestamp + oneDay;\n      const currentDayIndex = (nextDay / oneDay).toFixed(0);\n\n      if (!dayIndexSet.has(currentDayIndex)) {\n        data.push({\n          date: nextDay,\n          dayString: nextDay,\n          dailyVolumeUSD: 0,\n          priceUSD: latestPriceUSD,\n          totalLiquidityUSD: latestLiquidityUSD //mostLiquidPairs: latestPairDatas,\n\n        });\n      } else {\n        latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD;\n        latestPriceUSD = dayIndexArray[index].priceUSD; //latestPairDatas = dayIndexArray[index].mostLiquidPairs\n\n        index = index + 1;\n      }\n\n      timestamp = nextDay;\n    }\n\n    data = data.sort((a, b) => parseInt(a.date) > parseInt(b.date) ? 1 : -1);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n};\nexport const getPairChartData = async (pairAddress, startTime) => {\n  let data = [];\n  const utcEndTime = dayjs.utc();\n\n  try {\n    let allFound = false;\n    let skip = 0;\n\n    while (!allFound) {\n      const result = await client.query({\n        query: PAIR_CHART,\n        variables: {\n          startTime: startTime,\n          pairAddress: pairAddress,\n          skip\n        },\n        fetchPolicy: 'cache-first'\n      });\n      skip += 1000;\n      data = data.concat(result.data.pairDayDatas);\n\n      if (result.data.pairDayDatas.length < 1000) {\n        allFound = true;\n      }\n    }\n\n    const dayIndexSet = new Set();\n    const dayIndexArray = [];\n    const oneDay = 24 * 60 * 60;\n    data.forEach((dayData, i) => {\n      // add the day index to the set of days\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n      dayIndexArray.push(data[i]);\n      dayData.dailyVolumeUSD = Number(dayData.dailyVolumeUSD);\n      dayData.reserveUSD = Number(dayData.reserveUSD);\n    });\n\n    if (data[0]) {\n      // fill in empty days\n      let timestamp = data[0].date ? data[0].date : startTime;\n      let latestLiquidityUSD = data[0].reserveUSD;\n      let index = 1;\n\n      while (timestamp < utcEndTime.unix() - oneDay) {\n        const nextDay = timestamp + oneDay;\n        const currentDayIndex = (nextDay / oneDay).toFixed(0);\n\n        if (!dayIndexSet.has(currentDayIndex)) {\n          data.push({\n            date: nextDay,\n            dayString: nextDay,\n            dailyVolumeUSD: 0,\n            reserveUSD: latestLiquidityUSD\n          });\n        } else {\n          latestLiquidityUSD = dayIndexArray[index].reserveUSD;\n          index = index + 1;\n        }\n\n        timestamp = nextDay;\n      }\n    }\n\n    data = data.sort((a, b) => parseInt(a.date) > parseInt(b.date) ? 1 : -1);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n};\nexport const getRateData = async (pairAddress, latestBlock, interval, startTime, pairTokenReversed) => {\n  try {\n    var _blocks;\n\n    const utcEndTime = dayjs.utc();\n    let time = startTime; // create an array of hour start times until we reach current hour\n\n    const timestamps = [];\n\n    while (time <= utcEndTime.unix()) {\n      timestamps.push(time);\n      time += interval;\n    } // backout if invalid timestamp format\n\n\n    if (timestamps.length === 0) {\n      return [];\n    } // once you have all the timestamps, get the blocks for each timestamp in a bulk query\n\n\n    let blocks;\n    blocks = await getBlocksFromTimestamps(timestamps, 100); // catch failing case\n\n    if (!blocks || ((_blocks = blocks) === null || _blocks === void 0 ? void 0 : _blocks.length) === 0) {\n      return [];\n    }\n\n    if (latestBlock) {\n      blocks = blocks.filter(b => {\n        return Number(b.number) <= latestBlock;\n      });\n    }\n\n    const result = await splitQuery(HOURLY_PAIR_RATES, client, [pairAddress], blocks, 100); // format token ETH price results\n\n    const values = [];\n\n    for (const row in result) {\n      const timestamp = row.split('t')[1];\n\n      if (timestamp) {\n        var _result$row2, _result$row3;\n\n        values.push({\n          timestamp,\n          rate: pairTokenReversed ? Number((_result$row2 = result[row]) === null || _result$row2 === void 0 ? void 0 : _result$row2.token0Price) : Number((_result$row3 = result[row]) === null || _result$row3 === void 0 ? void 0 : _result$row3.token1Price)\n        });\n      }\n    }\n\n    return values;\n  } catch (e) {\n    console.log(e);\n    return [];\n  }\n};\nexport const getBulkPairData = async (pairList, ethPrice) => {\n  const [t1, t2, tWeek] = getTimestampsForChanges();\n  const a = await getBlocksFromTimestamps([t1, t2, tWeek]);\n  const [{\n    number: b1\n  }, {\n    number: b2\n  }, {\n    number: bWeek\n  }] = a;\n\n  try {\n    var _oneDayResult$data3, _twoDayResult$data3, _oneWeekResult$data2;\n\n    const current = await client.query({\n      query: PAIRS_BULK1,\n      variables: {\n        allPairs: pairList\n      },\n      fetchPolicy: 'network-only'\n    });\n    const [oneDayResult, twoDayResult, oneWeekResult] = await Promise.all([b1, b2, bWeek].map(async block => {\n      const result = await client.query({\n        query: PAIRS_HISTORICAL_BULK(block, pairList),\n        fetchPolicy: 'network-only'\n      });\n      return result;\n    }));\n    const oneDayData = oneDayResult === null || oneDayResult === void 0 ? void 0 : (_oneDayResult$data3 = oneDayResult.data) === null || _oneDayResult$data3 === void 0 ? void 0 : _oneDayResult$data3.pairs.reduce((obj, cur) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    const twoDayData = twoDayResult === null || twoDayResult === void 0 ? void 0 : (_twoDayResult$data3 = twoDayResult.data) === null || _twoDayResult$data3 === void 0 ? void 0 : _twoDayResult$data3.pairs.reduce((obj, cur) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    const oneWeekData = oneWeekResult === null || oneWeekResult === void 0 ? void 0 : (_oneWeekResult$data2 = oneWeekResult.data) === null || _oneWeekResult$data2 === void 0 ? void 0 : _oneWeekResult$data2.pairs.reduce((obj, cur) => {\n      return { ...obj,\n        [cur.id]: cur\n      };\n    }, {});\n    const pairData = await Promise.all(current && current.data.pairs.map(async pair => {\n      var _oneDayHistory$reserv, _oneDayHistory17, _data$reserveUSD, _data, _oneDayHistory$volume, _oneDayHistory18, _data$volumeUSD, _data2, _oneDayHistory$totalS, _oneDayHistory19, _data$totalSupply, _data3, _twoDayHistory$reserv, _twoDayHistory9, _data$reserveUSD2, _data4, _twoDayHistory$volume, _twoDayHistory10, _data$volumeUSD2, _data5, _twoDayHistory$totalS, _twoDayHistory11, _data$totalSupply2, _data6, _oneWeekHistory$reser, _oneWeekHistory5, _data$reserveUSD3, _data7, _oneWeekHistory$volum, _oneWeekHistory6, _data$volumeUSD3, _data8, _oneWeekHistory$total2, _oneWeekHistory7, _data$totalSupply3, _data9;\n\n      let data = pair;\n      let oneDayHistory = oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData[pair.id];\n\n      if (!oneDayHistory) {\n        const newData = await client.query({\n          query: PAIR_DATA(pair.id, b1),\n          fetchPolicy: 'network-only'\n        });\n        oneDayHistory = newData.data.pairs[0];\n      }\n\n      let twoDayHistory = twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData[pair.id];\n\n      if (!twoDayHistory) {\n        const newData = await client.query({\n          query: PAIR_DATA(pair.id, b2),\n          fetchPolicy: 'network-only'\n        });\n        twoDayHistory = newData.data.pairs[0];\n      }\n\n      let oneWeekHistory = oneWeekData === null || oneWeekData === void 0 ? void 0 : oneWeekData[pair.id];\n\n      if (!oneWeekHistory) {\n        const newData = await client.query({\n          query: PAIR_DATA(pair.id, bWeek),\n          fetchPolicy: 'network-only'\n        });\n        oneWeekHistory = newData.data.pairs[0];\n      } // this is because old history data returns exact same data as current data when the old data does not exist\n\n\n      if (Number((_oneDayHistory$reserv = (_oneDayHistory17 = oneDayHistory) === null || _oneDayHistory17 === void 0 ? void 0 : _oneDayHistory17.reserveUSD) !== null && _oneDayHistory$reserv !== void 0 ? _oneDayHistory$reserv : 0) === Number((_data$reserveUSD = (_data = data) === null || _data === void 0 ? void 0 : _data.reserveUSD) !== null && _data$reserveUSD !== void 0 ? _data$reserveUSD : 0) && Number((_oneDayHistory$volume = (_oneDayHistory18 = oneDayHistory) === null || _oneDayHistory18 === void 0 ? void 0 : _oneDayHistory18.volumeUSD) !== null && _oneDayHistory$volume !== void 0 ? _oneDayHistory$volume : 0) === Number((_data$volumeUSD = (_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.volumeUSD) !== null && _data$volumeUSD !== void 0 ? _data$volumeUSD : 0) && Number((_oneDayHistory$totalS = (_oneDayHistory19 = oneDayHistory) === null || _oneDayHistory19 === void 0 ? void 0 : _oneDayHistory19.totalSupply) !== null && _oneDayHistory$totalS !== void 0 ? _oneDayHistory$totalS : 0) === Number((_data$totalSupply = (_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.totalSupply) !== null && _data$totalSupply !== void 0 ? _data$totalSupply : 0)) {\n        oneDayHistory = null;\n      }\n\n      if (Number((_twoDayHistory$reserv = (_twoDayHistory9 = twoDayHistory) === null || _twoDayHistory9 === void 0 ? void 0 : _twoDayHistory9.reserveUSD) !== null && _twoDayHistory$reserv !== void 0 ? _twoDayHistory$reserv : 0) === Number((_data$reserveUSD2 = (_data4 = data) === null || _data4 === void 0 ? void 0 : _data4.reserveUSD) !== null && _data$reserveUSD2 !== void 0 ? _data$reserveUSD2 : 0) && Number((_twoDayHistory$volume = (_twoDayHistory10 = twoDayHistory) === null || _twoDayHistory10 === void 0 ? void 0 : _twoDayHistory10.volumeUSD) !== null && _twoDayHistory$volume !== void 0 ? _twoDayHistory$volume : 0) === Number((_data$volumeUSD2 = (_data5 = data) === null || _data5 === void 0 ? void 0 : _data5.volumeUSD) !== null && _data$volumeUSD2 !== void 0 ? _data$volumeUSD2 : 0) && Number((_twoDayHistory$totalS = (_twoDayHistory11 = twoDayHistory) === null || _twoDayHistory11 === void 0 ? void 0 : _twoDayHistory11.totalSupply) !== null && _twoDayHistory$totalS !== void 0 ? _twoDayHistory$totalS : 0) === Number((_data$totalSupply2 = (_data6 = data) === null || _data6 === void 0 ? void 0 : _data6.totalSupply) !== null && _data$totalSupply2 !== void 0 ? _data$totalSupply2 : 0)) {\n        twoDayHistory = null;\n      }\n\n      if (Number((_oneWeekHistory$reser = (_oneWeekHistory5 = oneWeekHistory) === null || _oneWeekHistory5 === void 0 ? void 0 : _oneWeekHistory5.reserveUSD) !== null && _oneWeekHistory$reser !== void 0 ? _oneWeekHistory$reser : 0) === Number((_data$reserveUSD3 = (_data7 = data) === null || _data7 === void 0 ? void 0 : _data7.reserveUSD) !== null && _data$reserveUSD3 !== void 0 ? _data$reserveUSD3 : 0) && Number((_oneWeekHistory$volum = (_oneWeekHistory6 = oneWeekHistory) === null || _oneWeekHistory6 === void 0 ? void 0 : _oneWeekHistory6.volumeUSD) !== null && _oneWeekHistory$volum !== void 0 ? _oneWeekHistory$volum : 0) === Number((_data$volumeUSD3 = (_data8 = data) === null || _data8 === void 0 ? void 0 : _data8.volumeUSD) !== null && _data$volumeUSD3 !== void 0 ? _data$volumeUSD3 : 0) && Number((_oneWeekHistory$total2 = (_oneWeekHistory7 = oneWeekHistory) === null || _oneWeekHistory7 === void 0 ? void 0 : _oneWeekHistory7.totalSupply) !== null && _oneWeekHistory$total2 !== void 0 ? _oneWeekHistory$total2 : 0) === Number((_data$totalSupply3 = (_data9 = data) === null || _data9 === void 0 ? void 0 : _data9.totalSupply) !== null && _data$totalSupply3 !== void 0 ? _data$totalSupply3 : 0)) {\n        oneWeekHistory = null;\n      }\n\n      data = parseData(data, oneDayHistory, twoDayHistory, oneWeekHistory, ethPrice, b1);\n      return data;\n    }));\n    return pairData;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst parseData = (data, oneDayData, twoDayData, oneWeekData, ethPrice, oneDayBlock) => {\n  // get volume changes\n  const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data !== null && data !== void 0 && data.volumeUSD ? data.volumeUSD : 0, oneDayData !== null && oneDayData !== void 0 && oneDayData.volumeUSD ? oneDayData.volumeUSD : 0, twoDayData !== null && twoDayData !== void 0 && twoDayData.volumeUSD ? twoDayData.volumeUSD : 0);\n  const [oneDayVolumeUntracked, volumeChangeUntracked] = get2DayPercentChange(data === null || data === void 0 ? void 0 : data.untrackedVolumeUSD, oneDayData !== null && oneDayData !== void 0 && oneDayData.untrackedVolumeUSD ? Number(oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.untrackedVolumeUSD) : 0, twoDayData !== null && twoDayData !== void 0 && twoDayData.untrackedVolumeUSD ? twoDayData === null || twoDayData === void 0 ? void 0 : twoDayData.untrackedVolumeUSD : 0);\n  const oneWeekVolumeUSD = Number(oneWeekData ? (data === null || data === void 0 ? void 0 : data.volumeUSD) - (oneWeekData === null || oneWeekData === void 0 ? void 0 : oneWeekData.volumeUSD) : data.volumeUSD);\n  const oneWeekVolumeUntracked = Number(oneWeekData ? (data === null || data === void 0 ? void 0 : data.untrackedVolumeUSD) - (oneWeekData === null || oneWeekData === void 0 ? void 0 : oneWeekData.untrackedVolumeUSD) : data.untrackedVolumeUSD); // set volume properties\n\n  data.oneDayVolumeUSD = oneDayVolumeUSD;\n  data.oneWeekVolumeUSD = oneWeekVolumeUSD;\n  data.volumeChangeUSD = volumeChangeUSD;\n  data.oneDayVolumeUntracked = oneDayVolumeUntracked;\n  data.oneWeekVolumeUntracked = oneWeekVolumeUntracked;\n  data.volumeChangeUntracked = volumeChangeUntracked; // set liquidity properties\n\n  data.trackedReserveUSD = data.trackedReserveETH * ethPrice;\n  data.liquidityChangeUSD = getPercentChange(data.reserveUSD, oneDayData === null || oneDayData === void 0 ? void 0 : oneDayData.reserveUSD); // format if pair hasnt existed for a day or a week\n\n  if (!oneDayData && data && data.createdAtBlockNumber > oneDayBlock) {\n    data.oneDayVolumeUSD = Number(data.volumeUSD);\n  }\n\n  if (!oneDayData && data) {\n    data.oneDayVolumeUSD = Number(data.volumeUSD);\n  }\n\n  if (!oneWeekData && data) {\n    data.oneWeekVolumeUSD = Number(data.volumeUSD);\n  } // format incorrect names\n\n\n  updateNameData(data);\n  return data;\n};\n\nexport function updateNameData(data) {\n  var _data$token, _data$token2;\n\n  if (data !== null && data !== void 0 && (_data$token = data.token0) !== null && _data$token !== void 0 && _data$token.id && Object.keys(TOKEN_OVERRIDES).includes(data.token0.id)) {\n    data.token0.name = TOKEN_OVERRIDES[data.token0.id].name;\n    data.token0.symbol = TOKEN_OVERRIDES[data.token0.id].symbol;\n  }\n\n  if (data !== null && data !== void 0 && (_data$token2 = data.token1) !== null && _data$token2 !== void 0 && _data$token2.id && Object.keys(TOKEN_OVERRIDES).includes(data.token1.id)) {\n    data.token1.name = TOKEN_OVERRIDES[data.token1.id].name;\n    data.token1.symbol = TOKEN_OVERRIDES[data.token1.id].symbol;\n  }\n\n  return data;\n}\nexport async function getGlobalData(ethPrice, oldEthPrice) {\n  // data for each day , historic data used for % changes\n  let data = {};\n  let oneDayData = {};\n  let twoDayData = {};\n\n  try {\n    // get timestamps for the days\n    const utcCurrentTime = dayjs(); //utcCurrentTime = utcCurrentTime.subtract(0.3, 'day');\n\n    const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n    const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n    const utcOneWeekBack = utcCurrentTime.subtract(1, 'week').unix();\n    const utcTwoWeeksBack = utcCurrentTime.subtract(2, 'week').unix(); // get the blocks needed for time travel queries\n\n    const [oneDayBlock, twoDayBlock, oneWeekBlock, twoWeekBlock] = await getBlocksFromTimestamps([utcOneDayBack, utcTwoDaysBack, utcOneWeekBack, utcTwoWeeksBack]); // fetch the global data\n\n    const result = await client.query({\n      query: GLOBAL_DATA(),\n      fetchPolicy: 'network-only'\n    });\n    data = result.data.uniswapFactories[0];\n    const queryReq = [{\n      index: 'result',\n      block: null\n    }, {\n      index: 'oneDayData',\n      block: oneDayBlock === null || oneDayBlock === void 0 ? void 0 : oneDayBlock.number\n    }, {\n      index: 'twoDayData',\n      block: twoDayBlock === null || twoDayBlock === void 0 ? void 0 : twoDayBlock.number\n    }, {\n      index: 'oneWeekData',\n      block: oneWeekBlock === null || oneWeekBlock === void 0 ? void 0 : oneWeekBlock.number\n    }, {\n      index: 'twoWeekData',\n      block: twoWeekBlock === null || twoWeekBlock === void 0 ? void 0 : twoWeekBlock.number\n    }];\n    const allData = await client.query({\n      query: GLOBAL_ALLDATA(queryReq),\n      fetchPolicy: 'network-only'\n    });\n    data = allData.data['result'][0];\n    oneDayData = allData.data['oneDayData'][0];\n    twoDayData = allData.data['twoDayData'][0];\n    const oneWeekData = allData.data['oneWeekData'][0];\n    const twoWeekData = allData.data['twoWeekData'][0];\n\n    if (data && oneDayData && twoDayData && twoWeekData) {\n      const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data.totalVolumeUSD, oneDayData.totalVolumeUSD ? oneDayData.totalVolumeUSD : 0, twoDayData.totalVolumeUSD ? twoDayData.totalVolumeUSD : 0);\n      const [oneWeekVolume, weeklyVolumeChange] = get2DayPercentChange(data.totalVolumeUSD, oneWeekData.totalVolumeUSD, twoWeekData.totalVolumeUSD);\n      const [oneDayTxns, txnChange] = get2DayPercentChange(data.txCount, oneDayData.txCount ? oneDayData.txCount : 0, twoDayData.txCount ? twoDayData.txCount : 0); // format the total liquidity in USD\n\n      const liquidityChangeUSD = getPercentChange(data.totalLiquidityETH * ethPrice, oneDayData.totalLiquidityETH * oldEthPrice);\n      return { ...data,\n        totalLiquidityUSD: data.totalLiquidityETH * ethPrice,\n        oneDayVolumeUSD,\n        oneWeekVolume,\n        weeklyVolumeChange,\n        volumeChangeUSD,\n        liquidityChangeUSD,\n        oneDayTxns,\n        txnChange\n      };\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n}\nexport async function getAllPairsOnUniswap() {\n  try {\n    let allFound = false;\n    let pairs = [];\n    let skipCount = 0;\n\n    while (!allFound) {\n      var _result$data11, _result$data12;\n\n      const result = await client.query({\n        query: ALL_PAIRS,\n        variables: {\n          skip: skipCount\n        },\n        fetchPolicy: 'network-only'\n      });\n      skipCount = skipCount + 10;\n      pairs = pairs.concat(result === null || result === void 0 ? void 0 : (_result$data11 = result.data) === null || _result$data11 === void 0 ? void 0 : _result$data11.pairs);\n\n      if ((result === null || result === void 0 ? void 0 : (_result$data12 = result.data) === null || _result$data12 === void 0 ? void 0 : _result$data12.pairs.length) < 10 || pairs.length > 10) {\n        allFound = true;\n      }\n    }\n\n    return pairs;\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport async function getAllTokensOnUniswap() {\n  try {\n    let allFound = false;\n    let skipCount = 0;\n    let tokens = [];\n\n    while (!allFound) {\n      var _result$data13, _result$data14, _result$data14$tokens;\n\n      const result = await client.query({\n        query: ALL_TOKENS,\n        variables: {\n          skip: skipCount\n        },\n        fetchPolicy: 'network-only'\n      });\n      tokens = tokens.concat(result === null || result === void 0 ? void 0 : (_result$data13 = result.data) === null || _result$data13 === void 0 ? void 0 : _result$data13.tokens);\n\n      if ((result === null || result === void 0 ? void 0 : (_result$data14 = result.data) === null || _result$data14 === void 0 ? void 0 : (_result$data14$tokens = _result$data14.tokens) === null || _result$data14$tokens === void 0 ? void 0 : _result$data14$tokens.length) < 10 || tokens.length > 10) {\n        allFound = true;\n      }\n\n      skipCount = skipCount += 10;\n    }\n\n    return tokens;\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport const getChartData = async oldestDateToFetch => {\n  let data = [];\n  const weeklyData = [];\n  const utcEndTime = dayjs.utc();\n  let skip = 0;\n  let allFound = false;\n\n  try {\n    while (!allFound) {\n      const result = await client.query({\n        query: GLOBAL_CHART,\n        variables: {\n          startTime: oldestDateToFetch,\n          skip\n        },\n        fetchPolicy: 'network-only'\n      });\n      skip += 1000;\n      data = data.concat(result.data.uniswapDayDatas.map(item => {\n        return { ...item,\n          dailyVolumeUSD: Number(item.dailyVolumeUSD)\n        };\n      }));\n\n      if (result.data.uniswapDayDatas.length < 1000) {\n        allFound = true;\n      }\n    }\n\n    if (data) {\n      const dayIndexSet = new Set();\n      const dayIndexArray = [];\n      const oneDay = 24 * 60 * 60; // for each day, parse the daily volume and format for chart array\n\n      data.forEach((dayData, i) => {\n        // add the day index to the set of days\n        dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n        dayIndexArray.push(data[i]);\n      }); // fill in empty days ( there will be no day datas if no trades made that day )\n\n      let timestamp = data[0].date ? data[0].date : oldestDateToFetch;\n      let latestLiquidityUSD = data[0].totalLiquidityUSD;\n      let latestDayDats = data[0].mostLiquidTokens;\n      let index = 1;\n\n      while (timestamp < utcEndTime.unix() - oneDay) {\n        const nextDay = timestamp + oneDay;\n        const currentDayIndex = (nextDay / oneDay).toFixed(0);\n\n        if (!dayIndexSet.has(currentDayIndex)) {\n          data.push({\n            date: nextDay,\n            dailyVolumeUSD: 0,\n            totalLiquidityUSD: latestLiquidityUSD,\n            mostLiquidTokens: latestDayDats\n          });\n        } else {\n          latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD;\n          latestDayDats = dayIndexArray[index].mostLiquidTokens;\n          index = index + 1;\n        }\n\n        timestamp = nextDay;\n      }\n    } // format weekly data for weekly sized chunks\n\n\n    data = data.sort((a, b) => parseInt(a.date) > parseInt(b.date) ? 1 : -1);\n    let startIndexWeekly = -1;\n    let currentWeek = -1;\n    data.forEach((entry, i) => {\n      var _weeklyData$startInde;\n\n      const week = dayjs.utc(dayjs.unix(data[i].date)).week();\n\n      if (week !== currentWeek) {\n        currentWeek = week;\n        startIndexWeekly++;\n      }\n\n      weeklyData[startIndexWeekly] = weeklyData[startIndexWeekly] || {};\n      weeklyData[startIndexWeekly].date = data[i].date;\n      weeklyData[startIndexWeekly].weeklyVolumeUSD = ((_weeklyData$startInde = weeklyData[startIndexWeekly].weeklyVolumeUSD) !== null && _weeklyData$startInde !== void 0 ? _weeklyData$startInde : 0) + data[i].dailyVolumeUSD;\n    });\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [data, weeklyData];\n};\nexport function isAddress(value) {\n  try {\n    return getAddress(value || '');\n  } catch {\n    return false;\n  }\n}\n/**\n * Given the price impact, get user confirmation.\n *\n * @param priceImpactWithoutFee price impact of the trade without the fee.\n */\n\nexport function confirmPriceImpactWithoutFee(priceImpactWithoutFee) {\n  if (!priceImpactWithoutFee.lessThan(GlobalValue.percents.PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN)) {\n    return window.prompt(`This swap has a price impact of at least ${GlobalValue.percents.PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN.toFixed(0)}%. Please type the word \"confirm\" to continue with this swap.`) === 'confirm';\n  } else if (!priceImpactWithoutFee.lessThan(GlobalValue.percents.ALLOWED_PRICE_IMPACT_HIGH)) {\n    return window.confirm(`This swap has a price impact of at least ${GlobalValue.percents.ALLOWED_PRICE_IMPACT_HIGH.toFixed(0)}%. Please confirm that you would like to continue with this swap.`);\n  }\n\n  return true;\n}\nexport function currencyId(currency) {\n  if (currency === ETHER) return 'ETH';\n  if (currency instanceof Token) return currency.address;\n  throw new Error('invalid currency');\n}\nexport function calculateSlippageAmount(value, slippage) {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`);\n  }\n\n  return [JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)), JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))];\n}\nexport function maxAmountSpend(currencyAmount) {\n  if (!currencyAmount) return undefined;\n\n  if (currencyAmount.currency === ETHER) {\n    if (JSBI.greaterThan(currencyAmount.raw, GlobalConst.utils.MIN_ETH)) {\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, GlobalConst.utils.MIN_ETH));\n    } else {\n      return CurrencyAmount.ether(JSBI.BigInt(0));\n    }\n  }\n\n  return currencyAmount;\n}\nexport function isTokenOnList(defaultTokens, currency) {\n  var _defaultTokens$curren;\n\n  if (currency === ETHER) return true;\n  return Boolean(currency instanceof Token && ((_defaultTokens$curren = defaultTokens[currency.chainId]) === null || _defaultTokens$curren === void 0 ? void 0 : _defaultTokens$curren[currency.address]));\n}\nexport function isTokensOnList(defaultTokens, currencies) {\n  return currencies.map(currency => {\n    var _defaultTokens$curren2;\n\n    if (currency === ETHER) return true;\n    return Boolean(currency instanceof Token && ((_defaultTokens$curren2 = defaultTokens[currency.chainId]) === null || _defaultTokens$curren2 === void 0 ? void 0 : _defaultTokens$curren2[currency.address]));\n  });\n}\nexport function getEtherscanLink(chainId, data, type) {\n  const prefix = 'https://' + (chainId === 538 ? 'mumbai.' : '') + 'polygonscan.com';\n\n  switch (type) {\n    case 'transaction':\n      {\n        return `${prefix}/tx/${data}`;\n      }\n\n    case 'token':\n      {\n        return `${prefix}/token/${data}`;\n      }\n\n    case 'block':\n      {\n        return `${prefix}/block/${data}`;\n      }\n\n    case 'address':\n    default:\n      {\n        return `${prefix}/address/${data}`;\n      }\n  }\n}\nexport function basisPointsToPercent(num) {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\n} // shorten the checksummed version of the input address to have 0x + 4 characters at start and end\n\nexport function shortenAddress(address) {\n  let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const parsed = isAddress(address);\n\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n}\nexport const shortenTx = tx => {\n  if (tx.length) {\n    const txLength = tx.length;\n    const first = tx.slice(0, 6);\n    const last = tx.slice(txLength - 4, txLength);\n    return `${first}...${last}`;\n  }\n\n  return '';\n};\nexport function getLibrary(provider) {\n  const library = new Web3Provider(provider, 'any');\n  library.pollingInterval = 15000;\n  return library;\n}\nexport function isZero(hexNumberString) {\n  return /^0x0*$/.test(hexNumberString);\n}\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n}\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n}\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\nexport function calculateGasMargin(value) {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\n}\nexport function formatDateFromTimeStamp(timestamp, format) {\n  let addedDay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return dayjs.unix(timestamp).add(addedDay, 'day').utc().format(format);\n}\nexport function getFormattedPrice(price) {\n  if (price < 0.001 && price > 0) {\n    return '<0.001';\n  } else if (price > -0.001 && price < 0) {\n    return '>-0.001';\n  } else {\n    const beforeSign = price > 0 ? '+' : '';\n    return beforeSign + price.toLocaleString();\n  }\n} // set different bg and text colors for price percent badge according to price.\n\nexport function getPriceClass(price) {\n  if (price > 0) {\n    return 'bg-successLight text-success';\n  } else if (price === 0) {\n    return 'bg-gray1 text-hint';\n  } else {\n    return 'bg-errorLight text-error';\n  }\n}\nexport function getDaysCurrentYear() {\n  const year = Number(dayjs().format('YYYY'));\n  return year % 4 === 0 && year % 100 > 0 || year % 400 == 0 ? 366 : 365;\n}\nexport function getOneYearFee(dayVolume, reserveUSD) {\n  if (!dayVolume || !reserveUSD) {\n    return 0;\n  }\n\n  return dayVolume * GlobalConst.utils.FEEPERCENT * getDaysCurrentYear() / reserveUSD;\n}\nexport function getAPYWithFee(rewards, fee) {\n  return fee > 0 ? ((1 + (rewards + fee / 12) * 12 / 12) ** 12 - 1) * 100 : 0;\n}\nexport function formatAPY(apy) {\n  if (apy > 100000000) {\n    return '>100000000';\n  } else {\n    return apy.toLocaleString();\n  }\n}\nexport function formatNumber(unformatted) {\n  let showDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  // get fraction digits for small number\n  if (!unformatted) return 0;\n  const absNumber = Math.abs(Number(unformatted));\n\n  if (absNumber > 0) {\n    const digits = Math.ceil(Math.log10(1 / absNumber));\n\n    if (digits < 3) {\n      return Number(unformatted).toLocaleString();\n    } else {\n      return Number(unformatted).toFixed(digits + showDigits);\n    }\n  } else {\n    return 0;\n  }\n}\nexport function getTokenFromAddress(tokenAddress, chainId, tokenMap, tokens) {\n  const wrappedTokenInfo = tokenMap[chainId][tokenAddress];\n\n  if (!wrappedTokenInfo) {\n    console.log('missing from token list:' + tokenAddress);\n    const token = tokens.find(item => item.address.toLowerCase() === tokenAddress.toLowerCase());\n\n    if (!token) {\n      const commonToken = Object.values(GlobalValue.tokens.COMMON).find(token => token.address.toLowerCase() === tokenAddress.toLowerCase());\n\n      if (!commonToken) {\n        return GlobalValue.tokens.COMMON.EMPTY;\n      }\n\n      return commonToken;\n    }\n\n    return token;\n  }\n\n  return wrappedTokenInfo;\n}\nexport function getChartDates(chartData, durationIndex) {\n  if (chartData) {\n    const dates = [];\n    chartData.forEach((value, ind) => {\n      const month = formatDateFromTimeStamp(Number(value.date), 'MMM');\n      const monthLastDate = ind > 0 ? formatDateFromTimeStamp(Number(chartData[ind - 1].date), 'MMM') : '';\n\n      if (monthLastDate !== month) {\n        dates.push(month);\n      }\n\n      if (durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART || durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART) {\n        const dateStr = formatDateFromTimeStamp(Number(value.date), 'D');\n\n        if (Number(dateStr) % (durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART ? 3 : 7) === 0) {\n          //Select dates(one date per 3 days for 1 month chart and 7 days for 3 month chart) for x axis values of volume chart on week mode\n          dates.push(dateStr);\n        }\n      }\n    });\n    return dates;\n  } else {\n    return [];\n  }\n}\nexport function getChartStartTime(durationIndex) {\n  const utcEndTime = dayjs.utc();\n  const months = durationIndex === GlobalConst.analyticChart.SIX_MONTH_CHART ? 6 : durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART ? 3 : 1;\n  const startTime = utcEndTime.subtract(months, durationIndex === GlobalConst.analyticChart.ONE_YEAR_CHART ? 'year' : 'month').endOf('day').unix() - 1;\n  return startTime;\n}\nexport function getLimitedData(data, count) {\n  const dataCount = data.length;\n  const newArray = [];\n  data.forEach((value, index) => {\n    if (dataCount <= count) {\n      newArray.push(value);\n    } else {\n      if (index === dataCount - Math.floor(dataCount / count * (count - newArray.length))) {\n        newArray.push(value);\n      }\n    }\n  });\n  return newArray;\n}\nexport function getYAXISValuesAnalytics(chartData) {\n  if (!chartData) return; // multiply 0.99 to the min value of chart values and 1.01 to the max value in order to show all data in graph. Without this, the scale of the graph is set strictly and some values may be hidden.\n\n  const minValue = Math.min(...chartData) * 0.99;\n  const maxValue = Math.max(...chartData) * 1.01;\n  const step = (maxValue - minValue) / 8;\n  const values = [];\n\n  for (let i = 0; i < 9; i++) {\n    values.push(maxValue - i * step);\n  }\n\n  return values;\n}\nexport function getTokenAPRSyrup(syrup) {\n  var _syrup$rewards;\n\n  return syrup.valueOfTotalStakedAmountInUSDC && syrup.valueOfTotalStakedAmountInUSDC > 0 ? ((_syrup$rewards = syrup.rewards) !== null && _syrup$rewards !== void 0 ? _syrup$rewards : 0) / syrup.valueOfTotalStakedAmountInUSDC * getDaysCurrentYear() * 100 : 0;\n}\nexport function useLairDQUICKAPY(isNew, lair) {\n  _s();\n\n  const daysCurrentYear = getDaysCurrentYear();\n  const quickToken = isNew ? GlobalValue.tokens.COMMON.NEW_QUICK : GlobalValue.tokens.COMMON.OLD_QUICK;\n  const quickPrice = useUSDCPriceToken(quickToken);\n  if (!lair) return '';\n  const dQUICKPrice = Number(lair.dQUICKtoQUICK.toExact()) * quickPrice;\n  const dQUICKAPR = Number(lair.oneDayVol) * GlobalConst.utils.DQUICKFEE * GlobalConst.utils.DQUICKAPR_MULTIPLIER / Number(lair.dQuickTotalSupply.toExact()) * daysCurrentYear / dQUICKPrice;\n  if (!dQUICKAPR) return '';\n  const temp = Math.pow(1 + dQUICKAPR / daysCurrentYear, daysCurrentYear) - 1;\n\n  if (temp > 100) {\n    return '> 10000';\n  } else {\n    return Number(temp * 100).toLocaleString();\n  }\n}\n\n_s(useLairDQUICKAPY, \"oBDMGXUYh6XXIW7Xi5hcjR22ukg=\", false, function () {\n  return [useUSDCPriceToken];\n});\n\nexport function returnFullWidthMobile(isMobile) {\n  return isMobile ? 1 : 'unset';\n}\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nexport function getWalletKeys(connector) {\n  const {\n    ethereum\n  } = window;\n  const isMetaMask = !!(ethereum && !ethereum.isBitKeep && ethereum.isMetaMask);\n  const isBitkeep = !!(ethereum && ethereum.isBitKeep);\n  const isBlockWallet = !!(ethereum && ethereum.isBlockWallet);\n  const isCypherDWallet = !!(ethereum && ethereum.isCypherD);\n  return Object.keys(SUPPORTED_WALLETS).filter(k => SUPPORTED_WALLETS[k].connector === connector && (connector !== injected || isCypherDWallet && k == 'CYPHERD' || isBlockWallet && k === 'BLOCKWALLET' || isBitkeep && k === 'BITKEEP' || isMetaMask && k === 'METAMASK'));\n}\nexport function getTokenAddress(token) {\n  var _token$symbol;\n\n  if (!token) return;\n  if (((_token$symbol = token.symbol) === null || _token$symbol === void 0 ? void 0 : _token$symbol.toLowerCase()) === 'wwdoge') return 'ETH';\n  return token.address;\n}\nexport function getRewardRate(rate, rewardToken) {\n  if (!rate || !rewardToken) return;\n  return `${rate.toFixed(2, {\n    groupSeparator: ','\n  }).replace(/[.,]00$/, '')} ${rewardToken.symbol}  / day`;\n}\nexport function getStakedAmountStakingInfo(stakingInfo, userLiquidityUnstaked) {\n  if (!stakingInfo) return;\n  const stakingTokenPair = stakingInfo.stakingTokenPair;\n  const baseTokenCurrency = unwrappedToken(stakingInfo.baseToken);\n  const empty = unwrappedToken(GlobalValue.tokens.COMMON.EMPTY);\n  const token0 = stakingInfo.tokens[0];\n  const baseToken = baseTokenCurrency === empty ? token0 : stakingInfo.baseToken;\n  if (!stakingInfo.totalSupply || !stakingTokenPair || !stakingInfo.totalStakedAmount || !stakingInfo.stakedAmount) return; // take the total amount of LP tokens staked, multiply by ETH value of all LP tokens, divide by all LP tokens\n\n  const valueOfTotalStakedAmountInBaseToken = new TokenAmount(baseToken, JSBI.divide(JSBI.multiply(JSBI.multiply(stakingInfo.totalStakedAmount.raw, stakingTokenPair.reserveOf(baseToken).raw), JSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the WETH they entitle owner to\n  ), stakingInfo.totalSupply.raw));\n  const valueOfMyStakedAmountInBaseToken = new TokenAmount(baseToken, JSBI.divide(JSBI.multiply(JSBI.multiply(stakingInfo.stakedAmount.raw, stakingTokenPair.reserveOf(baseToken).raw), JSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the WETH they entitle owner to\n  ), stakingInfo.totalSupply.raw)); // get the USD value of staked WETH\n\n  const USDPrice = stakingInfo.usdPrice;\n  const valueOfTotalStakedAmountInUSDC = USDPrice === null || USDPrice === void 0 ? void 0 : USDPrice.quote(valueOfTotalStakedAmountInBaseToken);\n  const valueOfMyStakedAmountInUSDC = USDPrice === null || USDPrice === void 0 ? void 0 : USDPrice.quote(valueOfMyStakedAmountInBaseToken);\n  const stakedAmounts = {\n    totalStakedBase: valueOfTotalStakedAmountInBaseToken,\n    totalStakedUSD: valueOfTotalStakedAmountInUSDC,\n    myStakedBase: valueOfMyStakedAmountInBaseToken,\n    myStakedUSD: valueOfMyStakedAmountInUSDC,\n    unStakedBase: undefined,\n    unStakedUSD: undefined\n  };\n  if (!userLiquidityUnstaked) return stakedAmounts;\n  const valueOfUnstakedAmountInBaseToken = new TokenAmount(baseToken, JSBI.divide(JSBI.multiply(JSBI.multiply(userLiquidityUnstaked.raw, stakingTokenPair.reserveOf(baseToken).raw), JSBI.BigInt(2)), stakingInfo.totalSupply.raw));\n  const valueOfUnstakedAmountInUSDC = USDPrice === null || USDPrice === void 0 ? void 0 : USDPrice.quote(valueOfUnstakedAmountInBaseToken);\n  return { ...stakedAmounts,\n    unStakedBase: valueOfUnstakedAmountInBaseToken,\n    unStakedUSD: valueOfUnstakedAmountInUSDC\n  };\n}\nexport function formatTokenAmount(amount) {\n  let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  if (!amount) return '-';\n  const amountStr = amount.toExact();\n\n  if (Math.abs(Number(amountStr)) > 1) {\n    return Number(amountStr).toLocaleString();\n  }\n\n  return amount.toSignificant(digits);\n}\nexport function formatMulDivTokenAmount(amount, otherAmount) {\n  let operator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'mul';\n  let digits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;\n  if (!amount || otherAmount === undefined) return '-';\n  if (otherAmount === 0) return 0;\n  const exactAmount = Number(amount.toExact());\n  let resultAmount;\n  if (operator === 'mul') resultAmount = exactAmount * Number(otherAmount);else resultAmount = exactAmount / Number(otherAmount);\n  if (Math.abs(resultAmount) > 1) return resultAmount.toLocaleString();\n  if (operator === 'mul') return amount.multiply(otherAmount.toString()).toSignificant(digits);\n  return amount.divide(otherAmount.toString()).toSignificant(digits);\n}\nexport function getTVLStaking(valueOfTotalStakedAmountInUSDC, valueOfTotalStakedAmountInBaseToken) {\n  if (!valueOfTotalStakedAmountInUSDC) {\n    return `${formatTokenAmount(valueOfTotalStakedAmountInBaseToken)} ETH`;\n  }\n\n  return `$${formatTokenAmount(valueOfTotalStakedAmountInUSDC)}`;\n}\nexport function getUSDString(usdValue) {\n  if (!usdValue) return '$0';\n  const value = Number(usdValue.toExact());\n  if (value > 0 && value < 0.001) return '< $0.001';\n  return `$${value.toLocaleString()}`;\n}\nexport function getEarnedUSDSyrup(syrup) {\n  if (!syrup || !syrup.earnedAmount || !syrup.rewardTokenPriceinUSD) return '-';\n  const earnedUSD = Number(syrup.earnedAmount.toExact()) * Number(syrup.rewardTokenPriceinUSD);\n  if (earnedUSD > 0 && earnedUSD < 0.001) return '< $0.001';\n  return `$${earnedUSD.toLocaleString()}`;\n}\nexport function getEarnedUSDLPFarm(stakingInfo) {\n  if (!stakingInfo || !stakingInfo.earnedAmount) return;\n  const earnedUSD = Number(stakingInfo.earnedAmount.toExact()) * stakingInfo.rewardTokenPrice;\n\n  if (earnedUSD < 0.001 && earnedUSD > 0) {\n    return '< $0.001';\n  }\n\n  return `$${earnedUSD.toLocaleString()}`;\n}\nexport function getEarnedUSDDualFarm(stakingInfo) {\n  if (!stakingInfo || !stakingInfo.earnedAmountA || !stakingInfo.earnedAmountB) return;\n  const earnedUSD = Number(stakingInfo.earnedAmountA.toExact()) * stakingInfo.rewardTokenAPrice + Number(stakingInfo.earnedAmountB.toExact()) * Number(stakingInfo.rewardTokenBPrice);\n\n  if (earnedUSD < 0.001 && earnedUSD > 0) {\n    return '< $0.001';\n  }\n\n  return `$${earnedUSD.toLocaleString()}`;\n}\nexport function isSupportedNetwork(ethereum) {\n  return Number(ethereum.chainId) === 2000;\n}\nexport function getPageItemsToLoad(index, countsPerPage) {\n  return index === 0 ? countsPerPage : countsPerPage * index;\n}\nexport function getExactTokenAmount(amount) {\n  if (!amount) return 0;\n  return Number(amount.toExact());\n} // this is useful when the value has more digits than token decimals\n\nexport function getValueTokenDecimals(value, token) {\n  if (!token) return '0';\n  const valueDigits = value.split('.');\n  const valueDigitStr = valueDigits.length > 1 ? valueDigits[1] : '';\n  const valueDigitCount = valueDigitStr.length;\n\n  if (valueDigitCount > token.decimals) {\n    return value.substring(0, value.length - (valueDigitCount - token.decimals));\n  }\n\n  return value;\n}\nexport function getPartialTokenAmount(percent, amount) {\n  if (!amount) return '0';\n  if (percent === 100) return amount.toExact();\n  const partialAmount = Number(amount.toExact()) * percent / 100;\n  return getValueTokenDecimals(partialAmount.toString(), amount.currency);\n}\nexport function getResultFromCallState(callState) {\n  if (!callState || !callState.result || !callState.result[0]) {\n    return;\n  }\n\n  return callState.result[0];\n}\nexport function initTokenAmountFromCallResult(token, callState) {\n  if (!callState || !callState.result || !callState.result[0]) return;\n  return new TokenAmount(token, JSBI.BigInt(callState.result[0]));\n}\nexport function getFarmLPToken(info) {\n  const lp = info.lp;\n  const dummyPair = new Pair(new TokenAmount(info.tokens[0], '0'), new TokenAmount(info.tokens[1], '0'));\n  if (lp && lp !== '') return new Token(2000, lp, 18, 'SLP', 'Staked LP');\n  return dummyPair.liquidityToken;\n}\nexport function getSyrupLPToken(info) {\n  const lp = info.lp;\n  if (lp && lp !== '') return new Token(2000, lp, 18, 'SLP', 'Staked LP');\n  return info.stakingToken;\n}\nexport function getCallStateResult(callState) {\n  if (callState && callState.result) return callState.result[0];\n  return;\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/utils/index.ts"],"names":["getAddress","Contract","dayjs","utc","weekOfYear","blockClient","client","txClient","GET_BLOCK","GLOBAL_DATA","GLOBAL_CHART","GET_BLOCKS","TOKENS_CURRENT","TOKENS_DYNAMIC","TOKEN_CHART","TOKEN_DATA1","TOKEN_DATA2","PAIR_CHART","PAIR_DATA","PAIRS_BULK1","PAIRS_HISTORICAL_BULK","PRICES_BY_BLOCK","PAIRS_CURRENT","ALL_PAIRS","ALL_TOKENS","TOKEN_INFO","TOKEN_INFO_OLD","FILTERED_TRANSACTIONS","SWAP_TRANSACTIONS","HOURLY_PAIR_RATES","GLOBAL_ALLDATA","ETH_PRICE","PAIR_ID","Web3Provider","CurrencyAmount","Percent","JSBI","ETHER","Token","TokenAmount","Pair","BigNumber","formatUnits","AddressZero","GlobalConst","GlobalValue","SUPPORTED_WALLETS","unwrappedToken","useUSDCPriceToken","injected","extend","default","addMaticToMetamask","TOKEN_OVERRIDES","name","symbol","getBlockFromTimestamp","timestamp","result","query","variables","timestampFrom","timestampTo","fetchPolicy","data","blocks","number","formatCompact","unformatted","decimals","maximumFractionDigits","maxPrecision","formatter","Intl","NumberFormat","notation","Infinity","formatted","Number","toString","format","toPrecision","getPercentChange","valueNow","value24HoursAgo","adjustedPercentChange","isNaN","isFinite","splitQuery","localClient","vars","list","skipCount","fetchedData","allFound","skip","end","length","sliced","slice","Object","keys","getBlocksFromTimestamps","timestamps","t","push","split","get2DayPercentChange","value48HoursAgo","currentChange","previousChange","getEthPrice","utcCurrentTime","utcOneDayBack","subtract","unix","ethPrice","ethPriceOneDay","priceChangeETH","oneDayBlock","resultOneDay","currentPrice","bundles","oneDayBackPrice","e","console","log","getTokenInfo","ethPriceOld","address","utcTwoDaysBack","utcOneWeekBack","twoDayBlock","oneWeekBlock","current","oneDayResult","twoDayResult","oneWeekResult","oneDayData","tokens","reduce","obj","cur","id","twoDayData","oneWeekData","bulkResults","Promise","all","map","token","oneDayHistory","twoDayHistory","oneWeekHistory","totalLiquidity","tradeVolume","derivedETH","oneDayVolumeUSD","volumeChangeUSD","tradeVolumeUSD","oneWeekVolumeUSD","currentLiquidityUSD","oldLiquidityUSD","priceChangeUSD","priceUSD","totalLiquidityUSD","liquidityChangeUSD","oneDayVolumeETH","updateNameData","token0","aaveData","pairs","reserveUSD","getTopTokens","count","getTimestampsForChanges","t1","startOf","t2","tWeek","getTokenPairs","tokenAddress","tokenAddress1","concat","getTokenPairs2","getTopPairs","getSecondsOneDay","getIntervalTokenData","startTime","interval","latestBlock","utcEndTime","time","filter","b","values","row","index","brow","formattedHistory","i","open","close","getPairTransactions","pairAddress","allPairs","mints","burns","swaps","getPairAddress","token0Address","token1Address","pairData","pairs0","pairs1","undefined","pairId","tokenReversed","getSwapTransactions","swapTx","oneDayAgo","sTimestamp","lastTime","transaction","item","ind","self","findIndex","item1","reverse","getTokenChartData","tokenAddr","tokenDayDatas","dayIndexSet","Set","dayIndexArray","oneDay","forEach","dayData","add","date","toFixed","dailyVolumeUSD","latestLiquidityUSD","latestPriceUSD","nextDay","currentDayIndex","has","dayString","sort","a","parseInt","getPairChartData","pairDayDatas","getRateData","pairTokenReversed","rate","token0Price","token1Price","getBulkPairData","pairList","b1","b2","bWeek","block","pair","newData","volumeUSD","totalSupply","parseData","oneDayVolumeUntracked","volumeChangeUntracked","untrackedVolumeUSD","oneWeekVolumeUntracked","trackedReserveUSD","trackedReserveETH","createdAtBlockNumber","includes","token1","getGlobalData","oldEthPrice","utcTwoWeeksBack","twoWeekBlock","uniswapFactories","queryReq","allData","twoWeekData","totalVolumeUSD","oneWeekVolume","weeklyVolumeChange","oneDayTxns","txnChange","txCount","totalLiquidityETH","getAllPairsOnUniswap","getAllTokensOnUniswap","getChartData","oldestDateToFetch","weeklyData","uniswapDayDatas","latestDayDats","mostLiquidTokens","startIndexWeekly","currentWeek","entry","week","weeklyVolumeUSD","isAddress","value","confirmPriceImpactWithoutFee","priceImpactWithoutFee","lessThan","percents","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","window","prompt","ALLOWED_PRICE_IMPACT_HIGH","confirm","currencyId","currency","Error","calculateSlippageAmount","slippage","divide","multiply","raw","BigInt","maxAmountSpend","currencyAmount","greaterThan","utils","MIN_ETH","ether","isTokenOnList","defaultTokens","Boolean","chainId","isTokensOnList","currencies","getEtherscanLink","type","prefix","basisPointsToPercent","num","shortenAddress","chars","parsed","substring","shortenTx","tx","txLength","first","last","getLibrary","provider","library","pollingInterval","isZero","hexNumberString","test","getSigner","account","connectUnchecked","getProviderOrSigner","getContract","ABI","calculateGasMargin","mul","from","div","formatDateFromTimeStamp","addedDay","getFormattedPrice","price","beforeSign","toLocaleString","getPriceClass","getDaysCurrentYear","year","getOneYearFee","dayVolume","FEEPERCENT","getAPYWithFee","rewards","fee","formatAPY","apy","formatNumber","showDigits","absNumber","Math","abs","digits","ceil","log10","getTokenFromAddress","tokenMap","wrappedTokenInfo","find","toLowerCase","commonToken","COMMON","EMPTY","getChartDates","chartData","durationIndex","dates","month","monthLastDate","analyticChart","ONE_MONTH_CHART","THREE_MONTH_CHART","dateStr","getChartStartTime","months","SIX_MONTH_CHART","ONE_YEAR_CHART","endOf","getLimitedData","dataCount","newArray","floor","getYAXISValuesAnalytics","minValue","min","maxValue","max","step","getTokenAPRSyrup","syrup","valueOfTotalStakedAmountInUSDC","useLairDQUICKAPY","isNew","lair","daysCurrentYear","quickToken","NEW_QUICK","OLD_QUICK","quickPrice","dQUICKPrice","dQUICKtoQUICK","toExact","dQUICKAPR","oneDayVol","DQUICKFEE","DQUICKAPR_MULTIPLIER","dQuickTotalSupply","temp","pow","returnFullWidthMobile","isMobile","escapeRegExp","string","replace","getWalletKeys","connector","ethereum","isMetaMask","isBitKeep","isBitkeep","isBlockWallet","isCypherDWallet","isCypherD","k","getTokenAddress","getRewardRate","rewardToken","groupSeparator","getStakedAmountStakingInfo","stakingInfo","userLiquidityUnstaked","stakingTokenPair","baseTokenCurrency","baseToken","empty","totalStakedAmount","stakedAmount","valueOfTotalStakedAmountInBaseToken","reserveOf","valueOfMyStakedAmountInBaseToken","USDPrice","usdPrice","quote","valueOfMyStakedAmountInUSDC","stakedAmounts","totalStakedBase","totalStakedUSD","myStakedBase","myStakedUSD","unStakedBase","unStakedUSD","valueOfUnstakedAmountInBaseToken","valueOfUnstakedAmountInUSDC","formatTokenAmount","amount","amountStr","toSignificant","formatMulDivTokenAmount","otherAmount","operator","exactAmount","resultAmount","getTVLStaking","getUSDString","usdValue","getEarnedUSDSyrup","earnedAmount","rewardTokenPriceinUSD","earnedUSD","getEarnedUSDLPFarm","rewardTokenPrice","getEarnedUSDDualFarm","earnedAmountA","earnedAmountB","rewardTokenAPrice","rewardTokenBPrice","isSupportedNetwork","getPageItemsToLoad","countsPerPage","getExactTokenAmount","getValueTokenDecimals","valueDigits","valueDigitStr","valueDigitCount","getPartialTokenAmount","percent","partialAmount","getResultFromCallState","callState","initTokenAmountFromCallResult","getFarmLPToken","info","lp","dummyPair","liquidityToken","getSyrupLPToken","stakingToken","getCallStateResult"],"mappings":"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","sourcesContent":["import { getAddress } from '@ethersproject/address';\nimport { ApolloClient } from 'apollo-client';\nimport { Contract } from '@ethersproject/contracts';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport { blockClient, client, txClient } from 'apollo/client';\nimport {\n  GET_BLOCK,\n  GLOBAL_DATA,\n  GLOBAL_CHART,\n  GET_BLOCKS,\n  TOKENS_CURRENT,\n  TOKENS_DYNAMIC,\n  TOKEN_CHART,\n  TOKEN_DATA1,\n  TOKEN_DATA2,\n  PAIR_CHART,\n  PAIR_DATA,\n  PAIRS_BULK1,\n  PAIRS_HISTORICAL_BULK,\n  PRICES_BY_BLOCK,\n  PAIRS_CURRENT,\n  ALL_PAIRS,\n  ALL_TOKENS,\n  TOKEN_INFO,\n  TOKEN_INFO_OLD,\n  FILTERED_TRANSACTIONS,\n  SWAP_TRANSACTIONS,\n  HOURLY_PAIR_RATES,\n  GLOBAL_ALLDATA,\n  ETH_PRICE,\n  PAIR_ID,\n} from 'apollo/queries';\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers';\nimport {\n  CurrencyAmount,\n  ChainId,\n  Percent,\n  JSBI,\n  Currency,\n  ETHER,\n  Token,\n  TokenAmount,\n  Pair,\n} from '@uniswap/sdk';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { AddressZero } from '@ethersproject/constants';\nimport { GlobalConst, GlobalValue, SUPPORTED_WALLETS } from 'constants/index';\nimport { TokenAddressMap } from 'state/lists/hooks';\nimport {\n  DualStakingInfo,\n  LairInfo,\n  StakingInfo,\n  SyrupBasic,\n  SyrupInfo,\n} from 'types';\nimport { unwrappedToken } from './wrappedCurrency';\nimport { useUSDCPriceToken } from './useUSDCPrice';\nimport { CallState } from 'state/multicall/hooks';\nimport { DualStakingBasic, StakingBasic } from 'types';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport { injected } from 'connectors';\n\ndayjs.extend(utc);\ndayjs.extend(weekOfYear);\n\nexport { default as addMaticToMetamask } from './addMaticToMetamask';\n\ninterface BasicData {\n  token0?: {\n    id: string;\n    name: string;\n    symbol: string;\n  };\n  token1?: {\n    id: string;\n    name: string;\n    symbol: string;\n  };\n}\n\nconst TOKEN_OVERRIDES: {\n  [address: string]: { name: string; symbol: string };\n} = {\n  '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': {\n    name: 'Ether (Wrapped)',\n    symbol: 'ETH',\n  },\n  '0x1416946162b1c2c871a73b07e932d2fb6c932069': {\n    name: 'Energi',\n    symbol: 'NRGE',\n  },\n};\n\nexport async function getBlockFromTimestamp(timestamp: number): Promise<any> {\n  const result = await blockClient.query({\n    query: GET_BLOCK,\n    variables: {\n      timestampFrom: timestamp,\n      timestampTo: timestamp + 600,\n    },\n    fetchPolicy: 'network-only',\n  });\n  return result?.data?.blocks?.[0]?.number;\n}\n\nexport function formatCompact(\n  unformatted: number | string | BigNumber | BigNumberish | undefined | null,\n  decimals = 18,\n  maximumFractionDigits: number | undefined = 3,\n  maxPrecision: number | undefined = 4,\n): string {\n  const formatter = Intl.NumberFormat('en', {\n    notation: 'compact',\n    maximumFractionDigits,\n  });\n\n  if (!unformatted) return '0';\n\n  if (unformatted === Infinity) return 'âˆž';\n\n  let formatted: string | number = Number(unformatted);\n\n  if (unformatted instanceof BigNumber) {\n    formatted = Number(formatUnits(unformatted.toString(), decimals));\n  }\n\n  return formatter.format(Number(formatted.toPrecision(maxPrecision)));\n}\n\nexport const getPercentChange = (valueNow: number, value24HoursAgo: number) => {\n  const adjustedPercentChange =\n    ((valueNow - value24HoursAgo) / value24HoursAgo) * 100;\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return 0;\n  }\n  return adjustedPercentChange;\n};\n\nexport async function splitQuery(\n  query: any,\n  localClient: ApolloClient<any>,\n  vars: any[],\n  list: any[],\n  skipCount = 100,\n): Promise<any> {\n  let fetchedData = {};\n  let allFound = false;\n  let skip = 0;\n\n  while (!allFound) {\n    let end = list.length;\n    if (skip + skipCount < list.length) {\n      end = skip + skipCount;\n    }\n    const sliced = list.slice(skip, end);\n    const result = await localClient.query({\n      query: query(...vars, sliced),\n      fetchPolicy: 'network-only',\n    });\n    fetchedData = {\n      ...fetchedData,\n      ...result.data,\n    };\n    if (\n      Object.keys(result.data).length < skipCount ||\n      skip + skipCount > list.length\n    ) {\n      allFound = true;\n    } else {\n      skip += skipCount;\n    }\n  }\n\n  return fetchedData;\n}\n\nexport async function getBlocksFromTimestamps(\n  timestamps: number[],\n  skipCount = 500,\n): Promise<\n  {\n    timestamp: string;\n    number: any;\n  }[]\n> {\n  if (timestamps?.length === 0) {\n    return [];\n  }\n\n  const fetchedData: any = await splitQuery(\n    GET_BLOCKS,\n    blockClient,\n    [],\n    timestamps,\n    skipCount,\n  );\n\n  const blocks = [];\n  if (fetchedData) {\n    for (const t in fetchedData) {\n      if (fetchedData[t].length > 0) {\n        blocks.push({\n          timestamp: t.split('t')[1],\n          number: fetchedData[t][0]['number'],\n        });\n      }\n    }\n  }\n  return blocks;\n}\n\nexport const get2DayPercentChange = (\n  valueNow: number,\n  value24HoursAgo: number,\n  value48HoursAgo: number,\n) => {\n  // get volume info for both 24 hour periods\n  const currentChange = valueNow - value24HoursAgo;\n  const previousChange = value24HoursAgo - value48HoursAgo;\n\n  const adjustedPercentChange =\n    ((currentChange - previousChange) / previousChange) * 100;\n\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0];\n  }\n  return [currentChange, adjustedPercentChange];\n};\n\nexport const getEthPrice: () => Promise<number[]> = async () => {\n  const utcCurrentTime = dayjs();\n\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n  let ethPrice = 0;\n  let ethPriceOneDay = 0;\n  let priceChangeETH = 0;\n\n  try {\n    const oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n    const result = await client.query({\n      query: ETH_PRICE(),\n      fetchPolicy: 'network-only',\n    });\n    const resultOneDay = await client.query({\n      query: ETH_PRICE(oneDayBlock),\n      fetchPolicy: 'network-only',\n    });\n    const currentPrice = Number(result?.data?.bundles[0]?.ethPrice ?? 0);\n    const oneDayBackPrice = Number(\n      resultOneDay?.data?.bundles[0]?.ethPrice ?? 0,\n    );\n\n    priceChangeETH = getPercentChange(currentPrice, oneDayBackPrice);\n    ethPrice = currentPrice;\n    ethPriceOneDay = oneDayBackPrice;\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [ethPrice, ethPriceOneDay, priceChangeETH];\n};\n\nexport const getTokenInfo = async (\n  ethPrice: number,\n  ethPriceOld: number,\n  address: string,\n) => {\n  const utcCurrentTime = dayjs();\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n  const utcOneWeekBack = utcCurrentTime.subtract(7, 'day').unix();\n  const oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n  const twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack);\n  const oneWeekBlock = await getBlockFromTimestamp(utcOneWeekBack);\n\n  try {\n    const current = await client.query({\n      query: TOKEN_INFO(address),\n      fetchPolicy: 'network-only',\n    });\n\n    const oneDayResult = await client.query({\n      query: TOKEN_INFO_OLD(oneDayBlock, address),\n      fetchPolicy: 'network-only',\n    });\n\n    const twoDayResult = await client.query({\n      query: TOKEN_INFO_OLD(twoDayBlock, address),\n      fetchPolicy: 'network-only',\n    });\n\n    const oneWeekResult = await client.query({\n      query: TOKEN_INFO_OLD(oneWeekBlock, address),\n      fetchPolicy: 'network-only',\n    });\n\n    const oneDayData = oneDayResult?.data?.tokens.reduce(\n      (obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur };\n      },\n      {},\n    );\n\n    const twoDayData = twoDayResult?.data?.tokens.reduce(\n      (obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur };\n      },\n      {},\n    );\n\n    const oneWeekData = oneWeekResult?.data?.tokens.reduce(\n      (obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur };\n      },\n      {},\n    );\n\n    const bulkResults = await Promise.all(\n      current &&\n        oneDayData &&\n        twoDayData &&\n        current?.data?.tokens?.map(async (token: any) => {\n          const data = token;\n\n          let oneDayHistory = oneDayData?.[token.id];\n          let twoDayHistory = twoDayData?.[token.id];\n          let oneWeekHistory = oneWeekData?.[token.id];\n\n          // this is because old history data returns exact same data as current data when the old data does not exist\n          if (\n            Number(oneDayHistory?.totalLiquidity ?? 0) ===\n              Number(data?.totalLiquidity ?? 0) &&\n            Number(oneDayHistory?.tradeVolume ?? 0) ===\n              Number(data?.tradeVolume ?? 0) &&\n            Number(oneDayHistory?.derivedETH ?? 0) ===\n              Number(data?.derivedETH ?? 0)\n          ) {\n            oneDayHistory = null;\n          }\n\n          if (\n            Number(twoDayHistory?.totalLiquidity ?? 0) ===\n              Number(data?.totalLiquidity ?? 0) &&\n            Number(twoDayHistory?.tradeVolume ?? 0) ===\n              Number(data?.tradeVolume ?? 0) &&\n            Number(twoDayHistory?.derivedETH ?? 0) ===\n              Number(data?.derivedETH ?? 0)\n          ) {\n            twoDayHistory = null;\n          }\n          if (\n            Number(oneWeekHistory?.totalLiquidity ?? 0) ===\n              Number(data?.totalLiquidity ?? 0) &&\n            Number(oneWeekHistory?.tradeVolume ?? 0) ===\n              Number(data?.tradeVolume ?? 0) &&\n            Number(oneWeekHistory?.derivedETH ?? 0) ===\n              Number(data?.derivedETH ?? 0)\n          ) {\n            oneWeekHistory = null;\n          }\n\n          // calculate percentage changes and daily changes\n          const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\n            data.tradeVolumeUSD,\n            oneDayHistory?.tradeVolumeUSD ?? 0,\n            twoDayHistory?.tradeVolumeUSD ?? 0,\n          );\n\n          const oneWeekVolumeUSD =\n            data.tradeVolumeUSD - (oneWeekHistory?.tradeVolumeUSD ?? 0);\n\n          const currentLiquidityUSD =\n            data?.totalLiquidity * ethPrice * data?.derivedETH;\n          const oldLiquidityUSD =\n            (oneDayHistory?.totalLiquidity ?? 0) *\n            ethPriceOld *\n            (oneDayHistory?.derivedETH ?? 0);\n\n          // percent changes\n          const priceChangeUSD = getPercentChange(\n            data?.derivedETH * ethPrice,\n            oneDayHistory?.derivedETH\n              ? oneDayHistory?.derivedETH * ethPriceOld\n              : 0,\n          );\n\n          // set data\n          data.priceUSD = data?.derivedETH * ethPrice;\n          data.totalLiquidityUSD = currentLiquidityUSD;\n          data.oneDayVolumeUSD = oneDayVolumeUSD;\n          data.oneWeekVolumeUSD = oneWeekVolumeUSD;\n          data.volumeChangeUSD = volumeChangeUSD;\n          data.priceChangeUSD = priceChangeUSD;\n          data.liquidityChangeUSD = getPercentChange(\n            currentLiquidityUSD ?? 0,\n            oldLiquidityUSD ?? 0,\n          );\n\n          // new tokens\n          if (!oneDayHistory && data) {\n            data.oneDayVolumeUSD = data.tradeVolumeUSD;\n            data.oneDayVolumeETH = data.tradeVolume * data.derivedETH;\n          }\n\n          // update name data for\n          updateNameData({\n            token0: data,\n          });\n\n          // HOTFIX for Aave\n          if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\n            const aaveData = await client.query({\n              query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\n              fetchPolicy: 'network-only',\n            });\n            const result = aaveData.data.pairs[0];\n            data.totalLiquidityUSD = Number(result.reserveUSD) / 2;\n            data.liquidityChangeUSD = 0;\n            data.priceChangeUSD = 0;\n          }\n          return data;\n        }),\n    );\n    return bulkResults;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getTopTokens = async (\n  ethPrice: number,\n  ethPriceOld: number,\n  count = 500,\n) => {\n  const utcCurrentTime = dayjs();\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n  const oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n  const twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack);\n\n  try {\n    const current = await client.query({\n      query: TOKENS_CURRENT(count),\n      fetchPolicy: 'network-only',\n    });\n\n    const oneDayResult = await client.query({\n      query: TOKENS_DYNAMIC(oneDayBlock, count),\n      fetchPolicy: 'network-only',\n    });\n\n    const twoDayResult = await client.query({\n      query: TOKENS_DYNAMIC(twoDayBlock, count),\n      fetchPolicy: 'network-only',\n    });\n\n    const oneDayData = oneDayResult?.data?.tokens.reduce(\n      (obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur };\n      },\n      {},\n    );\n\n    const twoDayData = twoDayResult?.data?.tokens.reduce(\n      (obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur };\n      },\n      {},\n    );\n\n    const bulkResults = await Promise.all(\n      current &&\n        oneDayData &&\n        twoDayData &&\n        current?.data?.tokens?.map(async (token: any) => {\n          const data = token;\n\n          // let liquidityDataThisToken = liquidityData?.[token.id]\n          let oneDayHistory = oneDayData?.[token.id];\n          let twoDayHistory = twoDayData?.[token.id];\n\n          // this is because old history data returns exact same data as current data when the old data does not exist\n          if (\n            Number(oneDayHistory?.totalLiquidity ?? 0) ===\n              Number(data?.totalLiquidity ?? 0) &&\n            Number(oneDayHistory?.tradeVolume ?? 0) ===\n              Number(data?.tradeVolume ?? 0) &&\n            Number(oneDayHistory?.derivedETH ?? 0) ===\n              Number(data?.derivedETH ?? 0)\n          ) {\n            oneDayHistory = null;\n          }\n\n          if (\n            Number(twoDayHistory?.totalLiquidity ?? 0) ===\n              Number(data?.totalLiquidity ?? 0) &&\n            Number(twoDayHistory?.tradeVolume ?? 0) ===\n              Number(data?.tradeVolume ?? 0) &&\n            Number(twoDayHistory?.derivedETH ?? 0) ===\n              Number(data?.derivedETH ?? 0)\n          ) {\n            twoDayHistory = null;\n          }\n\n          // calculate percentage changes and daily changes\n          const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\n            data.tradeVolumeUSD,\n            oneDayHistory?.tradeVolumeUSD ?? 0,\n            twoDayHistory?.tradeVolumeUSD ?? 0,\n          );\n\n          const currentLiquidityUSD =\n            data?.totalLiquidity * ethPrice * data?.derivedETH;\n          const oldLiquidityUSD =\n            (oneDayHistory?.totalLiquidity ?? 0) *\n            ethPriceOld *\n            (oneDayHistory?.derivedETH ?? 0);\n\n          // percent changes\n          const priceChangeUSD = getPercentChange(\n            data?.derivedETH * ethPrice,\n            oneDayHistory?.derivedETH\n              ? oneDayHistory?.derivedETH * ethPriceOld\n              : 0,\n          );\n\n          // set data\n          data.priceUSD = data?.derivedETH * ethPrice;\n          data.totalLiquidityUSD = currentLiquidityUSD;\n          data.oneDayVolumeUSD = oneDayVolumeUSD;\n          data.volumeChangeUSD = volumeChangeUSD;\n          data.priceChangeUSD = priceChangeUSD;\n          data.liquidityChangeUSD = getPercentChange(\n            currentLiquidityUSD ?? 0,\n            oldLiquidityUSD ?? 0,\n          );\n\n          // new tokens\n          if (!oneDayHistory && data) {\n            data.oneDayVolumeUSD = data.tradeVolumeUSD;\n            data.oneDayVolumeETH = data.tradeVolume * data.derivedETH;\n          }\n\n          // update name data for\n          updateNameData({\n            token0: data,\n          });\n\n          // HOTFIX for Aave\n          if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\n            const aaveData = await client.query({\n              query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\n              fetchPolicy: 'network-only',\n            });\n            const result = aaveData.data.pairs[0];\n            data.totalLiquidityUSD = Number(result.reserveUSD) / 2;\n            data.liquidityChangeUSD = 0;\n            data.priceChangeUSD = 0;\n          }\n          return data;\n        }),\n    );\n    return bulkResults;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getTimestampsForChanges: () => number[] = () => {\n  const utcCurrentTime = dayjs();\n  //utcCurrentTime = utcCurrentTime.subtract(0.3,  'day');\n  const t1 = utcCurrentTime\n    .subtract(1, 'day')\n    .startOf('minute')\n    .unix();\n  const t2 = utcCurrentTime\n    .subtract(2, 'day')\n    .startOf('minute')\n    .unix();\n  const tWeek = utcCurrentTime\n    .subtract(1, 'week')\n    .startOf('minute')\n    .unix();\n  return [t1, t2, tWeek];\n};\n\nexport const getTokenPairs = async (\n  tokenAddress: string,\n  tokenAddress1: string,\n) => {\n  try {\n    // fetch all current and historical data\n    const result = await client.query({\n      query: TOKEN_DATA1(tokenAddress, tokenAddress1),\n      fetchPolicy: 'network-only',\n    });\n    return result.data?.['pairs0']\n      .concat(result.data?.['pairs1'])\n      .concat(result.data?.['pairs2'])\n      .concat(result.data?.['pairs3'])\n      .concat(result.data?.['pairs4']);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getTokenPairs2 = async (tokenAddress: string) => {\n  try {\n    // fetch all current and historical data\n    const result = await client.query({\n      query: TOKEN_DATA2(tokenAddress),\n      fetchPolicy: 'network-only',\n    });\n    return result.data?.['pairs0'].concat(result.data?.['pairs1']);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const getTopPairs = async (count: number) => {\n  try {\n    // fetch all current and historical data\n    const result = await client.query({\n      query: PAIRS_CURRENT(count),\n      fetchPolicy: 'network-only',\n    });\n    return result.data?.['pairs'];\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport function getSecondsOneDay() {\n  return 60 * 60 * 24;\n}\n\nexport const getIntervalTokenData = async (\n  tokenAddress: string,\n  startTime: number,\n  interval = 3600,\n  latestBlock: number | undefined,\n) => {\n  const utcEndTime = dayjs.utc();\n  let time = startTime;\n\n  // create an array of hour start times until we reach current hour\n  // buffer by half hour to catch case where graph isnt synced to latest block\n  const timestamps = [];\n  while (time < utcEndTime.unix()) {\n    timestamps.push(time);\n    time += interval;\n  }\n\n  // backout if invalid timestamp format\n  if (timestamps.length === 0) {\n    return [];\n  }\n\n  // once you have all the timestamps, get the blocks for each timestamp in a bulk query\n  let blocks;\n  try {\n    blocks = await getBlocksFromTimestamps(timestamps, 100);\n\n    // catch failing case\n    if (!blocks || blocks.length === 0) {\n      return [];\n    }\n\n    if (latestBlock) {\n      blocks = blocks.filter((b) => {\n        return Number(b.number) <= latestBlock;\n      });\n    }\n\n    const result: any = await splitQuery(\n      PRICES_BY_BLOCK,\n      client,\n      [tokenAddress],\n      blocks,\n      50,\n    );\n\n    // format token ETH price results\n    const values: any[] = [];\n    for (const row in result) {\n      const timestamp = row.split('t')[1];\n      const derivedETH = Number(result[row]?.derivedETH ?? 0);\n      if (timestamp) {\n        values.push({\n          timestamp,\n          derivedETH,\n        });\n      }\n    }\n\n    // go through eth usd prices and assign to original values array\n    let index = 0;\n    for (const brow in result) {\n      const timestamp = brow.split('b')[1];\n      if (timestamp) {\n        values[index].priceUSD =\n          result[brow].ethPrice * values[index].derivedETH;\n        index += 1;\n      }\n    }\n\n    const formattedHistory = [];\n\n    // for each hour, construct the open and close price\n    for (let i = 0; i < values.length - 1; i++) {\n      formattedHistory.push({\n        timestamp: values[i].timestamp,\n        open: Number(values[i].priceUSD),\n        close: Number(values[i + 1].priceUSD),\n      });\n    }\n\n    return formattedHistory;\n  } catch (e) {\n    console.log(e);\n    console.log('error fetching blocks');\n    return [];\n  }\n};\n\nexport const getPairTransactions = async (pairAddress: string) => {\n  try {\n    const result = await txClient.query({\n      query: FILTERED_TRANSACTIONS,\n      variables: {\n        allPairs: [pairAddress],\n      },\n      fetchPolicy: 'no-cache',\n    });\n    return {\n      mints: result.data.mints,\n      burns: result.data.burns,\n      swaps: result.data.swaps,\n    };\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\nexport const getPairAddress = async (\n  token0Address: string,\n  token1Address: string,\n) => {\n  const pairData = await client.query({\n    query: PAIR_ID(token0Address, token1Address),\n  });\n  const pairs =\n    pairData && pairData.data\n      ? pairData.data.pairs0.concat(pairData.data.pairs1)\n      : undefined;\n  if (!pairs || pairs.length === 0) return;\n  const pairId = pairs[0].id;\n  const tokenReversed = pairData.data.pairs1.length > 0;\n  return { pairId, tokenReversed };\n};\n\nexport const getSwapTransactions = async (\n  pairId: string,\n  startTime?: number,\n) => {\n  let allFound = false;\n  let swapTx: any[] = [];\n  const oneDayAgo = dayjs\n    .utc()\n    .subtract(1, 'day')\n    .unix();\n  let sTimestamp = startTime ?? oneDayAgo;\n  while (!allFound) {\n    try {\n      const result = await txClient.query({\n        query: SWAP_TRANSACTIONS,\n        variables: {\n          allPairs: [pairId],\n          lastTime: sTimestamp,\n        },\n      });\n      if (result.data.swaps.length < 1000) {\n        allFound = true;\n      }\n      const swaps = result.data.swaps;\n      sTimestamp = Number(swaps[swaps.length - 1].transaction.timestamp);\n      swapTx = swapTx.concat(swaps);\n    } catch (e) {}\n  }\n  return swapTx\n    .filter(\n      (item, ind, self) =>\n        ind ===\n        self.findIndex((item1) => item1.transaction.id === item.transaction.id),\n    )\n    .reverse();\n};\n\nexport const getTokenChartData = async (\n  tokenAddress: string,\n  startTime: number,\n) => {\n  let data: any[] = [];\n  const utcEndTime = dayjs.utc();\n  try {\n    let allFound = false;\n    let skip = 0;\n    while (!allFound) {\n      const result = await client.query({\n        query: TOKEN_CHART,\n        variables: {\n          startTime: startTime,\n          tokenAddr: tokenAddress,\n          skip,\n        },\n        fetchPolicy: 'network-only',\n      });\n      if (result.data.tokenDayDatas.length < 1000) {\n        allFound = true;\n      }\n      skip += 1000;\n      data = data.concat(result.data.tokenDayDatas);\n    }\n\n    const dayIndexSet = new Set();\n    const dayIndexArray: any[] = [];\n    const oneDay = getSecondsOneDay();\n    data.forEach((dayData, i) => {\n      // add the day index to the set of days\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n      dayIndexArray.push(data[i]);\n      dayData.dailyVolumeUSD = Number(dayData.dailyVolumeUSD);\n    });\n\n    // fill in empty days\n    let timestamp = data[0] && data[0].date ? data[0].date : startTime;\n    let latestLiquidityUSD = data[0] && data[0].totalLiquidityUSD;\n    let latestPriceUSD = data[0] && data[0].priceUSD;\n    //let latestPairDatas = data[0] && data[0].mostLiquidPairs\n    let index = 1;\n    while (timestamp < utcEndTime.startOf('minute').unix() - oneDay) {\n      const nextDay = timestamp + oneDay;\n      const currentDayIndex = (nextDay / oneDay).toFixed(0);\n      if (!dayIndexSet.has(currentDayIndex)) {\n        data.push({\n          date: nextDay,\n          dayString: nextDay,\n          dailyVolumeUSD: 0,\n          priceUSD: latestPriceUSD,\n          totalLiquidityUSD: latestLiquidityUSD,\n          //mostLiquidPairs: latestPairDatas,\n        });\n      } else {\n        latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD;\n        latestPriceUSD = dayIndexArray[index].priceUSD;\n        //latestPairDatas = dayIndexArray[index].mostLiquidPairs\n        index = index + 1;\n      }\n      timestamp = nextDay;\n    }\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1));\n  } catch (e) {\n    console.log(e);\n  }\n  return data;\n};\n\nexport const getPairChartData = async (\n  pairAddress: string,\n  startTime: number,\n) => {\n  let data: any[] = [];\n  const utcEndTime = dayjs.utc();\n  try {\n    let allFound = false;\n    let skip = 0;\n    while (!allFound) {\n      const result = await client.query({\n        query: PAIR_CHART,\n        variables: {\n          startTime: startTime,\n          pairAddress: pairAddress,\n          skip,\n        },\n        fetchPolicy: 'cache-first',\n      });\n      skip += 1000;\n      data = data.concat(result.data.pairDayDatas);\n      if (result.data.pairDayDatas.length < 1000) {\n        allFound = true;\n      }\n    }\n\n    const dayIndexSet = new Set();\n    const dayIndexArray: any[] = [];\n    const oneDay = 24 * 60 * 60;\n    data.forEach((dayData, i) => {\n      // add the day index to the set of days\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n      dayIndexArray.push(data[i]);\n      dayData.dailyVolumeUSD = Number(dayData.dailyVolumeUSD);\n      dayData.reserveUSD = Number(dayData.reserveUSD);\n    });\n\n    if (data[0]) {\n      // fill in empty days\n      let timestamp = data[0].date ? data[0].date : startTime;\n      let latestLiquidityUSD = data[0].reserveUSD;\n      let index = 1;\n      while (timestamp < utcEndTime.unix() - oneDay) {\n        const nextDay = timestamp + oneDay;\n        const currentDayIndex = (nextDay / oneDay).toFixed(0);\n        if (!dayIndexSet.has(currentDayIndex)) {\n          data.push({\n            date: nextDay,\n            dayString: nextDay,\n            dailyVolumeUSD: 0,\n            reserveUSD: latestLiquidityUSD,\n          });\n        } else {\n          latestLiquidityUSD = dayIndexArray[index].reserveUSD;\n          index = index + 1;\n        }\n        timestamp = nextDay;\n      }\n    }\n\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1));\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n};\n\nexport const getRateData = async (\n  pairAddress: string,\n  latestBlock: number,\n  interval: number,\n  startTime: number,\n  pairTokenReversed: boolean,\n) => {\n  try {\n    const utcEndTime = dayjs.utc();\n    let time = startTime;\n\n    // create an array of hour start times until we reach current hour\n    const timestamps = [];\n    while (time <= utcEndTime.unix()) {\n      timestamps.push(time);\n      time += interval;\n    }\n\n    // backout if invalid timestamp format\n    if (timestamps.length === 0) {\n      return [];\n    }\n\n    // once you have all the timestamps, get the blocks for each timestamp in a bulk query\n    let blocks;\n\n    blocks = await getBlocksFromTimestamps(timestamps, 100);\n\n    // catch failing case\n    if (!blocks || blocks?.length === 0) {\n      return [];\n    }\n\n    if (latestBlock) {\n      blocks = blocks.filter((b) => {\n        return Number(b.number) <= latestBlock;\n      });\n    }\n\n    const result = await splitQuery(\n      HOURLY_PAIR_RATES,\n      client,\n      [pairAddress],\n      blocks,\n      100,\n    );\n\n    // format token ETH price results\n    const values = [];\n    for (const row in result) {\n      const timestamp = row.split('t')[1];\n      if (timestamp) {\n        values.push({\n          timestamp,\n          rate: pairTokenReversed\n            ? Number(result[row]?.token0Price)\n            : Number(result[row]?.token1Price),\n        });\n      }\n    }\n    return values;\n  } catch (e) {\n    console.log(e);\n    return [];\n  }\n};\n\nexport const getBulkPairData: (\n  pairList: any,\n  ethPrice: any,\n) => Promise<any[] | undefined> = async (pairList: any, ethPrice: any) => {\n  const [t1, t2, tWeek] = getTimestampsForChanges();\n  const a = await getBlocksFromTimestamps([t1, t2, tWeek]);\n  const [{ number: b1 }, { number: b2 }, { number: bWeek }] = a;\n  try {\n    const current = await client.query({\n      query: PAIRS_BULK1,\n      variables: {\n        allPairs: pairList,\n      },\n      fetchPolicy: 'network-only',\n    });\n\n    const [oneDayResult, twoDayResult, oneWeekResult] = await Promise.all(\n      [b1, b2, bWeek].map(async (block) => {\n        const result = await client.query({\n          query: PAIRS_HISTORICAL_BULK(block, pairList),\n          fetchPolicy: 'network-only',\n        });\n        return result;\n      }),\n    );\n\n    const oneDayData = oneDayResult?.data?.pairs.reduce(\n      (obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur };\n      },\n      {},\n    );\n\n    const twoDayData = twoDayResult?.data?.pairs.reduce(\n      (obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur };\n      },\n      {},\n    );\n\n    const oneWeekData = oneWeekResult?.data?.pairs.reduce(\n      (obj: any, cur: any) => {\n        return { ...obj, [cur.id]: cur };\n      },\n      {},\n    );\n\n    const pairData = await Promise.all(\n      current &&\n        current.data.pairs.map(async (pair: any) => {\n          let data = pair;\n          let oneDayHistory = oneDayData?.[pair.id];\n          if (!oneDayHistory) {\n            const newData = await client.query({\n              query: PAIR_DATA(pair.id, b1),\n              fetchPolicy: 'network-only',\n            });\n            oneDayHistory = newData.data.pairs[0];\n          }\n          let twoDayHistory = twoDayData?.[pair.id];\n          if (!twoDayHistory) {\n            const newData = await client.query({\n              query: PAIR_DATA(pair.id, b2),\n              fetchPolicy: 'network-only',\n            });\n            twoDayHistory = newData.data.pairs[0];\n          }\n          let oneWeekHistory = oneWeekData?.[pair.id];\n          if (!oneWeekHistory) {\n            const newData = await client.query({\n              query: PAIR_DATA(pair.id, bWeek),\n              fetchPolicy: 'network-only',\n            });\n            oneWeekHistory = newData.data.pairs[0];\n          }\n\n          // this is because old history data returns exact same data as current data when the old data does not exist\n          if (\n            Number(oneDayHistory?.reserveUSD ?? 0) ===\n              Number(data?.reserveUSD ?? 0) &&\n            Number(oneDayHistory?.volumeUSD ?? 0) ===\n              Number(data?.volumeUSD ?? 0) &&\n            Number(oneDayHistory?.totalSupply ?? 0) ===\n              Number(data?.totalSupply ?? 0)\n          ) {\n            oneDayHistory = null;\n          }\n\n          if (\n            Number(twoDayHistory?.reserveUSD ?? 0) ===\n              Number(data?.reserveUSD ?? 0) &&\n            Number(twoDayHistory?.volumeUSD ?? 0) ===\n              Number(data?.volumeUSD ?? 0) &&\n            Number(twoDayHistory?.totalSupply ?? 0) ===\n              Number(data?.totalSupply ?? 0)\n          ) {\n            twoDayHistory = null;\n          }\n          if (\n            Number(oneWeekHistory?.reserveUSD ?? 0) ===\n              Number(data?.reserveUSD ?? 0) &&\n            Number(oneWeekHistory?.volumeUSD ?? 0) ===\n              Number(data?.volumeUSD ?? 0) &&\n            Number(oneWeekHistory?.totalSupply ?? 0) ===\n              Number(data?.totalSupply ?? 0)\n          ) {\n            oneWeekHistory = null;\n          }\n\n          data = parseData(\n            data,\n            oneDayHistory,\n            twoDayHistory,\n            oneWeekHistory,\n            ethPrice,\n            b1,\n          );\n          return data;\n        }),\n    );\n    return pairData;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst parseData = (\n  data: any,\n  oneDayData: any,\n  twoDayData: any,\n  oneWeekData: any,\n  ethPrice: any,\n  oneDayBlock: any,\n) => {\n  // get volume changes\n  const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\n    data?.volumeUSD ? data.volumeUSD : 0,\n    oneDayData?.volumeUSD ? oneDayData.volumeUSD : 0,\n    twoDayData?.volumeUSD ? twoDayData.volumeUSD : 0,\n  );\n  const [oneDayVolumeUntracked, volumeChangeUntracked] = get2DayPercentChange(\n    data?.untrackedVolumeUSD,\n    oneDayData?.untrackedVolumeUSD ? Number(oneDayData?.untrackedVolumeUSD) : 0,\n    twoDayData?.untrackedVolumeUSD ? twoDayData?.untrackedVolumeUSD : 0,\n  );\n\n  const oneWeekVolumeUSD = Number(\n    oneWeekData ? data?.volumeUSD - oneWeekData?.volumeUSD : data.volumeUSD,\n  );\n\n  const oneWeekVolumeUntracked = Number(\n    oneWeekData\n      ? data?.untrackedVolumeUSD - oneWeekData?.untrackedVolumeUSD\n      : data.untrackedVolumeUSD,\n  );\n\n  // set volume properties\n  data.oneDayVolumeUSD = oneDayVolumeUSD;\n  data.oneWeekVolumeUSD = oneWeekVolumeUSD;\n  data.volumeChangeUSD = volumeChangeUSD;\n  data.oneDayVolumeUntracked = oneDayVolumeUntracked;\n  data.oneWeekVolumeUntracked = oneWeekVolumeUntracked;\n  data.volumeChangeUntracked = volumeChangeUntracked;\n\n  // set liquidity properties\n  data.trackedReserveUSD = data.trackedReserveETH * ethPrice;\n  data.liquidityChangeUSD = getPercentChange(\n    data.reserveUSD,\n    oneDayData?.reserveUSD,\n  );\n\n  // format if pair hasnt existed for a day or a week\n  if (!oneDayData && data && data.createdAtBlockNumber > oneDayBlock) {\n    data.oneDayVolumeUSD = Number(data.volumeUSD);\n  }\n  if (!oneDayData && data) {\n    data.oneDayVolumeUSD = Number(data.volumeUSD);\n  }\n  if (!oneWeekData && data) {\n    data.oneWeekVolumeUSD = Number(data.volumeUSD);\n  }\n\n  // format incorrect names\n  updateNameData(data);\n\n  return data;\n};\n\nexport function updateNameData(data: BasicData): BasicData | undefined {\n  if (\n    data?.token0?.id &&\n    Object.keys(TOKEN_OVERRIDES).includes(data.token0.id)\n  ) {\n    data.token0.name = TOKEN_OVERRIDES[data.token0.id].name;\n    data.token0.symbol = TOKEN_OVERRIDES[data.token0.id].symbol;\n  }\n\n  if (\n    data?.token1?.id &&\n    Object.keys(TOKEN_OVERRIDES).includes(data.token1.id)\n  ) {\n    data.token1.name = TOKEN_OVERRIDES[data.token1.id].name;\n    data.token1.symbol = TOKEN_OVERRIDES[data.token1.id].symbol;\n  }\n\n  return data;\n}\n\nexport async function getGlobalData(\n  ethPrice: number,\n  oldEthPrice: number,\n): Promise<any> {\n  // data for each day , historic data used for % changes\n  let data: any = {};\n  let oneDayData: any = {};\n  let twoDayData: any = {};\n\n  try {\n    // get timestamps for the days\n    const utcCurrentTime = dayjs();\n    //utcCurrentTime = utcCurrentTime.subtract(0.3, 'day');\n\n    const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n    const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n    const utcOneWeekBack = utcCurrentTime.subtract(1, 'week').unix();\n    const utcTwoWeeksBack = utcCurrentTime.subtract(2, 'week').unix();\n\n    // get the blocks needed for time travel queries\n    const [\n      oneDayBlock,\n      twoDayBlock,\n      oneWeekBlock,\n      twoWeekBlock,\n    ] = await getBlocksFromTimestamps([\n      utcOneDayBack,\n      utcTwoDaysBack,\n      utcOneWeekBack,\n      utcTwoWeeksBack,\n    ]);\n\n    // fetch the global data\n    const result = await client.query({\n      query: GLOBAL_DATA(),\n      fetchPolicy: 'network-only',\n    });\n    data = result.data.uniswapFactories[0];\n\n    const queryReq = [\n      { index: 'result', block: null },\n      { index: 'oneDayData', block: oneDayBlock?.number },\n      { index: 'twoDayData', block: twoDayBlock?.number },\n      { index: 'oneWeekData', block: oneWeekBlock?.number },\n      { index: 'twoWeekData', block: twoWeekBlock?.number },\n    ];\n    const allData = await client.query({\n      query: GLOBAL_ALLDATA(queryReq),\n      fetchPolicy: 'network-only',\n    });\n    data = allData.data['result'][0];\n    oneDayData = allData.data['oneDayData'][0];\n    twoDayData = allData.data['twoDayData'][0];\n    const oneWeekData = allData.data['oneWeekData'][0];\n    const twoWeekData = allData.data['twoWeekData'][0];\n\n    if (data && oneDayData && twoDayData && twoWeekData) {\n      const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\n        data.totalVolumeUSD,\n        oneDayData.totalVolumeUSD ? oneDayData.totalVolumeUSD : 0,\n        twoDayData.totalVolumeUSD ? twoDayData.totalVolumeUSD : 0,\n      );\n\n      const [oneWeekVolume, weeklyVolumeChange] = get2DayPercentChange(\n        data.totalVolumeUSD,\n        oneWeekData.totalVolumeUSD,\n        twoWeekData.totalVolumeUSD,\n      );\n\n      const [oneDayTxns, txnChange] = get2DayPercentChange(\n        data.txCount,\n        oneDayData.txCount ? oneDayData.txCount : 0,\n        twoDayData.txCount ? twoDayData.txCount : 0,\n      );\n\n      // format the total liquidity in USD\n      const liquidityChangeUSD = getPercentChange(\n        data.totalLiquidityETH * ethPrice,\n        oneDayData.totalLiquidityETH * oldEthPrice,\n      );\n      return {\n        ...data,\n        totalLiquidityUSD: data.totalLiquidityETH * ethPrice,\n        oneDayVolumeUSD,\n        oneWeekVolume,\n        weeklyVolumeChange,\n        volumeChangeUSD,\n        liquidityChangeUSD,\n        oneDayTxns,\n        txnChange,\n      };\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n}\n\nexport async function getAllPairsOnUniswap() {\n  try {\n    let allFound = false;\n    let pairs: any[] = [];\n    let skipCount = 0;\n    while (!allFound) {\n      const result = await client.query({\n        query: ALL_PAIRS,\n        variables: {\n          skip: skipCount,\n        },\n        fetchPolicy: 'network-only',\n      });\n      skipCount = skipCount + 10;\n      pairs = pairs.concat(result?.data?.pairs);\n      if (result?.data?.pairs.length < 10 || pairs.length > 10) {\n        allFound = true;\n      }\n    }\n    return pairs;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport async function getAllTokensOnUniswap() {\n  try {\n    let allFound = false;\n    let skipCount = 0;\n    let tokens: any[] = [];\n    while (!allFound) {\n      const result = await client.query({\n        query: ALL_TOKENS,\n        variables: {\n          skip: skipCount,\n        },\n        fetchPolicy: 'network-only',\n      });\n      tokens = tokens.concat(result?.data?.tokens);\n      if (result?.data?.tokens?.length < 10 || tokens.length > 10) {\n        allFound = true;\n      }\n      skipCount = skipCount += 10;\n    }\n    return tokens;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport const getChartData = async (oldestDateToFetch: number) => {\n  let data: any[] = [];\n  const weeklyData: any[] = [];\n  const utcEndTime = dayjs.utc();\n  let skip = 0;\n  let allFound = false;\n\n  try {\n    while (!allFound) {\n      const result = await client.query({\n        query: GLOBAL_CHART,\n        variables: {\n          startTime: oldestDateToFetch,\n          skip,\n        },\n        fetchPolicy: 'network-only',\n      });\n      skip += 1000;\n      data = data.concat(\n        result.data.uniswapDayDatas.map((item: any) => {\n          return { ...item, dailyVolumeUSD: Number(item.dailyVolumeUSD) };\n        }),\n      );\n      if (result.data.uniswapDayDatas.length < 1000) {\n        allFound = true;\n      }\n    }\n\n    if (data) {\n      const dayIndexSet = new Set();\n      const dayIndexArray: any[] = [];\n      const oneDay = 24 * 60 * 60;\n\n      // for each day, parse the daily volume and format for chart array\n      data.forEach((dayData, i) => {\n        // add the day index to the set of days\n        dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n        dayIndexArray.push(data[i]);\n      });\n\n      // fill in empty days ( there will be no day datas if no trades made that day )\n      let timestamp = data[0].date ? data[0].date : oldestDateToFetch;\n      let latestLiquidityUSD = data[0].totalLiquidityUSD;\n      let latestDayDats = data[0].mostLiquidTokens;\n      let index = 1;\n      while (timestamp < utcEndTime.unix() - oneDay) {\n        const nextDay = timestamp + oneDay;\n        const currentDayIndex = (nextDay / oneDay).toFixed(0);\n        if (!dayIndexSet.has(currentDayIndex)) {\n          data.push({\n            date: nextDay,\n            dailyVolumeUSD: 0,\n            totalLiquidityUSD: latestLiquidityUSD,\n            mostLiquidTokens: latestDayDats,\n          });\n        } else {\n          latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD;\n          latestDayDats = dayIndexArray[index].mostLiquidTokens;\n          index = index + 1;\n        }\n        timestamp = nextDay;\n      }\n    }\n\n    // format weekly data for weekly sized chunks\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1));\n    let startIndexWeekly = -1;\n    let currentWeek = -1;\n    data.forEach((entry, i) => {\n      const week = dayjs.utc(dayjs.unix(data[i].date)).week();\n      if (week !== currentWeek) {\n        currentWeek = week;\n        startIndexWeekly++;\n      }\n      weeklyData[startIndexWeekly] = weeklyData[startIndexWeekly] || {};\n      weeklyData[startIndexWeekly].date = data[i].date;\n      weeklyData[startIndexWeekly].weeklyVolumeUSD =\n        (weeklyData[startIndexWeekly].weeklyVolumeUSD ?? 0) +\n        data[i].dailyVolumeUSD;\n    });\n  } catch (e) {\n    console.log(e);\n  }\n  return [data, weeklyData];\n};\n\nexport function isAddress(value: string | null | undefined): string | false {\n  try {\n    return getAddress(value || '');\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Given the price impact, get user confirmation.\n *\n * @param priceImpactWithoutFee price impact of the trade without the fee.\n */\nexport function confirmPriceImpactWithoutFee(\n  priceImpactWithoutFee: Percent,\n): boolean {\n  if (\n    !priceImpactWithoutFee.lessThan(\n      GlobalValue.percents.PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN,\n    )\n  ) {\n    return (\n      window.prompt(\n        `This swap has a price impact of at least ${GlobalValue.percents.PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN.toFixed(\n          0,\n        )}%. Please type the word \"confirm\" to continue with this swap.`,\n      ) === 'confirm'\n    );\n  } else if (\n    !priceImpactWithoutFee.lessThan(\n      GlobalValue.percents.ALLOWED_PRICE_IMPACT_HIGH,\n    )\n  ) {\n    return window.confirm(\n      `This swap has a price impact of at least ${GlobalValue.percents.ALLOWED_PRICE_IMPACT_HIGH.toFixed(\n        0,\n      )}%. Please confirm that you would like to continue with this swap.`,\n    );\n  }\n  return true;\n}\n\nexport function currencyId(currency: Currency): string {\n  if (currency === ETHER) return 'ETH';\n  if (currency instanceof Token) return currency.address;\n  throw new Error('invalid currency');\n}\n\nexport function calculateSlippageAmount(\n  value: CurrencyAmount,\n  slippage: number,\n): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`);\n  }\n  return [\n    JSBI.divide(\n      JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)),\n      JSBI.BigInt(10000),\n    ),\n    JSBI.divide(\n      JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)),\n      JSBI.BigInt(10000),\n    ),\n  ];\n}\n\nexport function maxAmountSpend(\n  currencyAmount?: CurrencyAmount,\n): CurrencyAmount | undefined {\n  if (!currencyAmount) return undefined;\n  if (currencyAmount.currency === ETHER) {\n    if (JSBI.greaterThan(currencyAmount.raw, GlobalConst.utils.MIN_ETH)) {\n      return CurrencyAmount.ether(\n        JSBI.subtract(currencyAmount.raw, GlobalConst.utils.MIN_ETH),\n      );\n    } else {\n      return CurrencyAmount.ether(JSBI.BigInt(0));\n    }\n  }\n  return currencyAmount;\n}\n\nexport function isTokenOnList(\n  defaultTokens: TokenAddressMap,\n  currency?: Currency,\n): boolean {\n  if (currency === ETHER) return true;\n  return Boolean(\n    currency instanceof Token &&\n      defaultTokens[currency.chainId]?.[currency.address],\n  );\n}\n\nexport function isTokensOnList(\n  defaultTokens: TokenAddressMap,\n  currencies: (Currency | undefined)[],\n): boolean[] {\n  return currencies.map((currency) => {\n    if (currency === ETHER) return true;\n    return Boolean(\n      currency instanceof Token &&\n        defaultTokens[currency.chainId]?.[currency.address],\n    );\n  });\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block',\n): string {\n  const prefix =\n    'https://' + (chainId === 538 ? 'mumbai.' : '') + 'polygonscan.com';\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`;\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`;\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`;\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`;\n    }\n  }\n}\n\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address);\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n}\n\nexport const shortenTx = (tx: string) => {\n  if (tx.length) {\n    const txLength = tx.length;\n    const first = tx.slice(0, 6);\n    const last = tx.slice(txLength - 4, txLength);\n    return `${first}...${last}`;\n  }\n  return '';\n};\n\nexport function getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider, 'any');\n  library.pollingInterval = 15000;\n  return library;\n}\n\nexport function isZero(hexNumberString: string): boolean {\n  return /^0x0*$/.test(hexNumberString);\n}\n\nexport function getSigner(\n  library: Web3Provider,\n  account: string,\n): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked();\n}\n\nexport function getProviderOrSigner(\n  library: Web3Provider,\n  account?: string,\n): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library;\n}\n\nexport function getContract(\n  address: string,\n  ABI: any,\n  library: Web3Provider,\n  account?: string,\n): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(\n    address,\n    ABI,\n    getProviderOrSigner(library, account) as any,\n  );\n}\n\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value\n    .mul(BigNumber.from(10000).add(BigNumber.from(1000)))\n    .div(BigNumber.from(10000));\n}\n\nexport function formatDateFromTimeStamp(\n  timestamp: number,\n  format: string,\n  addedDay = 0,\n) {\n  return dayjs\n    .unix(timestamp)\n    .add(addedDay, 'day')\n    .utc()\n    .format(format);\n}\n\nexport function getFormattedPrice(price: number) {\n  if (price < 0.001 && price > 0) {\n    return '<0.001';\n  } else if (price > -0.001 && price < 0) {\n    return '>-0.001';\n  } else {\n    const beforeSign = price > 0 ? '+' : '';\n    return beforeSign + price.toLocaleString();\n  }\n}\n\n// set different bg and text colors for price percent badge according to price.\nexport function getPriceClass(price: number) {\n  if (price > 0) {\n    return 'bg-successLight text-success';\n  } else if (price === 0) {\n    return 'bg-gray1 text-hint';\n  } else {\n    return 'bg-errorLight text-error';\n  }\n}\n\nexport function getDaysCurrentYear() {\n  const year = Number(dayjs().format('YYYY'));\n  return (year % 4 === 0 && year % 100 > 0) || year % 400 == 0 ? 366 : 365;\n}\n\nexport function getOneYearFee(dayVolume: number, reserveUSD: number) {\n  if (!dayVolume || !reserveUSD) {\n    return 0;\n  }\n\n  return (\n    (dayVolume * GlobalConst.utils.FEEPERCENT * getDaysCurrentYear()) /\n    reserveUSD\n  );\n}\n\nexport function getAPYWithFee(rewards: number, fee: number) {\n  return fee > 0 ? ((1 + ((rewards + fee / 12) * 12) / 12) ** 12 - 1) * 100 : 0;\n}\n\nexport function formatAPY(apy: number) {\n  if (apy > 100000000) {\n    return '>100000000';\n  } else {\n    return apy.toLocaleString();\n  }\n}\n\nexport function formatNumber(\n  unformatted: number | string | undefined,\n  showDigits = 2,\n) {\n  // get fraction digits for small number\n  if (!unformatted) return 0;\n  const absNumber = Math.abs(Number(unformatted));\n  if (absNumber > 0) {\n    const digits = Math.ceil(Math.log10(1 / absNumber));\n    if (digits < 3) {\n      return Number(unformatted).toLocaleString();\n    } else {\n      return Number(unformatted).toFixed(digits + showDigits);\n    }\n  } else {\n    return 0;\n  }\n}\n\nexport function getTokenFromAddress(\n  tokenAddress: string,\n  chainId: ChainId,\n  tokenMap: TokenAddressMap,\n  tokens: Token[],\n) {\n  const wrappedTokenInfo = tokenMap[chainId][tokenAddress];\n  if (!wrappedTokenInfo) {\n    console.log('missing from token list:' + tokenAddress);\n    const token = tokens.find(\n      (item) => item.address.toLowerCase() === tokenAddress.toLowerCase(),\n    );\n    if (!token) {\n      const commonToken = Object.values(GlobalValue.tokens.COMMON).find(\n        (token) => token.address.toLowerCase() === tokenAddress.toLowerCase(),\n      );\n      if (!commonToken) {\n        return GlobalValue.tokens.COMMON.EMPTY;\n      }\n      return commonToken;\n    }\n    return token;\n  }\n\n  return wrappedTokenInfo;\n}\n\nexport function getChartDates(chartData: any[] | null, durationIndex: number) {\n  if (chartData) {\n    const dates: string[] = [];\n    chartData.forEach((value: any, ind: number) => {\n      const month = formatDateFromTimeStamp(Number(value.date), 'MMM');\n      const monthLastDate =\n        ind > 0\n          ? formatDateFromTimeStamp(Number(chartData[ind - 1].date), 'MMM')\n          : '';\n      if (monthLastDate !== month) {\n        dates.push(month);\n      }\n      if (\n        durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART ||\n        durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART\n      ) {\n        const dateStr = formatDateFromTimeStamp(Number(value.date), 'D');\n        if (\n          Number(dateStr) %\n            (durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART\n              ? 3\n              : 7) ===\n          0\n        ) {\n          //Select dates(one date per 3 days for 1 month chart and 7 days for 3 month chart) for x axis values of volume chart on week mode\n          dates.push(dateStr);\n        }\n      }\n    });\n    return dates;\n  } else {\n    return [];\n  }\n}\n\nexport function getChartStartTime(durationIndex: number) {\n  const utcEndTime = dayjs.utc();\n  const months =\n    durationIndex === GlobalConst.analyticChart.SIX_MONTH_CHART\n      ? 6\n      : durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART\n      ? 3\n      : 1;\n  const startTime =\n    utcEndTime\n      .subtract(\n        months,\n        durationIndex === GlobalConst.analyticChart.ONE_YEAR_CHART\n          ? 'year'\n          : 'month',\n      )\n      .endOf('day')\n      .unix() - 1;\n  return startTime;\n}\n\nexport function getLimitedData(data: any[], count: number) {\n  const dataCount = data.length;\n  const newArray: any[] = [];\n  data.forEach((value, index) => {\n    if (dataCount <= count) {\n      newArray.push(value);\n    } else {\n      if (\n        index ===\n        dataCount - Math.floor((dataCount / count) * (count - newArray.length))\n      ) {\n        newArray.push(value);\n      }\n    }\n  });\n  return newArray;\n}\n\nexport function getYAXISValuesAnalytics(chartData: any) {\n  if (!chartData) return;\n  // multiply 0.99 to the min value of chart values and 1.01 to the max value in order to show all data in graph. Without this, the scale of the graph is set strictly and some values may be hidden.\n  const minValue = Math.min(...chartData) * 0.99;\n  const maxValue = Math.max(...chartData) * 1.01;\n  const step = (maxValue - minValue) / 8;\n  const values = [];\n  for (let i = 0; i < 9; i++) {\n    values.push(maxValue - i * step);\n  }\n  return values;\n}\n\nexport function getTokenAPRSyrup(syrup: SyrupInfo) {\n  return syrup.valueOfTotalStakedAmountInUSDC &&\n    syrup.valueOfTotalStakedAmountInUSDC > 0\n    ? ((syrup.rewards ?? 0) / syrup.valueOfTotalStakedAmountInUSDC) *\n        getDaysCurrentYear() *\n        100\n    : 0;\n}\n\nexport function useLairDQUICKAPY(isNew: boolean, lair?: LairInfo) {\n  const daysCurrentYear = getDaysCurrentYear();\n  const quickToken = isNew\n    ? GlobalValue.tokens.COMMON.NEW_QUICK\n    : GlobalValue.tokens.COMMON.OLD_QUICK;\n  const quickPrice = useUSDCPriceToken(quickToken);\n\n  if (!lair) return '';\n  const dQUICKPrice: any = Number(lair.dQUICKtoQUICK.toExact()) * quickPrice;\n  const dQUICKAPR =\n    (((Number(lair.oneDayVol) *\n      GlobalConst.utils.DQUICKFEE *\n      GlobalConst.utils.DQUICKAPR_MULTIPLIER) /\n      Number(lair.dQuickTotalSupply.toExact())) *\n      daysCurrentYear) /\n    dQUICKPrice;\n  if (!dQUICKAPR) return '';\n  const temp = Math.pow(1 + dQUICKAPR / daysCurrentYear, daysCurrentYear) - 1;\n  if (temp > 100) {\n    return '> 10000';\n  } else {\n    return Number(temp * 100).toLocaleString();\n  }\n}\n\nexport function returnFullWidthMobile(isMobile: boolean) {\n  return isMobile ? 1 : 'unset';\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nexport function getWalletKeys(\n  connector: AbstractConnector | undefined,\n): string[] {\n  const { ethereum } = window as any;\n  const isMetaMask = !!(ethereum && !ethereum.isBitKeep && ethereum.isMetaMask);\n  const isBitkeep = !!(ethereum && ethereum.isBitKeep);\n  const isBlockWallet = !!(ethereum && ethereum.isBlockWallet);\n  const isCypherDWallet = !!(ethereum && ethereum.isCypherD);\n  return Object.keys(SUPPORTED_WALLETS).filter(\n    (k) =>\n      SUPPORTED_WALLETS[k].connector === connector &&\n      (connector !== injected ||\n        (isCypherDWallet && k == 'CYPHERD') ||\n        (isBlockWallet && k === 'BLOCKWALLET') ||\n        (isBitkeep && k === 'BITKEEP') ||\n        (isMetaMask && k === 'METAMASK')),\n  );\n}\n\nexport function getTokenAddress(token: Token | undefined) {\n  if (!token) return;\n  if (token.symbol?.toLowerCase() === 'wwdoge') return 'ETH';\n  return token.address;\n}\n\nexport function getRewardRate(rate?: TokenAmount, rewardToken?: Token) {\n  if (!rate || !rewardToken) return;\n  return `${rate.toFixed(2, { groupSeparator: ',' }).replace(/[.,]00$/, '')} ${\n    rewardToken.symbol\n  }  / day`;\n}\n\nexport function getStakedAmountStakingInfo(\n  stakingInfo?: StakingInfo | DualStakingInfo,\n  userLiquidityUnstaked?: TokenAmount,\n) {\n  if (!stakingInfo) return;\n  const stakingTokenPair = stakingInfo.stakingTokenPair;\n  const baseTokenCurrency = unwrappedToken(stakingInfo.baseToken);\n  const empty = unwrappedToken(GlobalValue.tokens.COMMON.EMPTY);\n  const token0 = stakingInfo.tokens[0];\n  const baseToken =\n    baseTokenCurrency === empty ? token0 : stakingInfo.baseToken;\n  if (\n    !stakingInfo.totalSupply ||\n    !stakingTokenPair ||\n    !stakingInfo.totalStakedAmount ||\n    !stakingInfo.stakedAmount\n  )\n    return;\n  // take the total amount of LP tokens staked, multiply by ETH value of all LP tokens, divide by all LP tokens\n  const valueOfTotalStakedAmountInBaseToken = new TokenAmount(\n    baseToken,\n    JSBI.divide(\n      JSBI.multiply(\n        JSBI.multiply(\n          stakingInfo.totalStakedAmount.raw,\n          stakingTokenPair.reserveOf(baseToken).raw,\n        ),\n        JSBI.BigInt(2), // this is b/c the value of LP shares are ~double the value of the WETH they entitle owner to\n      ),\n      stakingInfo.totalSupply.raw,\n    ),\n  );\n\n  const valueOfMyStakedAmountInBaseToken = new TokenAmount(\n    baseToken,\n    JSBI.divide(\n      JSBI.multiply(\n        JSBI.multiply(\n          stakingInfo.stakedAmount.raw,\n          stakingTokenPair.reserveOf(baseToken).raw,\n        ),\n        JSBI.BigInt(2), // this is b/c the value of LP shares are ~double the value of the WETH they entitle owner to\n      ),\n      stakingInfo.totalSupply.raw,\n    ),\n  );\n\n  // get the USD value of staked WETH\n  const USDPrice = stakingInfo.usdPrice;\n  const valueOfTotalStakedAmountInUSDC = USDPrice?.quote(\n    valueOfTotalStakedAmountInBaseToken,\n  );\n\n  const valueOfMyStakedAmountInUSDC = USDPrice?.quote(\n    valueOfMyStakedAmountInBaseToken,\n  );\n\n  const stakedAmounts = {\n    totalStakedBase: valueOfTotalStakedAmountInBaseToken,\n    totalStakedUSD: valueOfTotalStakedAmountInUSDC,\n    myStakedBase: valueOfMyStakedAmountInBaseToken,\n    myStakedUSD: valueOfMyStakedAmountInUSDC,\n    unStakedBase: undefined,\n    unStakedUSD: undefined,\n  };\n\n  if (!userLiquidityUnstaked) return stakedAmounts;\n\n  const valueOfUnstakedAmountInBaseToken = new TokenAmount(\n    baseToken,\n    JSBI.divide(\n      JSBI.multiply(\n        JSBI.multiply(\n          userLiquidityUnstaked.raw,\n          stakingTokenPair.reserveOf(baseToken).raw,\n        ),\n        JSBI.BigInt(2),\n      ),\n      stakingInfo.totalSupply.raw,\n    ),\n  );\n\n  const valueOfUnstakedAmountInUSDC = USDPrice?.quote(\n    valueOfUnstakedAmountInBaseToken,\n  );\n  return {\n    ...stakedAmounts,\n    unStakedBase: valueOfUnstakedAmountInBaseToken,\n    unStakedUSD: valueOfUnstakedAmountInUSDC,\n  };\n}\n\nexport function formatTokenAmount(\n  amount?: TokenAmount | CurrencyAmount,\n  digits = 3,\n) {\n  if (!amount) return '-';\n  const amountStr = amount.toExact();\n  if (Math.abs(Number(amountStr)) > 1) {\n    return Number(amountStr).toLocaleString();\n  }\n  return amount.toSignificant(digits);\n}\n\nexport function formatMulDivTokenAmount(\n  amount?: TokenAmount,\n  otherAmount?: number | string,\n  operator = 'mul',\n  digits = 3,\n) {\n  if (!amount || otherAmount === undefined) return '-';\n  if (otherAmount === 0) return 0;\n\n  const exactAmount = Number(amount.toExact());\n\n  let resultAmount;\n  if (operator === 'mul') resultAmount = exactAmount * Number(otherAmount);\n  else resultAmount = exactAmount / Number(otherAmount);\n\n  if (Math.abs(resultAmount) > 1) return resultAmount.toLocaleString();\n\n  if (operator === 'mul')\n    return amount.multiply(otherAmount.toString()).toSignificant(digits);\n  return amount.divide(otherAmount.toString()).toSignificant(digits);\n}\n\nexport function getTVLStaking(\n  valueOfTotalStakedAmountInUSDC?: CurrencyAmount,\n  valueOfTotalStakedAmountInBaseToken?: TokenAmount,\n) {\n  if (!valueOfTotalStakedAmountInUSDC) {\n    return `${formatTokenAmount(valueOfTotalStakedAmountInBaseToken)} ETH`;\n  }\n  return `$${formatTokenAmount(valueOfTotalStakedAmountInUSDC)}`;\n}\n\nexport function getUSDString(usdValue?: CurrencyAmount) {\n  if (!usdValue) return '$0';\n  const value = Number(usdValue.toExact());\n  if (value > 0 && value < 0.001) return '< $0.001';\n  return `$${value.toLocaleString()}`;\n}\n\nexport function getEarnedUSDSyrup(syrup?: SyrupInfo) {\n  if (!syrup || !syrup.earnedAmount || !syrup.rewardTokenPriceinUSD) return '-';\n  const earnedUSD =\n    Number(syrup.earnedAmount.toExact()) * Number(syrup.rewardTokenPriceinUSD);\n  if (earnedUSD > 0 && earnedUSD < 0.001) return '< $0.001';\n  return `$${earnedUSD.toLocaleString()}`;\n}\n\nexport function getEarnedUSDLPFarm(stakingInfo: StakingInfo | undefined) {\n  if (!stakingInfo || !stakingInfo.earnedAmount) return;\n  const earnedUSD =\n    Number(stakingInfo.earnedAmount.toExact()) * stakingInfo.rewardTokenPrice;\n  if (earnedUSD < 0.001 && earnedUSD > 0) {\n    return '< $0.001';\n  }\n  return `$${earnedUSD.toLocaleString()}`;\n}\n\nexport function getEarnedUSDDualFarm(stakingInfo: DualStakingInfo | undefined) {\n  if (!stakingInfo || !stakingInfo.earnedAmountA || !stakingInfo.earnedAmountB)\n    return;\n  const earnedUSD =\n    Number(stakingInfo.earnedAmountA.toExact()) *\n      stakingInfo.rewardTokenAPrice +\n    Number(stakingInfo.earnedAmountB.toExact()) *\n      Number(stakingInfo.rewardTokenBPrice);\n  if (earnedUSD < 0.001 && earnedUSD > 0) {\n    return '< $0.001';\n  }\n  return `$${earnedUSD.toLocaleString()}`;\n}\n\nexport function isSupportedNetwork(ethereum: any) {\n  return Number(ethereum.chainId) === 2000;\n}\n\nexport function getPageItemsToLoad(index: number, countsPerPage: number) {\n  return index === 0 ? countsPerPage : countsPerPage * index;\n}\n\nexport function getExactTokenAmount(amount?: TokenAmount | CurrencyAmount) {\n  if (!amount) return 0;\n  return Number(amount.toExact());\n}\n\n// this is useful when the value has more digits than token decimals\nexport function getValueTokenDecimals(value: string, token?: Token | Currency) {\n  if (!token) return '0';\n  const valueDigits = value.split('.');\n  const valueDigitStr = valueDigits.length > 1 ? valueDigits[1] : '';\n  const valueDigitCount = valueDigitStr.length;\n  if (valueDigitCount > token.decimals) {\n    return value.substring(\n      0,\n      value.length - (valueDigitCount - token.decimals),\n    );\n  }\n  return value;\n}\n\nexport function getPartialTokenAmount(\n  percent: number,\n  amount?: TokenAmount | CurrencyAmount,\n) {\n  if (!amount) return '0';\n  if (percent === 100) return amount.toExact();\n  const partialAmount = (Number(amount.toExact()) * percent) / 100;\n  return getValueTokenDecimals(partialAmount.toString(), amount.currency);\n}\n\nexport function getResultFromCallState(callState: CallState) {\n  if (!callState || !callState.result || !callState.result[0]) {\n    return;\n  }\n\n  return callState.result[0];\n}\n\nexport function initTokenAmountFromCallResult(\n  token: Token,\n  callState?: CallState,\n) {\n  if (!callState || !callState.result || !callState.result[0]) return;\n  return new TokenAmount(token, JSBI.BigInt(callState.result[0]));\n}\n\nexport function getFarmLPToken(\n  info: StakingInfo | DualStakingInfo | StakingBasic | DualStakingBasic,\n) {\n  const lp = info.lp;\n  const dummyPair = new Pair(\n    new TokenAmount(info.tokens[0], '0'),\n    new TokenAmount(info.tokens[1], '0'),\n  );\n  if (lp && lp !== '') return new Token(2000, lp, 18, 'SLP', 'Staked LP');\n  return dummyPair.liquidityToken;\n}\n\nexport function getSyrupLPToken(info: SyrupBasic | SyrupInfo) {\n  const lp = info.lp;\n  if (lp && lp !== '') return new Token(2000, lp, 18, 'SLP', 'Staked LP');\n  return info.stakingToken;\n}\n\nexport function getCallStateResult(callState?: CallState) {\n  if (callState && callState.result) return callState.result[0];\n  return;\n}\n"]},"metadata":{},"sourceType":"module"}