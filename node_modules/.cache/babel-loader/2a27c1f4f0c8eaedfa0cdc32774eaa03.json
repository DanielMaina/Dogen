{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport { gelatoReducers, GELATO_PERSISTED_KEYS } from '@gelatonetwork/limit-orders-react';\nimport application from 'state/application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport farms from './farms/reducer';\nimport dualFarms from './dualfarms/reducer';\nimport syrups from './syrups/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists', 'farms', 'dualFarms', 'syrups', ...GELATO_PERSISTED_KEYS];\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists,\n    farms,\n    dualFarms,\n    syrups,\n    ...gelatoReducers\n  },\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware({\n    serializableCheck: false,\n    thunk: false\n  }), save({\n    states: PERSISTED_KEYS\n  })],\n  preloadedState: load({\n    states: PERSISTED_KEYS\n  })\n});\nstore.dispatch(updateVersion());\nexport default store;","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/index.ts"],"names":["configureStore","save","load","gelatoReducers","GELATO_PERSISTED_KEYS","application","updateVersion","user","transactions","swap","mint","lists","farms","dualFarms","syrups","burn","multicall","PERSISTED_KEYS","store","reducer","middleware","getDefaultMiddleware","serializableCheck","thunk","states","preloadedState","dispatch"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,2BAA3B;AACA,SACEC,cADF,EAEEC,qBAFF,QAGO,mCAHP;AAKA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,MAAMC,cAAwB,GAAG,CAC/B,MAD+B,EAE/B,cAF+B,EAG/B,OAH+B,EAI/B,OAJ+B,EAK/B,WAL+B,EAM/B,QAN+B,EAO/B,GAAGb,qBAP4B,CAAjC;AAUA,MAAMc,KAAK,GAAGlB,cAAc,CAAC;AAC3BmB,EAAAA,OAAO,EAAE;AACPd,IAAAA,WADO;AAEPE,IAAAA,IAFO;AAGPC,IAAAA,YAHO;AAIPC,IAAAA,IAJO;AAKPC,IAAAA,IALO;AAMPK,IAAAA,IANO;AAOPC,IAAAA,SAPO;AAQPL,IAAAA,KARO;AASPC,IAAAA,KATO;AAUPC,IAAAA,SAVO;AAWPC,IAAAA,MAXO;AAYP,OAAGX;AAZI,GADkB;AAe3BiB,EAAAA,UAAU,EAAGC,oBAAD,IAA0B,CACpC,GAAGA,oBAAoB,CAAC;AAAEC,IAAAA,iBAAiB,EAAE,KAArB;AAA4BC,IAAAA,KAAK,EAAE;AAAnC,GAAD,CADa,EAEpCtB,IAAI,CAAC;AAAEuB,IAAAA,MAAM,EAAEP;AAAV,GAAD,CAFgC,CAfX;AAmB3BQ,EAAAA,cAAc,EAAEvB,IAAI,CAAC;AAAEsB,IAAAA,MAAM,EAAEP;AAAV,GAAD;AAnBO,CAAD,CAA5B;AAsBAC,KAAK,CAACQ,QAAN,CAAepB,aAAa,EAA5B;AAEA,eAAeY,KAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport {\n  gelatoReducers,\n  GELATO_PERSISTED_KEYS,\n} from '@gelatonetwork/limit-orders-react';\n\nimport application from 'state/application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport farms from './farms/reducer';\nimport dualFarms from './dualfarms/reducer';\nimport syrups from './syrups/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\n\nconst PERSISTED_KEYS: string[] = [\n  'user',\n  'transactions',\n  'lists',\n  'farms',\n  'dualFarms',\n  'syrups',\n  ...GELATO_PERSISTED_KEYS,\n];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists,\n    farms,\n    dualFarms,\n    syrups,\n    ...gelatoReducers,\n  },\n  middleware: (getDefaultMiddleware) => [\n    ...getDefaultMiddleware({ serializableCheck: false, thunk: false }),\n    save({ states: PERSISTED_KEYS }),\n  ],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n});\n\nstore.dispatch(updateVersion());\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}