{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/SyrupCard/SyrupAPR.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport { CurrencyLogo } from 'components';\nimport { getTokenAPRSyrup } from 'utils';\nimport { useTranslation } from 'react-i18next';\nimport { GlobalValue } from 'constants/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SyrupAPR = _ref => {\n  _s();\n\n  let {\n    syrup,\n    dQUICKAPY\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const isDQUICKStakingToken = syrup.stakingToken.equals(GlobalValue.tokens.COMMON.OLD_DQUICK);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"small\", {\n      className: \"text-success\",\n      children: [getTokenAPRSyrup(syrup).toLocaleString(), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), isDQUICKStakingToken && /*#__PURE__*/_jsxDEV(Box, {\n      className: \"syrupAPR border-gray2\",\n      children: [/*#__PURE__*/_jsxDEV(CurrencyLogo, {\n        currency: GlobalValue.tokens.COMMON.OLD_QUICK,\n        size: \"12px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginLeft: 4\n        },\n        children: [dQUICKAPY, \"% \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-hint\",\n          children: t('apy')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SyrupAPR, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = SyrupAPR;\nexport default SyrupAPR;\n\nvar _c;\n\n$RefreshReg$(_c, \"SyrupAPR\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/SyrupCard/SyrupAPR.tsx"],"names":["React","Box","CurrencyLogo","getTokenAPRSyrup","useTranslation","GlobalValue","SyrupAPR","syrup","dQUICKAPY","t","isDQUICKStakingToken","stakingToken","equals","tokens","COMMON","OLD_DQUICK","toLocaleString","OLD_QUICK","marginLeft"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,mBAApB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,gBAAT,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,iBAA5B;;;;AAEA,MAAMC,QAA2D,GAAG,QAG9D;AAAA;;AAAA,MAH+D;AACnEC,IAAAA,KADmE;AAEnEC,IAAAA;AAFmE,GAG/D;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQL,cAAc,EAA5B;AAEA,QAAMM,oBAAoB,GAAGH,KAAK,CAACI,YAAN,CAAmBC,MAAnB,CAC3BP,WAAW,CAACQ,MAAZ,CAAmBC,MAAnB,CAA0BC,UADC,CAA7B;AAIA,sBACE;AAAA,4BACE;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAA,iBACGZ,gBAAgB,CAACI,KAAD,CAAhB,CAAwBS,cAAxB,EADH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIGN,oBAAoB,iBACnB,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACE,QAAC,YAAD;AACE,QAAA,QAAQ,EAAEL,WAAW,CAACQ,MAAZ,CAAmBC,MAAnB,CAA0BG,SADtC;AAEE,QAAA,IAAI,EAAC;AAFP;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAb;AAAA,mBACGV,SADH,qBACe;AAAM,UAAA,SAAS,EAAC,WAAhB;AAAA,oBAA6BC,CAAC,CAAC,KAAD;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADf;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA,kBADF;AAkBD,CA5BD;;GAAMH,Q;UAIUF,c;;;KAJVE,Q;AA8BN,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { Box } from '@material-ui/core';\nimport { SyrupInfo } from 'types';\nimport { CurrencyLogo } from 'components';\nimport { getTokenAPRSyrup } from 'utils';\nimport { useTranslation } from 'react-i18next';\nimport { GlobalValue } from 'constants/index';\n\nconst SyrupAPR: React.FC<{ syrup: SyrupInfo; dQUICKAPY: string }> = ({\n  syrup,\n  dQUICKAPY,\n}) => {\n  const { t } = useTranslation();\n\n  const isDQUICKStakingToken = syrup.stakingToken.equals(\n    GlobalValue.tokens.COMMON.OLD_DQUICK,\n  );\n\n  return (\n    <>\n      <small className='text-success'>\n        {getTokenAPRSyrup(syrup).toLocaleString()}%\n      </small>\n      {isDQUICKStakingToken && (\n        <Box className='syrupAPR border-gray2'>\n          <CurrencyLogo\n            currency={GlobalValue.tokens.COMMON.OLD_QUICK}\n            size='12px'\n          />\n          <span style={{ marginLeft: 4 }}>\n            {dQUICKAPY}% <span className='text-hint'>{t('apy')}</span>\n          </span>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SyrupAPR;\n"]},"metadata":{},"sourceType":"module"}