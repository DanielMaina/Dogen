{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput, selectCurrency } from './actions';\nconst initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n  [Field.CURRENCY_A]: {\n    currencyId: ''\n  },\n  [Field.CURRENCY_B]: {\n    currencyId: ''\n  }\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(selectCurrency, (state, _ref) => {\n  let {\n    payload: {\n      currencyId,\n      field\n    }\n  } = _ref;\n  const otherField = field === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A;\n\n  if (currencyId === state[otherField].currencyId) {\n    // the case where we have to swap the order\n    return { ...state,\n      independentField: state.independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A,\n      [field]: {\n        currencyId: currencyId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  } else {\n    // the normal case\n    return { ...state,\n      [field]: {\n        currencyId: currencyId\n      }\n    };\n  }\n}).addCase(typeInput, (state, _ref2) => {\n  let {\n    payload: {\n      field,\n      typedValue,\n      noLiquidity\n    }\n  } = _ref2;\n\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return { ...state,\n        independentField: field,\n        typedValue\n      };\n    } // they're typing into a new field, store the other value\n    else {\n      return { ...state,\n        independentField: field,\n        typedValue,\n        otherTypedValue: state.typedValue\n      };\n    }\n  } else {\n    return { ...state,\n      independentField: field,\n      typedValue,\n      otherTypedValue: ''\n    };\n  }\n}));","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/mint/reducer.ts"],"names":["createReducer","Field","resetMintState","typeInput","selectCurrency","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","currencyId","CURRENCY_B","builder","addCase","state","payload","field","otherField","noLiquidity"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,SAAhC,EAA2CC,cAA3C,QAAiE,WAAjE;AAcA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,gBAAgB,EAAEL,KAAK,CAACM,UADM;AAE9BC,EAAAA,UAAU,EAAE,EAFkB;AAG9BC,EAAAA,eAAe,EAAE,EAHa;AAI9B,GAACR,KAAK,CAACM,UAAP,GAAoB;AAClBG,IAAAA,UAAU,EAAE;AADM,GAJU;AAO9B,GAACT,KAAK,CAACU,UAAP,GAAoB;AAClBD,IAAAA,UAAU,EAAE;AADM;AAPU,CAAhC;AAYA,eAAeV,aAAa,CAAYK,YAAZ,EAA2BO,OAAD,IACpDA,OAAO,CACJC,OADH,CACWX,cADX,EAC2B,MAAMG,YADjC,EAEGQ,OAFH,CAEWT,cAFX,EAE2B,CAACU,KAAD,WAA+C;AAAA,MAAvC;AAAEC,IAAAA,OAAO,EAAE;AAAEL,MAAAA,UAAF;AAAcM,MAAAA;AAAd;AAAX,GAAuC;AACtE,QAAMC,UAAU,GACdD,KAAK,KAAKf,KAAK,CAACM,UAAhB,GAA6BN,KAAK,CAACU,UAAnC,GAAgDV,KAAK,CAACM,UADxD;;AAEA,MAAIG,UAAU,KAAKI,KAAK,CAACG,UAAD,CAAL,CAAkBP,UAArC,EAAiD;AAC/C;AACA,WAAO,EACL,GAAGI,KADE;AAELR,MAAAA,gBAAgB,EACdQ,KAAK,CAACR,gBAAN,KAA2BL,KAAK,CAACM,UAAjC,GACIN,KAAK,CAACU,UADV,GAEIV,KAAK,CAACM,UALP;AAML,OAACS,KAAD,GAAS;AAAEN,QAAAA,UAAU,EAAEA;AAAd,OANJ;AAOL,OAACO,UAAD,GAAc;AAAEP,QAAAA,UAAU,EAAEI,KAAK,CAACE,KAAD,CAAL,CAAaN;AAA3B;AAPT,KAAP;AASD,GAXD,MAWO;AACL;AACA,WAAO,EACL,GAAGI,KADE;AAEL,OAACE,KAAD,GAAS;AAAEN,QAAAA,UAAU,EAAEA;AAAd;AAFJ,KAAP;AAID;AACF,CAvBH,EAwBGG,OAxBH,CAyBIV,SAzBJ,EA0BI,CAACW,KAAD,YAA4D;AAAA,MAApD;AAAEC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAF;AAASR,MAAAA,UAAT;AAAqBU,MAAAA;AAArB;AAAX,GAAoD;;AAC1D,MAAIA,WAAJ,EAAiB;AACf;AACA,QAAIF,KAAK,KAAKF,KAAK,CAACR,gBAApB,EAAsC;AACpC,aAAO,EACL,GAAGQ,KADE;AAELR,QAAAA,gBAAgB,EAAEU,KAFb;AAGLR,QAAAA;AAHK,OAAP;AAKD,KAND,CAOA;AAPA,SAQK;AACH,aAAO,EACL,GAAGM,KADE;AAELR,QAAAA,gBAAgB,EAAEU,KAFb;AAGLR,QAAAA,UAHK;AAILC,QAAAA,eAAe,EAAEK,KAAK,CAACN;AAJlB,OAAP;AAMD;AACF,GAlBD,MAkBO;AACL,WAAO,EACL,GAAGM,KADE;AAELR,MAAAA,gBAAgB,EAAEU,KAFb;AAGLR,MAAAA,UAHK;AAILC,MAAAA,eAAe,EAAE;AAJZ,KAAP;AAMD;AACF,CArDL,CAD0B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput, selectCurrency } from './actions';\n\nexport interface MintState {\n  readonly independentField: Field;\n  readonly typedValue: string;\n  readonly otherTypedValue: string; // for the case when there's no liquidity\n  readonly [Field.CURRENCY_A]: {\n    readonly currencyId: string | undefined;\n  };\n  readonly [Field.CURRENCY_B]: {\n    readonly currencyId: string | undefined;\n  };\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n  [Field.CURRENCY_A]: {\n    currencyId: '',\n  },\n  [Field.CURRENCY_B]: {\n    currencyId: '',\n  },\n};\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField =\n        field === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A;\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField:\n            state.independentField === Field.CURRENCY_A\n              ? Field.CURRENCY_B\n              : Field.CURRENCY_A,\n          [field]: { currencyId: currencyId },\n          [otherField]: { currencyId: state[field].currencyId },\n        };\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId: currencyId },\n        };\n      }\n    })\n    .addCase(\n      typeInput,\n      (state, { payload: { field, typedValue, noLiquidity } }) => {\n        if (noLiquidity) {\n          // they're typing into the field they've last typed in\n          if (field === state.independentField) {\n            return {\n              ...state,\n              independentField: field,\n              typedValue,\n            };\n          }\n          // they're typing into a new field, store the other value\n          else {\n            return {\n              ...state,\n              independentField: field,\n              typedValue,\n              otherTypedValue: state.typedValue,\n            };\n          }\n        } else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: '',\n          };\n        }\n      },\n    ),\n);\n"]},"metadata":{},"sourceType":"module"}