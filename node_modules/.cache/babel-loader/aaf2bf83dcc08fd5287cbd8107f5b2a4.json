{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/BarChart/BarChart.tsx\";\nimport React from 'react';\nimport { Box } from '@material-ui/core';\nimport 'components/styles/BarChart.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BarChart = _ref => {\n  let {\n    data = [],\n    categories,\n    height = 200,\n    onHover,\n    onMouseLeave\n  } = _ref;\n  const maxValue = Math.max(...data);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    onMouseLeave: onMouseLeave,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"flex items-end justify-between\",\n      children: data.map((value, index) => /*#__PURE__*/_jsxDEV(Box, {\n        className: \"barChartItem\",\n        width: `calc(${100 / data.length}% - 2px)`,\n        height: `${Math.max(6, value / maxValue * height)}px` // set min height of bar to 6px for the items with small amount\n        ,\n        onMouseOver: () => onHover && onHover(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), categories && data.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      className: \"categoryValues\",\n      mt: 2,\n      children: categories.map((val, ind) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: val\n      }, ind, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/BarChart/BarChart.tsx"],"names":["React","Box","BarChart","data","categories","height","onHover","onMouseLeave","maxValue","Math","max","map","value","index","length","val","ind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,OAAO,iCAAP;;;AAUA,MAAMC,QAAiC,GAAG,QAMpC;AAAA,MANqC;AACzCC,IAAAA,IAAI,GAAG,EADkC;AAEzCC,IAAAA,UAFyC;AAGzCC,IAAAA,MAAM,GAAG,GAHgC;AAIzCC,IAAAA,OAJyC;AAKzCC,IAAAA;AALyC,GAMrC;AACJ,QAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGP,IAAZ,CAAjB;AACA,sBACE,QAAC,GAAD;AAAK,IAAA,YAAY,EAAEI,YAAnB;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA,gBACGJ,IAAI,CAACQ,GAAL,CAAS,CAACC,KAAD,EAAQC,KAAR,kBACR,QAAC,GAAD;AAEE,QAAA,SAAS,EAAC,cAFZ;AAGE,QAAA,KAAK,EAAG,QAAO,MAAMV,IAAI,CAACW,MAAO,UAHnC;AAIE,QAAA,MAAM,EAAG,GAAEL,IAAI,CAACC,GAAL,CAAS,CAAT,EAAaE,KAAK,GAAGJ,QAAT,GAAqBH,MAAjC,CAAyC,IAJtD,CAI2D;AAJ3D;AAKE,QAAA,WAAW,EAAE,MAAMC,OAAO,IAAIA,OAAO,CAACO,KAAD;AALvC,SACOA,KADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,EAYGT,UAAU,IAAID,IAAI,CAACW,MAAL,GAAc,CAA5B,iBACC,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,EAAE,EAAE,CAApC;AAAA,gBACGV,UAAU,CAACO,GAAX,CAAe,CAACI,GAAD,EAAMC,GAAN,kBACd;AAAA,kBAAcD;AAAd,SAAQC,GAAR;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA9BD;;KAAMd,Q;AAgCN,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { Box } from '@material-ui/core';\nimport 'components/styles/BarChart.scss';\n\nexport interface BarChartProps {\n  data?: Array<number>;\n  categories?: Array<any>;\n  height?: number;\n  onHover?: (index: number) => void;\n  onMouseLeave?: () => void;\n}\n\nconst BarChart: React.FC<BarChartProps> = ({\n  data = [],\n  categories,\n  height = 200,\n  onHover,\n  onMouseLeave,\n}) => {\n  const maxValue = Math.max(...data);\n  return (\n    <Box onMouseLeave={onMouseLeave}>\n      <Box className='flex items-end justify-between'>\n        {data.map((value, index) => (\n          <Box\n            key={index}\n            className='barChartItem'\n            width={`calc(${100 / data.length}% - 2px)`}\n            height={`${Math.max(6, (value / maxValue) * height)}px`} // set min height of bar to 6px for the items with small amount\n            onMouseOver={() => onHover && onHover(index)}\n          />\n        ))}\n      </Box>\n      {categories && data.length > 0 && (\n        <Box className='categoryValues' mt={2}>\n          {categories.map((val, ind) => (\n            <p key={ind}>{val}</p>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}