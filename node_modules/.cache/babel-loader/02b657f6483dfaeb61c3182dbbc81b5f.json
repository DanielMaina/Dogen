{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { TokenAmount } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { useTokenContract } from 'hooks/useContract';\nimport { useSingleCallResult } from 'state/multicall/hooks';\nexport function useTokenAllowance(token, owner, spender) {\n  _s();\n\n  const contract = useTokenContract(token === null || token === void 0 ? void 0 : token.address, false);\n  const inputs = useMemo(() => [owner, spender], [owner, spender]);\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result;\n  return useMemo(() => token && allowance ? new TokenAmount(token, allowance.toString()) : undefined, [token, allowance]);\n}\n\n_s(useTokenAllowance, \"BD3HZECpSGOif9kRQ74c6bW+yYc=\", false, function () {\n  return [useTokenContract, useSingleCallResult];\n});","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/data/Allowances.ts"],"names":["TokenAmount","useMemo","useTokenContract","useSingleCallResult","useTokenAllowance","token","owner","spender","contract","address","inputs","allowance","result","toString","undefined"],"mappings":";;AAAA,SAAgBA,WAAhB,QAAmC,cAAnC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAO,SAASC,iBAAT,CACLC,KADK,EAELC,KAFK,EAGLC,OAHK,EAIoB;AAAA;;AACzB,QAAMC,QAAQ,GAAGN,gBAAgB,CAACG,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEI,OAAR,EAAiB,KAAjB,CAAjC;AAEA,QAAMC,MAAM,GAAGT,OAAO,CAAC,MAAM,CAACK,KAAD,EAAQC,OAAR,CAAP,EAAyB,CAACD,KAAD,EAAQC,OAAR,CAAzB,CAAtB;AACA,QAAMI,SAAS,GAAGR,mBAAmB,CAACK,QAAD,EAAW,WAAX,EAAwBE,MAAxB,CAAnB,CAAmDE,MAArE;AAEA,SAAOX,OAAO,CACZ,MACEI,KAAK,IAAIM,SAAT,GACI,IAAIX,WAAJ,CAAgBK,KAAhB,EAAuBM,SAAS,CAACE,QAAV,EAAvB,CADJ,GAEIC,SAJM,EAKZ,CAACT,KAAD,EAAQM,SAAR,CALY,CAAd;AAOD;;GAjBeP,iB;UAKGF,gB,EAGCC,mB","sourcesContent":["import { Token, TokenAmount } from '@uniswap/sdk';\nimport { useMemo } from 'react';\n\nimport { useTokenContract } from 'hooks/useContract';\nimport { useSingleCallResult } from 'state/multicall/hooks';\n\nexport function useTokenAllowance(\n  token?: Token,\n  owner?: string,\n  spender?: string,\n): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false);\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender]);\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result;\n\n  return useMemo(\n    () =>\n      token && allowance\n        ? new TokenAmount(token, allowance.toString())\n        : undefined,\n    [token, allowance],\n  );\n}\n"]},"metadata":{},"sourceType":"module"}