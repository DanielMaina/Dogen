{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/FarmCard/FarmCardDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport { TokenAmount, Pair } from '@uniswap/sdk';\nimport { unwrappedToken } from 'utils/wrappedCurrency';\nimport { usePairContract, useStakingContract } from 'hooks/useContract';\nimport { useDerivedStakeInfo } from 'state/stake/hooks';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { useTokenBalance } from 'state/wallet/hooks';\nimport { CurrencyLogo, NumericalInput } from 'components';\nimport { Link } from 'react-router-dom';\nimport { GlobalConst } from 'constants/index';\nimport { useActiveWeb3React } from 'hooks';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\nimport { useApproveCallback, ApprovalState } from 'hooks/useApproveCallback';\nimport { getAPYWithFee, getRewardRate, getTokenAddress, getTVLStaking, getStakedAmountStakingInfo, getUSDString, getEarnedUSDLPFarm, formatMulDivTokenAmount, formatTokenAmount, formatAPY, getEarnedUSDDualFarm, getExactTokenAmount, formatNumber } from 'utils';\nimport CircleInfoIcon from \"assets/images/circleinfo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FarmCardDetails = _ref => {\n  _s();\n\n  var _stakingInfo$stakedAm, _stakingInfo$stakedAm2, _stakingInfo$stakedAm3;\n\n  let {\n    stakingInfo,\n    stakingAPY,\n    isLPFarm\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const {\n    breakpoints\n  } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [attemptStaking, setAttemptStaking] = useState(false);\n  const [attemptUnstaking, setAttemptUnstaking] = useState(false);\n  const [attemptClaiming, setAttemptClaiming] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [unstakeAmount, setUnStakeAmount] = useState('');\n  const lpStakingInfo = stakingInfo;\n  const dualStakingInfo = stakingInfo;\n  const token0 = stakingInfo ? stakingInfo.tokens[0] : undefined;\n  const token1 = stakingInfo ? stakingInfo.tokens[1] : undefined;\n  const {\n    account,\n    library\n  } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n  const currency0 = token0 ? unwrappedToken(token0) : undefined;\n  const currency1 = token1 ? unwrappedToken(token1) : undefined;\n  const userLiquidityUnstaked = useTokenBalance(account !== null && account !== void 0 ? account : undefined, (_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : _stakingInfo$stakedAm.token);\n  const stakedAmounts = getStakedAmountStakingInfo(stakingInfo, userLiquidityUnstaked);\n  let apyWithFee = 0;\n\n  if (stakingInfo && stakingInfo.perMonthReturnInRewards && stakingAPY && stakingAPY > 0) {\n    apyWithFee = formatAPY(getAPYWithFee(stakingInfo.perMonthReturnInRewards, stakingAPY));\n  }\n\n  const stakingContract = useStakingContract(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakingRewardAddress);\n  const {\n    parsedAmount: unstakeParsedAmount\n  } = useDerivedStakeInfo(unstakeAmount, (_stakingInfo$stakedAm2 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm2 === void 0 ? void 0 : _stakingInfo$stakedAm2.token, stakingInfo.stakedAmount);\n\n  const onWithdraw = async () => {\n    if (stakingInfo && stakingContract && unstakeParsedAmount) {\n      setAttemptUnstaking(true);\n      await stakingContract.withdraw(`0x${unstakeParsedAmount.raw.toString(16)}`, {\n        gasLimit: 300000\n      }).then(async response => {\n        addTransaction(response, {\n          summary: t('withdrawliquidity')\n        });\n\n        try {\n          await response.wait();\n          setAttemptUnstaking(false);\n        } catch (error) {\n          setAttemptUnstaking(false);\n        }\n      }).catch(error => {\n        setAttemptUnstaking(false);\n        console.log(error);\n      });\n    }\n  };\n\n  const onClaimReward = async () => {\n    if (stakingContract && stakingInfo && stakingInfo.stakedAmount) {\n      setAttemptClaiming(true);\n      await stakingContract.getReward({\n        gasLimit: 350000\n      }).then(async response => {\n        addTransaction(response, {\n          summary: t('claimrewards')\n        });\n\n        try {\n          await response.wait();\n          setAttemptClaiming(false);\n        } catch (error) {\n          setAttemptClaiming(false);\n        }\n      }).catch(error => {\n        setAttemptClaiming(false);\n        console.log(error);\n      });\n    }\n  };\n\n  const {\n    parsedAmount\n  } = useDerivedStakeInfo(stakeAmount, (_stakingInfo$stakedAm3 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm3 === void 0 ? void 0 : _stakingInfo$stakedAm3.token, userLiquidityUnstaked);\n  const deadline = useTransactionDeadline();\n  const [approval, approveCallback] = useApproveCallback(parsedAmount, stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakingRewardAddress);\n  const dummyPair = stakingInfo ? new Pair(new TokenAmount(stakingInfo.tokens[0], '0'), new TokenAmount(stakingInfo.tokens[1], '0')) : null;\n  const pairContract = usePairContract(stakingInfo && stakingInfo.lp && stakingInfo.lp !== '' ? stakingInfo.lp : dummyPair === null || dummyPair === void 0 ? void 0 : dummyPair.liquidityToken.address);\n\n  const onStake = async () => {\n    if (stakingContract && parsedAmount && deadline) {\n      setAttemptStaking(true);\n      stakingContract.stake(`0x${parsedAmount.raw.toString(16)}`, {\n        gasLimit: 350000\n      }).then(async response => {\n        addTransaction(response, {\n          summary: t('depositliquidity')\n        });\n\n        try {\n          await response.wait();\n          setAttemptStaking(false);\n        } catch (error) {\n          setAttemptStaking(false);\n        }\n      }).catch(error => {\n        setAttemptStaking(false);\n        console.log(error);\n      });\n    } else {\n      throw new Error(t('stakewithoutapproval'));\n    }\n  };\n\n  const onAttemptToApprove = async () => {\n    if (!pairContract || !library || !deadline) throw new Error(t('missingdependencies'));\n    const liquidityAmount = parsedAmount;\n    if (!liquidityAmount) throw new Error(t('missingliquidity'));\n    setApproving(true);\n\n    try {\n      await approveCallback();\n      setApproving(false);\n    } catch (e) {\n      setApproving(false);\n    }\n  };\n\n  const earnedUSDStr = isLPFarm ? getEarnedUSDLPFarm(lpStakingInfo) : getEarnedUSDDualFarm(dualStakingInfo);\n  const tvl = getTVLStaking(stakedAmounts === null || stakedAmounts === void 0 ? void 0 : stakedAmounts.totalStakedUSD, stakedAmounts === null || stakedAmounts === void 0 ? void 0 : stakedAmounts.totalStakedBase);\n  const lpRewards = lpStakingInfo.rate * lpStakingInfo.rewardTokenPrice;\n  const lpPoolRate = getRewardRate(lpStakingInfo.totalRewardRate, lpStakingInfo.rewardToken);\n  const dualRewards = dualStakingInfo.rateA * dualStakingInfo.rewardTokenAPrice + dualStakingInfo.rateB * Number(dualStakingInfo.rewardTokenBPrice);\n  const dualPoolRateA = getRewardRate(dualStakingInfo.totalRewardRateA, dualStakingInfo.rewardTokenA);\n  const dualPoolRateB = getRewardRate(dualStakingInfo.totalRewardRateB, dualStakingInfo.rewardTokenB);\n  const mainRewardRate = isLPFarm ? lpStakingInfo.rewardRate : dualStakingInfo.rewardRateA;\n  const stakeEnabled = !approving && !attemptStaking && Number(stakeAmount) > 0 && Number(stakeAmount) <= getExactTokenAmount(userLiquidityUnstaked);\n  const unstakeEnabled = !attemptUnstaking && Number(unstakeAmount) > 0 && Number(unstakeAmount) <= getExactTokenAmount(stakingInfo.stakedAmount);\n  const claimEnabled = !attemptClaiming && (isLPFarm ? lpStakingInfo.earnedAmount && lpStakingInfo.earnedAmount.greaterThan('0') : dualStakingInfo.earnedAmountA && dualStakingInfo.earnedAmountA.greaterThan('0'));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: `farmCardDetails ${stakingInfo !== null && stakingInfo !== void 0 && stakingInfo.ended ? 'justify-end' : 'justify-between'}`,\n      children: stakingInfo && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [isMobile && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            className: \"farmCardMobileRow\",\n            children: [/*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"text-secondary\",\n              children: t('tvl')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: tvl\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: \"farmCardMobileRow\",\n            children: [/*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"text-secondary\",\n              children: t('rewards')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              textAlign: \"right\",\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                children: [\"$\", (isLPFarm ? lpRewards : dualRewards).toLocaleString(), \" /\", t('day')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this), isLPFarm ? /*#__PURE__*/_jsxDEV(\"small\", {\n                children: lpPoolRate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                  children: dualPoolRateA\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: dualPoolRateB\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: \"farmCardMobileRow\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              className: \"flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                className: \"text-secondary\",\n                children: t('apy')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                ml: 0.5,\n                height: 16,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: CircleInfoIcon,\n                  alt: 'arrow up'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"text-success\",\n              children: [apyWithFee, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), !stakingInfo.ended && /*#__PURE__*/_jsxDEV(Box, {\n          className: \"buttonWrapper\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"small\", {\n              children: [t('inwallet'), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              className: \"flex flex-col items-end\",\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                children: [formatTokenAmount(userLiquidityUnstaked), \" \", t('lp'), \" (\", getUSDString(stakedAmounts === null || stakedAmounts === void 0 ? void 0 : stakedAmounts.unStakedUSD), \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: `/pools?currency0=${getTokenAddress(token0)}&currency1=${getTokenAddress(token1)}`,\n                className: \"text-primary\",\n                children: [t('get'), \" \", currency0 === null || currency0 === void 0 ? void 0 : currency0.symbol, \" / \", currency1 === null || currency1 === void 0 ? void 0 : currency1.symbol, ' ', t('lp')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: \"inputVal\",\n            mb: 2,\n            mt: 2,\n            p: 2,\n            children: [/*#__PURE__*/_jsxDEV(NumericalInput, {\n              placeholder: \"0.00\",\n              value: stakeAmount,\n              fontSize: 16,\n              onUserInput: value => {\n                setStakeAmount(value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: userLiquidityUnstaked && userLiquidityUnstaked.greaterThan('0') ? 'text-primary' : 'text-hint',\n              onClick: () => {\n                if (userLiquidityUnstaked && userLiquidityUnstaked.greaterThan('0')) {\n                  setStakeAmount(userLiquidityUnstaked.toExact());\n                } else {\n                  setStakeAmount('');\n                }\n              },\n              children: t('max')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: stakeEnabled ? 'buttonClaim' : 'buttonToken',\n            mt: 2,\n            p: 2,\n            onClick: async () => {\n              if (stakeEnabled) {\n                if (approval === ApprovalState.APPROVED) {\n                  onStake();\n                } else {\n                  onAttemptToApprove();\n                }\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: attemptStaking ? t('stakingLPTokens') : approval === ApprovalState.APPROVED ? t('stakeLPTokens') : approving ? t('approving') : t('approve')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"buttonWrapper\",\n          mx: isMobile ? 0 : 2,\n          my: 2,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            className: \"flex justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(\"small\", {\n              children: [t('mydeposits'), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [formatTokenAmount(stakingInfo.stakedAmount), \" \", t('lp'), \" (\", getUSDString(stakedAmounts === null || stakedAmounts === void 0 ? void 0 : stakedAmounts.myStakedUSD), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: \"inputVal\",\n            mb: 2,\n            mt: 4.5,\n            p: 2,\n            children: [/*#__PURE__*/_jsxDEV(NumericalInput, {\n              placeholder: \"0.00\",\n              value: unstakeAmount,\n              fontSize: 16,\n              onUserInput: value => {\n                setUnStakeAmount(value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: stakingInfo.stakedAmount && stakingInfo.stakedAmount.greaterThan('0') ? 'text-primary' : 'text-hint',\n              onClick: () => {\n                if (stakingInfo.stakedAmount && stakingInfo.stakedAmount.greaterThan('0')) {\n                  setUnStakeAmount(stakingInfo.stakedAmount.toExact());\n                } else {\n                  setUnStakeAmount('');\n                }\n              },\n              children: t('max')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: unstakeEnabled ? 'buttonClaim' : 'buttonToken',\n            mt: 2,\n            p: 2,\n            onClick: () => {\n              if (unstakeEnabled) {\n                onWithdraw();\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: attemptUnstaking ? t('unstakingLPTokens') : t('unstakeLPTokens')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"buttonWrapper\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            className: \"flex flex-col items-center justify-between\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              mb: 1,\n              children: /*#__PURE__*/_jsxDEV(\"small\", {\n                children: [t('unclaimedRewards'), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 17\n            }, this), isLPFarm ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                mb: 1,\n                children: /*#__PURE__*/_jsxDEV(CurrencyLogo, {\n                  currency: lpStakingInfo.rewardToken\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                mb: 1,\n                textAlign: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-secondary\",\n                  children: [formatTokenAmount(lpStakingInfo.earnedAmount), \"\\xA0\", lpStakingInfo.rewardToken.symbol]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: earnedUSDStr\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                mb: 1,\n                display: \"flex\",\n                children: [/*#__PURE__*/_jsxDEV(CurrencyLogo, {\n                  currency: unwrappedToken(dualStakingInfo.rewardTokenA)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(CurrencyLogo, {\n                  currency: unwrappedToken(dualStakingInfo.rewardTokenB)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                mb: 1,\n                textAlign: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: earnedUSDStr\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-secondary\",\n                  children: [formatTokenAmount(dualStakingInfo.earnedAmountA), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"\\xA0\", dualStakingInfo.rewardTokenA.symbol]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 466,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-secondary\",\n                  children: [formatTokenAmount(dualStakingInfo.earnedAmountB), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"\\xA0\", dualStakingInfo.rewardTokenB.symbol]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 470,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            className: claimEnabled ? 'buttonClaim' : 'buttonToken',\n            p: 2,\n            onClick: () => {\n              if (claimEnabled) {\n                onClaimReward();\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: attemptClaiming ? t('claiming') : t('claim')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), (mainRewardRate === null || mainRewardRate === void 0 ? void 0 : mainRewardRate.greaterThan('0')) && /*#__PURE__*/_jsxDEV(Box, {\n      className: \"dailyRateWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-secondary\",\n            children: [t('yourRate', {\n              symbol: isLPFarm ? '' : dualStakingInfo.rewardTokenA.symbol\n            }), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [formatMulDivTokenAmount(mainRewardRate, GlobalConst.utils.ONEDAYSECONDS), ' ', isLPFarm ? lpStakingInfo.rewardToken.symbol : dualStakingInfo.rewardTokenA.symbol, ' ', \"/ \", t('day')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }, this), !isLPFarm && /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-secondary\",\n            children: [t('yourRate', {\n              symbol: dualStakingInfo.rewardTokenB.symbol\n            }), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [formatMulDivTokenAmount(dualStakingInfo.rewardRateB, GlobalConst.utils.ONEDAYSECONDS), ' ', dualStakingInfo.rewardTokenB.symbol, \" / \", t('day')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-secondary\",\n            children: [t('yourFees'), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"$\", formatNumber(stakingInfo.accountFee), \" / \", t('day')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FarmCardDetails, \"mcbAC4CxjWEiLqIFnEJAlwWpoOg=\", false, function () {\n  return [useTranslation, useTheme, useMediaQuery, useActiveWeb3React, useTransactionAdder, useTokenBalance, useStakingContract, useDerivedStakeInfo, useDerivedStakeInfo, useTransactionDeadline, useApproveCallback, usePairContract];\n});\n\n_c = FarmCardDetails;\nexport default FarmCardDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"FarmCardDetails\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/FarmCard/FarmCardDetails.tsx"],"names":["React","useState","Box","useMediaQuery","useTheme","useTranslation","TokenAmount","Pair","unwrappedToken","usePairContract","useStakingContract","useDerivedStakeInfo","useTransactionAdder","useTokenBalance","CurrencyLogo","NumericalInput","Link","GlobalConst","useActiveWeb3React","useTransactionDeadline","useApproveCallback","ApprovalState","getAPYWithFee","getRewardRate","getTokenAddress","getTVLStaking","getStakedAmountStakingInfo","getUSDString","getEarnedUSDLPFarm","formatMulDivTokenAmount","formatTokenAmount","formatAPY","getEarnedUSDDualFarm","getExactTokenAmount","formatNumber","FarmCardDetails","stakingInfo","stakingAPY","isLPFarm","t","breakpoints","isMobile","down","stakeAmount","setStakeAmount","attemptStaking","setAttemptStaking","attemptUnstaking","setAttemptUnstaking","attemptClaiming","setAttemptClaiming","approving","setApproving","unstakeAmount","setUnStakeAmount","lpStakingInfo","dualStakingInfo","token0","tokens","undefined","token1","account","library","addTransaction","currency0","currency1","userLiquidityUnstaked","stakedAmount","token","stakedAmounts","apyWithFee","perMonthReturnInRewards","stakingContract","stakingRewardAddress","parsedAmount","unstakeParsedAmount","onWithdraw","withdraw","raw","toString","gasLimit","then","response","summary","wait","error","catch","console","log","onClaimReward","getReward","deadline","approval","approveCallback","dummyPair","pairContract","lp","liquidityToken","address","onStake","stake","Error","onAttemptToApprove","liquidityAmount","e","earnedUSDStr","tvl","totalStakedUSD","totalStakedBase","lpRewards","rate","rewardTokenPrice","lpPoolRate","totalRewardRate","rewardToken","dualRewards","rateA","rewardTokenAPrice","rateB","Number","rewardTokenBPrice","dualPoolRateA","totalRewardRateA","rewardTokenA","dualPoolRateB","totalRewardRateB","rewardTokenB","mainRewardRate","rewardRate","rewardRateA","stakeEnabled","unstakeEnabled","claimEnabled","earnedAmount","greaterThan","earnedAmountA","ended","toLocaleString","CircleInfoIcon","unStakedUSD","symbol","value","toExact","APPROVED","myStakedUSD","earnedAmountB","utils","ONEDAYSECONDS","rewardRateB","accountFee"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { Box, useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport { StakingInfo, DualStakingInfo } from 'types';\nimport { TokenAmount, Pair } from '@uniswap/sdk';\nimport { unwrappedToken } from 'utils/wrappedCurrency';\nimport { usePairContract, useStakingContract } from 'hooks/useContract';\nimport { useDerivedStakeInfo } from 'state/stake/hooks';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { useTokenBalance } from 'state/wallet/hooks';\nimport { CurrencyLogo, NumericalInput } from 'components';\nimport { Link } from 'react-router-dom';\nimport { GlobalConst } from 'constants/index';\nimport { useActiveWeb3React } from 'hooks';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\nimport { useApproveCallback, ApprovalState } from 'hooks/useApproveCallback';\nimport {\n  getAPYWithFee,\n  getRewardRate,\n  getTokenAddress,\n  getTVLStaking,\n  getStakedAmountStakingInfo,\n  getUSDString,\n  getEarnedUSDLPFarm,\n  formatMulDivTokenAmount,\n  formatTokenAmount,\n  formatAPY,\n  getEarnedUSDDualFarm,\n  getExactTokenAmount,\n  formatNumber,\n} from 'utils';\nimport CircleInfoIcon from 'assets/images/circleinfo.svg';\n\nconst FarmCardDetails: React.FC<{\n  stakingInfo: StakingInfo | DualStakingInfo;\n  stakingAPY: number;\n  isLPFarm?: boolean;\n}> = ({ stakingInfo, stakingAPY, isLPFarm }) => {\n  const { t } = useTranslation();\n  const { breakpoints } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [attemptStaking, setAttemptStaking] = useState(false);\n  const [attemptUnstaking, setAttemptUnstaking] = useState(false);\n  const [attemptClaiming, setAttemptClaiming] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [unstakeAmount, setUnStakeAmount] = useState('');\n\n  const lpStakingInfo = stakingInfo as StakingInfo;\n  const dualStakingInfo = stakingInfo as DualStakingInfo;\n\n  const token0 = stakingInfo ? stakingInfo.tokens[0] : undefined;\n  const token1 = stakingInfo ? stakingInfo.tokens[1] : undefined;\n\n  const { account, library } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n\n  const currency0 = token0 ? unwrappedToken(token0) : undefined;\n  const currency1 = token1 ? unwrappedToken(token1) : undefined;\n\n  const userLiquidityUnstaked = useTokenBalance(\n    account ?? undefined,\n    stakingInfo.stakedAmount?.token,\n  );\n\n  const stakedAmounts = getStakedAmountStakingInfo(\n    stakingInfo,\n    userLiquidityUnstaked,\n  );\n\n  let apyWithFee: number | string = 0;\n\n  if (\n    stakingInfo &&\n    stakingInfo.perMonthReturnInRewards &&\n    stakingAPY &&\n    stakingAPY > 0\n  ) {\n    apyWithFee = formatAPY(\n      getAPYWithFee(stakingInfo.perMonthReturnInRewards, stakingAPY),\n    );\n  }\n\n  const stakingContract = useStakingContract(stakingInfo?.stakingRewardAddress);\n\n  const { parsedAmount: unstakeParsedAmount } = useDerivedStakeInfo(\n    unstakeAmount,\n    stakingInfo.stakedAmount?.token,\n    stakingInfo.stakedAmount,\n  );\n\n  const onWithdraw = async () => {\n    if (stakingInfo && stakingContract && unstakeParsedAmount) {\n      setAttemptUnstaking(true);\n      await stakingContract\n        .withdraw(`0x${unstakeParsedAmount.raw.toString(16)}`, {\n          gasLimit: 300000,\n        })\n        .then(async (response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('withdrawliquidity'),\n          });\n          try {\n            await response.wait();\n            setAttemptUnstaking(false);\n          } catch (error) {\n            setAttemptUnstaking(false);\n          }\n        })\n        .catch((error: any) => {\n          setAttemptUnstaking(false);\n          console.log(error);\n        });\n    }\n  };\n\n  const onClaimReward = async () => {\n    if (stakingContract && stakingInfo && stakingInfo.stakedAmount) {\n      setAttemptClaiming(true);\n      await stakingContract\n        .getReward({ gasLimit: 350000 })\n        .then(async (response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('claimrewards'),\n          });\n          try {\n            await response.wait();\n            setAttemptClaiming(false);\n          } catch (error) {\n            setAttemptClaiming(false);\n          }\n        })\n        .catch((error: any) => {\n          setAttemptClaiming(false);\n          console.log(error);\n        });\n    }\n  };\n\n  const { parsedAmount } = useDerivedStakeInfo(\n    stakeAmount,\n    stakingInfo.stakedAmount?.token,\n    userLiquidityUnstaked,\n  );\n  const deadline = useTransactionDeadline();\n  const [approval, approveCallback] = useApproveCallback(\n    parsedAmount,\n    stakingInfo?.stakingRewardAddress,\n  );\n\n  const dummyPair = stakingInfo\n    ? new Pair(\n        new TokenAmount(stakingInfo.tokens[0], '0'),\n        new TokenAmount(stakingInfo.tokens[1], '0'),\n      )\n    : null;\n  const pairContract = usePairContract(\n    stakingInfo && stakingInfo.lp && stakingInfo.lp !== ''\n      ? stakingInfo.lp\n      : dummyPair?.liquidityToken.address,\n  );\n\n  const onStake = async () => {\n    if (stakingContract && parsedAmount && deadline) {\n      setAttemptStaking(true);\n      stakingContract\n        .stake(`0x${parsedAmount.raw.toString(16)}`, {\n          gasLimit: 350000,\n        })\n        .then(async (response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('depositliquidity'),\n          });\n          try {\n            await response.wait();\n            setAttemptStaking(false);\n          } catch (error) {\n            setAttemptStaking(false);\n          }\n        })\n        .catch((error: any) => {\n          setAttemptStaking(false);\n          console.log(error);\n        });\n    } else {\n      throw new Error(t('stakewithoutapproval'));\n    }\n  };\n\n  const onAttemptToApprove = async () => {\n    if (!pairContract || !library || !deadline)\n      throw new Error(t('missingdependencies'));\n    const liquidityAmount = parsedAmount;\n    if (!liquidityAmount) throw new Error(t('missingliquidity'));\n    setApproving(true);\n    try {\n      await approveCallback();\n      setApproving(false);\n    } catch (e) {\n      setApproving(false);\n    }\n  };\n\n  const earnedUSDStr = isLPFarm\n    ? getEarnedUSDLPFarm(lpStakingInfo)\n    : getEarnedUSDDualFarm(dualStakingInfo);\n\n  const tvl = getTVLStaking(\n    stakedAmounts?.totalStakedUSD,\n    stakedAmounts?.totalStakedBase,\n  );\n\n  const lpRewards = lpStakingInfo.rate * lpStakingInfo.rewardTokenPrice;\n\n  const lpPoolRate = getRewardRate(\n    lpStakingInfo.totalRewardRate,\n    lpStakingInfo.rewardToken,\n  );\n\n  const dualRewards =\n    dualStakingInfo.rateA * dualStakingInfo.rewardTokenAPrice +\n    dualStakingInfo.rateB * Number(dualStakingInfo.rewardTokenBPrice);\n\n  const dualPoolRateA = getRewardRate(\n    dualStakingInfo.totalRewardRateA,\n    dualStakingInfo.rewardTokenA,\n  );\n  const dualPoolRateB = getRewardRate(\n    dualStakingInfo.totalRewardRateB,\n    dualStakingInfo.rewardTokenB,\n  );\n\n  const mainRewardRate = isLPFarm\n    ? lpStakingInfo.rewardRate\n    : dualStakingInfo.rewardRateA;\n\n  const stakeEnabled =\n    !approving &&\n    !attemptStaking &&\n    Number(stakeAmount) > 0 &&\n    Number(stakeAmount) <= getExactTokenAmount(userLiquidityUnstaked);\n\n  const unstakeEnabled =\n    !attemptUnstaking &&\n    Number(unstakeAmount) > 0 &&\n    Number(unstakeAmount) <= getExactTokenAmount(stakingInfo.stakedAmount);\n\n  const claimEnabled =\n    !attemptClaiming &&\n    (isLPFarm\n      ? lpStakingInfo.earnedAmount &&\n        lpStakingInfo.earnedAmount.greaterThan('0')\n      : dualStakingInfo.earnedAmountA &&\n        dualStakingInfo.earnedAmountA.greaterThan('0'));\n\n  return (\n    <>\n      <Box\n        className={`farmCardDetails ${\n          stakingInfo?.ended ? 'justify-end' : 'justify-between'\n        }`}\n      >\n        {stakingInfo && (\n          <>\n            {isMobile && (\n              <>\n                <Box className='farmCardMobileRow'>\n                  <small className='text-secondary'>{t('tvl')}</small>\n                  <small>{tvl}</small>\n                </Box>\n                <Box className='farmCardMobileRow'>\n                  <small className='text-secondary'>{t('rewards')}</small>\n                  <Box textAlign='right'>\n                    <small>\n                      ${(isLPFarm ? lpRewards : dualRewards).toLocaleString()} /\n                      {t('day')}\n                    </small>\n                    <br />\n                    {isLPFarm ? (\n                      <small>{lpPoolRate}</small>\n                    ) : (\n                      <>\n                        <small>{dualPoolRateA}</small>\n                        <br />\n                        <small>{dualPoolRateB}</small>\n                      </>\n                    )}\n                  </Box>\n                </Box>\n                <Box className='farmCardMobileRow'>\n                  <Box className='flex items-center'>\n                    <small className='text-secondary'>{t('apy')}</small>\n                    <Box ml={0.5} height={16}>\n                      <img src={CircleInfoIcon} alt={'arrow up'} />\n                    </Box>\n                  </Box>\n                  <small className='text-success'>{apyWithFee}%</small>\n                </Box>\n              </>\n            )}\n            {!stakingInfo.ended && (\n              <Box className='buttonWrapper'>\n                <Box className='flex justify-between'>\n                  <small>{t('inwallet')}:</small>\n                  <Box className='flex flex-col items-end'>\n                    <small>\n                      {formatTokenAmount(userLiquidityUnstaked)} {t('lp')} (\n                      {getUSDString(stakedAmounts?.unStakedUSD)})\n                    </small>\n                    <Link\n                      to={`/pools?currency0=${getTokenAddress(\n                        token0,\n                      )}&currency1=${getTokenAddress(token1)}`}\n                      className='text-primary'\n                    >\n                      {t('get')} {currency0?.symbol} / {currency1?.symbol}{' '}\n                      {t('lp')}\n                    </Link>\n                  </Box>\n                </Box>\n                <Box className='inputVal' mb={2} mt={2} p={2}>\n                  <NumericalInput\n                    placeholder='0.00'\n                    value={stakeAmount}\n                    fontSize={16}\n                    onUserInput={(value) => {\n                      setStakeAmount(value);\n                    }}\n                  />\n                  <small\n                    className={\n                      userLiquidityUnstaked &&\n                      userLiquidityUnstaked.greaterThan('0')\n                        ? 'text-primary'\n                        : 'text-hint'\n                    }\n                    onClick={() => {\n                      if (\n                        userLiquidityUnstaked &&\n                        userLiquidityUnstaked.greaterThan('0')\n                      ) {\n                        setStakeAmount(userLiquidityUnstaked.toExact());\n                      } else {\n                        setStakeAmount('');\n                      }\n                    }}\n                  >\n                    {t('max')}\n                  </small>\n                </Box>\n                <Box\n                  className={stakeEnabled ? 'buttonClaim' : 'buttonToken'}\n                  mt={2}\n                  p={2}\n                  onClick={async () => {\n                    if (stakeEnabled) {\n                      if (approval === ApprovalState.APPROVED) {\n                        onStake();\n                      } else {\n                        onAttemptToApprove();\n                      }\n                    }\n                  }}\n                >\n                  <p>\n                    {attemptStaking\n                      ? t('stakingLPTokens')\n                      : approval === ApprovalState.APPROVED\n                      ? t('stakeLPTokens')\n                      : approving\n                      ? t('approving')\n                      : t('approve')}\n                  </p>\n                </Box>\n              </Box>\n            )}\n            <Box className='buttonWrapper' mx={isMobile ? 0 : 2} my={2}>\n              <Box className='flex justify-between'>\n                <small>{t('mydeposits')}:</small>\n                <small>\n                  {formatTokenAmount(stakingInfo.stakedAmount)} {t('lp')} (\n                  {getUSDString(stakedAmounts?.myStakedUSD)})\n                </small>\n              </Box>\n              <Box className='inputVal' mb={2} mt={4.5} p={2}>\n                <NumericalInput\n                  placeholder='0.00'\n                  value={unstakeAmount}\n                  fontSize={16}\n                  onUserInput={(value) => {\n                    setUnStakeAmount(value);\n                  }}\n                />\n                <small\n                  className={\n                    stakingInfo.stakedAmount &&\n                    stakingInfo.stakedAmount.greaterThan('0')\n                      ? 'text-primary'\n                      : 'text-hint'\n                  }\n                  onClick={() => {\n                    if (\n                      stakingInfo.stakedAmount &&\n                      stakingInfo.stakedAmount.greaterThan('0')\n                    ) {\n                      setUnStakeAmount(stakingInfo.stakedAmount.toExact());\n                    } else {\n                      setUnStakeAmount('');\n                    }\n                  }}\n                >\n                  {t('max')}\n                </small>\n              </Box>\n              <Box\n                className={unstakeEnabled ? 'buttonClaim' : 'buttonToken'}\n                mt={2}\n                p={2}\n                onClick={() => {\n                  if (unstakeEnabled) {\n                    onWithdraw();\n                  }\n                }}\n              >\n                <p>\n                  {attemptUnstaking\n                    ? t('unstakingLPTokens')\n                    : t('unstakeLPTokens')}\n                </p>\n              </Box>\n            </Box>\n            <Box className='buttonWrapper'>\n              <Box className='flex flex-col items-center justify-between'>\n                <Box mb={1}>\n                  <small>{t('unclaimedRewards')}:</small>\n                </Box>\n                {isLPFarm ? (\n                  <>\n                    <Box mb={1}>\n                      <CurrencyLogo currency={lpStakingInfo.rewardToken} />\n                    </Box>\n                    <Box mb={1} textAlign='center'>\n                      <p className='text-secondary'>\n                        {formatTokenAmount(lpStakingInfo.earnedAmount)}\n                        &nbsp;{lpStakingInfo.rewardToken.symbol}\n                      </p>\n                      <small>{earnedUSDStr}</small>\n                    </Box>\n                  </>\n                ) : (\n                  <>\n                    <Box mb={1} display='flex'>\n                      <CurrencyLogo\n                        currency={unwrappedToken(dualStakingInfo.rewardTokenA)}\n                      />\n                      <CurrencyLogo\n                        currency={unwrappedToken(dualStakingInfo.rewardTokenB)}\n                      />\n                    </Box>\n                    <Box mb={1} textAlign='center'>\n                      <p>{earnedUSDStr}</p>\n                      <p className='text-secondary'>\n                        {formatTokenAmount(dualStakingInfo.earnedAmountA)}\n                        <span>&nbsp;{dualStakingInfo.rewardTokenA.symbol}</span>\n                      </p>\n                      <p className='text-secondary'>\n                        {formatTokenAmount(dualStakingInfo.earnedAmountB)}\n                        <span>&nbsp;{dualStakingInfo.rewardTokenB.symbol}</span>\n                      </p>\n                    </Box>\n                  </>\n                )}\n              </Box>\n              <Box\n                className={claimEnabled ? 'buttonClaim' : 'buttonToken'}\n                p={2}\n                onClick={() => {\n                  if (claimEnabled) {\n                    onClaimReward();\n                  }\n                }}\n              >\n                <p>{attemptClaiming ? t('claiming') : t('claim')}</p>\n              </Box>\n            </Box>\n          </>\n        )}\n      </Box>\n      {mainRewardRate?.greaterThan('0') && (\n        <Box className='dailyRateWrapper'>\n          <Box>\n            <Box>\n              <small className='text-secondary'>\n                {t('yourRate', {\n                  symbol: isLPFarm ? '' : dualStakingInfo.rewardTokenA.symbol,\n                })}\n                :\n              </small>\n            </Box>\n            <small>\n              {formatMulDivTokenAmount(\n                mainRewardRate,\n                GlobalConst.utils.ONEDAYSECONDS,\n              )}{' '}\n              {isLPFarm\n                ? lpStakingInfo.rewardToken.symbol\n                : dualStakingInfo.rewardTokenA.symbol}{' '}\n              / {t('day')}\n            </small>\n          </Box>\n          {!isLPFarm && (\n            <Box>\n              <Box>\n                <small className='text-secondary'>\n                  {t('yourRate', {\n                    symbol: dualStakingInfo.rewardTokenB.symbol,\n                  })}\n                  :\n                </small>\n              </Box>\n              <small>\n                {formatMulDivTokenAmount(\n                  dualStakingInfo.rewardRateB,\n                  GlobalConst.utils.ONEDAYSECONDS,\n                )}{' '}\n                {dualStakingInfo.rewardTokenB.symbol} / {t('day')}\n              </small>\n            </Box>\n          )}\n          <Box>\n            <Box>\n              <small className='text-secondary'>{t('yourFees')}:</small>\n            </Box>\n            <small>\n              ${formatNumber(stakingInfo.accountFee)} / {t('day')}\n            </small>\n          </Box>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default FarmCardDetails;\n"]},"metadata":{},"sourceType":"module"}