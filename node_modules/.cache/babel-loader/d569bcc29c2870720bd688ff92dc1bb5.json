{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/AnalyticsPage/AnalyticsVolumeChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Box } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { useGlobalData } from 'state/application/hooks';\nimport { formatCompact, getChartData, formatDateFromTimeStamp, getPriceClass, getChartDates, getChartStartTime, getLimitedData } from 'utils';\nimport { BarChart, ChartType } from 'components';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DAY_VOLUME = 0;\nconst WEEK_VOLUME = 1;\n\nconst AnalyticsVolumeChart = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const volumeTypes = [DAY_VOLUME, WEEK_VOLUME];\n  const volumeTypeTexts = [t('dayAbb'), t('weekAbb')];\n  const [volumeIndex, setVolumeIndex] = useState(DAY_VOLUME);\n  const [durationIndex, setDurationIndex] = useState(GlobalConst.analyticChart.ONE_MONTH_CHART);\n  const [selectedVolumeIndex, setSelectedVolumeIndex] = useState(-1);\n  const {\n    globalData\n  } = useGlobalData();\n  const [globalChartData, updateGlobalChartData] = useState(null);\n  useEffect(() => {\n    const fetchChartData = async () => {\n      updateGlobalChartData(null);\n      const [newChartData, newWeeklyData] = await getChartData(durationIndex === GlobalConst.analyticChart.ALL_CHART ? 0 : getChartStartTime(durationIndex));\n\n      if (newChartData && newWeeklyData) {\n        const dayItems = getLimitedData(newChartData, GlobalConst.analyticChart.CHART_COUNT);\n        const weekItems = getLimitedData(newWeeklyData, GlobalConst.analyticChart.CHART_COUNT);\n        updateGlobalChartData({\n          day: dayItems,\n          week: weekItems\n        });\n      }\n    };\n\n    fetchChartData();\n  }, [updateGlobalChartData, durationIndex]);\n  const liquidityWeeks = useMemo(() => {\n    if (globalChartData) {\n      const dates = [];\n      globalChartData.week.forEach((value, ind) => {\n        const month = formatDateFromTimeStamp(Number(value.date), 'MMM');\n        const monthLastDate = ind > 0 ? formatDateFromTimeStamp(Number(globalChartData.week[ind - 1].date), 'MMM') : '';\n\n        if (monthLastDate !== month) {\n          dates.push(month);\n        }\n\n        if (durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART || durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART) {\n          const dateStr = formatDateFromTimeStamp(Number(value.date), 'D');\n\n          if (Number(dateStr) % 2 === 0) {\n            //Select dates(one date per 2 weeks) for x axis values of volume chart on week mode\n            dates.push(dateStr);\n          }\n        }\n      });\n      return dates;\n    } else {\n      return [];\n    }\n  }, [globalChartData, durationIndex]);\n\n  const getVolumePercent = volumeIndex => {\n    if (globalChartData && selectedVolumeIndex > 0) {\n      const volumeDataArr = [globalChartData.day, globalChartData.week];\n      const volumeData = volumeDataArr[volumeIndex];\n      if (!volumeData || volumeData.length <= 1) return 0;\n      const currentVolumeIndex = Math.min(selectedVolumeIndex, volumeData.length - 1);\n      const currentVolumeData = volumeData[currentVolumeIndex];\n      const prevVolumeData = volumeData[currentVolumeIndex - 1];\n      let currentVolume = 0;\n      let prevVolume = 0;\n\n      switch (volumeIndex) {\n        case WEEK_VOLUME:\n          currentVolume = currentVolumeData.weeklyVolumeUSD;\n          prevVolume = prevVolumeData.weeklyVolumeUSD;\n          break;\n\n        case DAY_VOLUME:\n          currentVolume = currentVolumeData.dailyVolumeUSD;\n          prevVolume = prevVolumeData.dailyVolumeUSD;\n          break;\n      }\n\n      if (prevVolume <= 0) return 0;\n      return currentVolume / prevVolume * 100 - 100;\n    } else if (globalData && selectedVolumeIndex === -1) {\n      switch (volumeIndex) {\n        case WEEK_VOLUME:\n          return globalData.weeklyVolumeChange;\n\n        case DAY_VOLUME:\n          return globalData.volumeChangeUSD;\n\n        default:\n          return 0;\n      }\n    } else {\n      return 0;\n    }\n  };\n\n  const volumeDates = useMemo(() => {\n    if (selectedVolumeIndex > -1) {\n      if (volumeIndex === DAY_VOLUME) {\n        return formatDateFromTimeStamp(Number(globalChartData.day[selectedVolumeIndex].date), 'MMM DD, YYYY');\n      } else {\n        const weekStart = formatDateFromTimeStamp(Number(globalChartData.week[Math.max(0, selectedVolumeIndex - 1)].date), 'MMM DD, YYYY', selectedVolumeIndex > 0 ? 1 : -6);\n        const weekEnd = formatDateFromTimeStamp(Number(globalChartData.week[selectedVolumeIndex].date), 'MMM DD, YYYY');\n        return `${weekStart} - ${weekEnd}`;\n      }\n    }\n\n    return '';\n  }, [globalChartData, selectedVolumeIndex, volumeIndex]);\n  const barChartData = useMemo(() => {\n    if (globalChartData) {\n      return volumeIndex === WEEK_VOLUME ? globalChartData.week.map(value => value.weeklyVolumeUSD) : globalChartData.day.map(value => value.dailyVolumeUSD);\n    } else {\n      return [];\n    }\n  }, [globalChartData, volumeIndex]);\n  const volumePercentClass = getPriceClass(Number(getVolumePercent(volumeIndex)));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-disabled text-bold\",\n          children: [t('volume'), \" \", selectedVolumeIndex === -1 ? `(${t('24hr')})` : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChartType, {\n          chartTypes: volumeTypes,\n          typeTexts: volumeTypeTexts,\n          chartType: volumeIndex,\n          setChartType: setVolumeIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 0.5,\n        className: \"flex items-start\",\n        children: [globalChartData && globalData ? /*#__PURE__*/_jsxDEV(Box, {\n          flex: 1,\n          mr: 2,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [\"$\", formatCompact(selectedVolumeIndex > -1 ? volumeIndex === DAY_VOLUME ? globalChartData.day[selectedVolumeIndex].dailyVolumeUSD : globalChartData.week[selectedVolumeIndex].weeklyVolumeUSD : volumeIndex === DAY_VOLUME ? globalData.oneDayVolumeUSD : globalData.oneWeekVolume)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              ml: 1,\n              height: 23,\n              px: 1,\n              borderRadius: 40,\n              className: volumePercentClass,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [`${getVolumePercent(volumeIndex) > 0 ? '+' : ''}\n                      ${getVolumePercent(volumeIndex).toLocaleString()}`, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            height: 21,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-disabled\",\n              children: volumeDates\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Box, {\n          mr: 2,\n          flex: 1,\n          children: /*#__PURE__*/_jsxDEV(Skeleton, {\n            variant: \"rect\",\n            width: \"100%\",\n            height: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ChartType, {\n          chartTypes: GlobalData.analytics.CHART_DURATIONS,\n          typeTexts: GlobalData.analytics.CHART_DURATION_TEXTS,\n          chartType: durationIndex,\n          setChartType: setDurationIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      children: globalChartData ? /*#__PURE__*/_jsxDEV(BarChart, {\n        height: 200,\n        data: barChartData,\n        categories: volumeIndex === WEEK_VOLUME ? liquidityWeeks : getChartDates(globalChartData.day, durationIndex),\n        onHover: ind => setSelectedVolumeIndex(ind),\n        onMouseLeave: () => {\n          setSelectedVolumeIndex(-1);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rect\",\n        width: \"100%\",\n        height: 250\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AnalyticsVolumeChart, \"PljM87L0z6CGC2H65+AySCW5DYM=\", false, function () {\n  return [useTranslation, useGlobalData];\n});\n\n_c = AnalyticsVolumeChart;\nexport default AnalyticsVolumeChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnalyticsVolumeChart\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/AnalyticsPage/AnalyticsVolumeChart.tsx"],"names":["React","useState","useEffect","useMemo","Box","Skeleton","useGlobalData","formatCompact","getChartData","formatDateFromTimeStamp","getPriceClass","getChartDates","getChartStartTime","getLimitedData","BarChart","ChartType","GlobalConst","GlobalData","useTranslation","DAY_VOLUME","WEEK_VOLUME","AnalyticsVolumeChart","t","volumeTypes","volumeTypeTexts","volumeIndex","setVolumeIndex","durationIndex","setDurationIndex","analyticChart","ONE_MONTH_CHART","selectedVolumeIndex","setSelectedVolumeIndex","globalData","globalChartData","updateGlobalChartData","fetchChartData","newChartData","newWeeklyData","ALL_CHART","dayItems","CHART_COUNT","weekItems","day","week","liquidityWeeks","dates","forEach","value","ind","month","Number","date","monthLastDate","push","THREE_MONTH_CHART","dateStr","getVolumePercent","volumeDataArr","volumeData","length","currentVolumeIndex","Math","min","currentVolumeData","prevVolumeData","currentVolume","prevVolume","weeklyVolumeUSD","dailyVolumeUSD","weeklyVolumeChange","volumeChangeUSD","volumeDates","weekStart","max","weekEnd","barChartData","map","volumePercentClass","oneDayVolumeUSD","oneWeekVolume","toLocaleString","analytics","CHART_DURATIONS","CHART_DURATION_TEXTS"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Box } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { useGlobalData } from 'state/application/hooks';\nimport {\n  formatCompact,\n  getChartData,\n  formatDateFromTimeStamp,\n  getPriceClass,\n  getChartDates,\n  getChartStartTime,\n  getLimitedData,\n} from 'utils';\nimport { BarChart, ChartType } from 'components';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { useTranslation } from 'react-i18next';\n\nconst DAY_VOLUME = 0;\nconst WEEK_VOLUME = 1;\n\nconst AnalyticsVolumeChart: React.FC = () => {\n  const { t } = useTranslation();\n  const volumeTypes = [DAY_VOLUME, WEEK_VOLUME];\n  const volumeTypeTexts = [t('dayAbb'), t('weekAbb')];\n  const [volumeIndex, setVolumeIndex] = useState(DAY_VOLUME);\n  const [durationIndex, setDurationIndex] = useState(\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\n  );\n  const [selectedVolumeIndex, setSelectedVolumeIndex] = useState(-1);\n  const { globalData } = useGlobalData();\n  const [globalChartData, updateGlobalChartData] = useState<any>(null);\n\n  useEffect(() => {\n    const fetchChartData = async () => {\n      updateGlobalChartData(null);\n      const [newChartData, newWeeklyData] = await getChartData(\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\n          ? 0\n          : getChartStartTime(durationIndex),\n      );\n      if (newChartData && newWeeklyData) {\n        const dayItems = getLimitedData(\n          newChartData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        const weekItems = getLimitedData(\n          newWeeklyData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        updateGlobalChartData({ day: dayItems, week: weekItems });\n      }\n    };\n    fetchChartData();\n  }, [updateGlobalChartData, durationIndex]);\n\n  const liquidityWeeks = useMemo(() => {\n    if (globalChartData) {\n      const dates: string[] = [];\n      globalChartData.week.forEach((value: any, ind: number) => {\n        const month = formatDateFromTimeStamp(Number(value.date), 'MMM');\n        const monthLastDate =\n          ind > 0\n            ? formatDateFromTimeStamp(\n                Number(globalChartData.week[ind - 1].date),\n                'MMM',\n              )\n            : '';\n        if (monthLastDate !== month) {\n          dates.push(month);\n        }\n        if (\n          durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART ||\n          durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART\n        ) {\n          const dateStr = formatDateFromTimeStamp(Number(value.date), 'D');\n          if (Number(dateStr) % 2 === 0) {\n            //Select dates(one date per 2 weeks) for x axis values of volume chart on week mode\n            dates.push(dateStr);\n          }\n        }\n      });\n      return dates;\n    } else {\n      return [];\n    }\n  }, [globalChartData, durationIndex]);\n\n  const getVolumePercent = (volumeIndex: number) => {\n    if (globalChartData && selectedVolumeIndex > 0) {\n      const volumeDataArr = [globalChartData.day, globalChartData.week];\n      const volumeData = volumeDataArr[volumeIndex];\n      if (!volumeData || volumeData.length <= 1) return 0;\n      const currentVolumeIndex = Math.min(\n        selectedVolumeIndex,\n        volumeData.length - 1,\n      );\n      const currentVolumeData = volumeData[currentVolumeIndex];\n      const prevVolumeData = volumeData[currentVolumeIndex - 1];\n      let currentVolume = 0;\n      let prevVolume = 0;\n      switch (volumeIndex) {\n        case WEEK_VOLUME:\n          currentVolume = currentVolumeData.weeklyVolumeUSD;\n          prevVolume = prevVolumeData.weeklyVolumeUSD;\n          break;\n        case DAY_VOLUME:\n          currentVolume = currentVolumeData.dailyVolumeUSD;\n          prevVolume = prevVolumeData.dailyVolumeUSD;\n          break;\n      }\n      if (prevVolume <= 0) return 0;\n      return (currentVolume / prevVolume) * 100 - 100;\n    } else if (globalData && selectedVolumeIndex === -1) {\n      switch (volumeIndex) {\n        case WEEK_VOLUME:\n          return globalData.weeklyVolumeChange;\n        case DAY_VOLUME:\n          return globalData.volumeChangeUSD;\n        default:\n          return 0;\n      }\n    } else {\n      return 0;\n    }\n  };\n\n  const volumeDates = useMemo(() => {\n    if (selectedVolumeIndex > -1) {\n      if (volumeIndex === DAY_VOLUME) {\n        return formatDateFromTimeStamp(\n          Number(globalChartData.day[selectedVolumeIndex].date),\n          'MMM DD, YYYY',\n        );\n      } else {\n        const weekStart = formatDateFromTimeStamp(\n          Number(\n            globalChartData.week[Math.max(0, selectedVolumeIndex - 1)].date,\n          ),\n          'MMM DD, YYYY',\n          selectedVolumeIndex > 0 ? 1 : -6,\n        );\n        const weekEnd = formatDateFromTimeStamp(\n          Number(globalChartData.week[selectedVolumeIndex].date),\n          'MMM DD, YYYY',\n        );\n        return `${weekStart} - ${weekEnd}`;\n      }\n    }\n    return '';\n  }, [globalChartData, selectedVolumeIndex, volumeIndex]);\n\n  const barChartData = useMemo(() => {\n    if (globalChartData) {\n      return volumeIndex === WEEK_VOLUME\n        ? globalChartData.week.map((value: any) => value.weeklyVolumeUSD)\n        : globalChartData.day.map((value: any) => value.dailyVolumeUSD);\n    } else {\n      return [];\n    }\n  }, [globalChartData, volumeIndex]);\n\n  const volumePercentClass = getPriceClass(\n    Number(getVolumePercent(volumeIndex)),\n  );\n\n  return (\n    <>\n      <Box>\n        <Box className='flex justify-between'>\n          <span className='text-disabled text-bold'>\n            {t('volume')} {selectedVolumeIndex === -1 ? `(${t('24hr')})` : ''}\n          </span>\n          <ChartType\n            chartTypes={volumeTypes}\n            typeTexts={volumeTypeTexts}\n            chartType={volumeIndex}\n            setChartType={setVolumeIndex}\n          />\n        </Box>\n        <Box mt={0.5} className='flex items-start'>\n          {globalChartData && globalData ? (\n            <Box flex={1} mr={2}>\n              <Box className='flex items-center'>\n                <h5>\n                  $\n                  {formatCompact(\n                    selectedVolumeIndex > -1\n                      ? volumeIndex === DAY_VOLUME\n                        ? globalChartData.day[selectedVolumeIndex]\n                            .dailyVolumeUSD\n                        : globalChartData.week[selectedVolumeIndex]\n                            .weeklyVolumeUSD\n                      : volumeIndex === DAY_VOLUME\n                      ? globalData.oneDayVolumeUSD\n                      : globalData.oneWeekVolume,\n                  )}\n                </h5>\n                <Box\n                  ml={1}\n                  height={23}\n                  px={1}\n                  borderRadius={40}\n                  className={volumePercentClass}\n                >\n                  <span>\n                    {`${getVolumePercent(volumeIndex) > 0 ? '+' : ''}\n                      ${getVolumePercent(volumeIndex).toLocaleString()}`}\n                    %\n                  </span>\n                </Box>\n              </Box>\n              <Box height={21}>\n                <span className='text-disabled'>{volumeDates}</span>\n              </Box>\n            </Box>\n          ) : (\n            <Box mr={2} flex={1}>\n              <Skeleton variant='rect' width='100%' height={24} />\n            </Box>\n          )}\n          <ChartType\n            chartTypes={GlobalData.analytics.CHART_DURATIONS}\n            typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\n            chartType={durationIndex}\n            setChartType={setDurationIndex}\n          />\n        </Box>\n      </Box>\n      <Box mt={2}>\n        {globalChartData ? (\n          <BarChart\n            height={200}\n            data={barChartData}\n            categories={\n              volumeIndex === WEEK_VOLUME\n                ? liquidityWeeks\n                : getChartDates(globalChartData.day, durationIndex)\n            }\n            onHover={(ind) => setSelectedVolumeIndex(ind)}\n            onMouseLeave={() => {\n              setSelectedVolumeIndex(-1);\n            }}\n          />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={250} />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsVolumeChart;\n"]},"metadata":{},"sourceType":"module"}