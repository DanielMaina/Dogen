{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addressUtils = void 0;\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst _ = require(\"lodash\");\n\nconst hex_utils_1 = require(\"./hex_utils\");\n\nconst BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nconst SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nconst ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n  isChecksumAddress(address) {\n    return ethereumjs_util_1.isValidChecksumAddress(address);\n  },\n\n  isAddress(address) {\n    if (!BASIC_ADDRESS_REGEX.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } else {\n      // Otherwise check each case\n      const isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n      return isValidChecksummedAddress;\n    }\n  },\n\n  padZeros(address) {\n    return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n  },\n\n  generatePseudoRandomAddress() {\n    // tslint:disable-next-line: custom-no-magic-numbers\n    return hex_utils_1.hexUtils.random(20);\n  }\n\n};","map":{"version":3,"sources":["../../src/address_utils.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAM,mBAAmB,GAAG,sBAA5B;AACA,MAAM,uBAAuB,GAAG,oCAAhC;AACA,MAAM,cAAc,GAAG,EAAvB;AAEa,OAAA,CAAA,YAAA,GAAe;AACxB,EAAA,iBAAiB,CAAC,OAAD,EAAgB;AAC7B,WAAO,iBAAA,CAAA,sBAAA,CAAuB,OAAvB,CAAP;AACH,GAHuB;;AAIxB,EAAA,SAAS,CAAC,OAAD,EAAgB;AACrB,QAAI,CAAC,mBAAmB,CAAC,IAApB,CAAyB,OAAzB,CAAL,EAAwC;AACpC;AACA,aAAO,KAAP;AACH,KAHD,MAGO,IAAI,uBAAuB,CAAC,IAAxB,CAA6B,OAA7B,CAAJ,EAA2C;AAC9C;AACA,aAAO,IAAP;AACH,KAHM,MAGA;AACH;AACA,YAAM,yBAAyB,GAAG,OAAA,CAAA,YAAA,CAAa,iBAAb,CAA+B,OAA/B,CAAlC;AACA,aAAO,yBAAP;AACH;AACJ,GAhBuB;;AAiBxB,EAAA,QAAQ,CAAC,OAAD,EAAgB;AACpB,WAAO,iBAAA,CAAA,YAAA,CAAa,CAAC,CAAC,QAAF,CAAW,iBAAA,CAAA,cAAA,CAAe,OAAf,CAAX,EAAoC,cAApC,EAAoD,GAApD,CAAb,CAAP;AACH,GAnBuB;;AAoBxB,EAAA,2BAA2B,GAAA;AACvB;AACA,WAAO,WAAA,CAAA,QAAA,CAAS,MAAT,CAAgB,EAAhB,CAAP;AACH;;AAvBuB,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addressUtils = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst _ = require(\"lodash\");\nconst hex_utils_1 = require(\"./hex_utils\");\nconst BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nconst SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nconst ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n    isChecksumAddress(address) {\n        return ethereumjs_util_1.isValidChecksumAddress(address);\n    },\n    isAddress(address) {\n        if (!BASIC_ADDRESS_REGEX.test(address)) {\n            // Check if it has the basic requirements of an address\n            return false;\n        }\n        else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n            // If it's all small caps or all all caps, return true\n            return true;\n        }\n        else {\n            // Otherwise check each case\n            const isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n            return isValidChecksummedAddress;\n        }\n    },\n    padZeros(address) {\n        return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n    },\n    generatePseudoRandomAddress() {\n        // tslint:disable-next-line: custom-no-magic-numbers\n        return hex_utils_1.hexUtils.random(20);\n    },\n};\n//# sourceMappingURL=address_utils.js.map"]},"metadata":{},"sourceType":"script"}