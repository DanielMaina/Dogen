{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { TokenAmount } from '@uniswap/sdk';\nimport { Interface } from '@ethersproject/abi';\nimport { useTokenContract } from 'hooks/useContract';\nimport { useSingleCallResult, useMultipleContractSingleData } from 'state/multicall/hooks';\nimport ERC20_ABI from 'constants/abis/erc20.json'; // returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\n\nexport function useTotalSupply(token) {\n  _s();\n\n  var _useSingleCallResult, _useSingleCallResult$;\n\n  const contract = useTokenContract(token === null || token === void 0 ? void 0 : token.address, false);\n  const totalSupply = (_useSingleCallResult = useSingleCallResult(contract, 'totalSupply')) === null || _useSingleCallResult === void 0 ? void 0 : (_useSingleCallResult$ = _useSingleCallResult.result) === null || _useSingleCallResult$ === void 0 ? void 0 : _useSingleCallResult$[0];\n  return token && totalSupply ? new TokenAmount(token, totalSupply.toString()) : undefined;\n}\n\n_s(useTotalSupply, \"O1q4nO3dWKIds6AT6dgyx5XxxBQ=\", false, function () {\n  return [useTokenContract, useSingleCallResult];\n});\n\nexport function useTotalSupplys(tokens) {\n  _s2();\n\n  const tokenAddresses = tokens.map(token => token.address);\n  const tokenInterface = new Interface(ERC20_ABI);\n  const results = useMultipleContractSingleData(tokenAddresses, tokenInterface, 'totalSupply');\n  return results.map((result, i) => {\n    const {\n      result: reserves\n    } = result;\n    const totalSupply = reserves === null || reserves === void 0 ? void 0 : reserves[0];\n    return totalSupply ? new TokenAmount(tokens[i], totalSupply.toString()) : undefined;\n  });\n}\n\n_s2(useTotalSupplys, \"nM3pjEzYekPPxVhari5sr8mkUk4=\", false, function () {\n  return [useMultipleContractSingleData];\n});","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/data/TotalSupply.ts"],"names":["TokenAmount","Interface","useTokenContract","useSingleCallResult","useMultipleContractSingleData","ERC20_ABI","useTotalSupply","token","contract","address","totalSupply","result","toString","undefined","useTotalSupplys","tokens","tokenAddresses","map","tokenInterface","results","i","reserves"],"mappings":";;;AACA,SAAgBA,WAAhB,QAAmC,cAAnC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SACEC,mBADF,EAEEC,6BAFF,QAGO,uBAHP;AAIA,OAAOC,SAAP,MAAsB,2BAAtB,C,CAEA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAgE;AAAA;;AAAA;;AACrE,QAAMC,QAAQ,GAAGN,gBAAgB,CAACK,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEE,OAAR,EAAiB,KAAjB,CAAjC;AAEA,QAAMC,WAAsB,2BAAGP,mBAAmB,CAACK,QAAD,EAAW,aAAX,CAAtB,kFAAG,qBAC3BG,MADwB,0DAAG,sBAClB,CADkB,CAA/B;AAGA,SAAOJ,KAAK,IAAIG,WAAT,GACH,IAAIV,WAAJ,CAAgBO,KAAhB,EAAuBG,WAAW,CAACE,QAAZ,EAAvB,CADG,GAEHC,SAFJ;AAGD;;GATeP,c;UACGJ,gB,EAEcC,mB;;;AAQjC,OAAO,SAASW,eAAT,CAAyBC,MAAzB,EAAuE;AAAA;;AAC5E,QAAMC,cAAc,GAAGD,MAAM,CAACE,GAAP,CAAYV,KAAD,IAAWA,KAAK,CAACE,OAA5B,CAAvB;AACA,QAAMS,cAAc,GAAG,IAAIjB,SAAJ,CAAcI,SAAd,CAAvB;AACA,QAAMc,OAAO,GAAGf,6BAA6B,CAC3CY,cAD2C,EAE3CE,cAF2C,EAG3C,aAH2C,CAA7C;AAKA,SAAOC,OAAO,CAACF,GAAR,CAAY,CAACN,MAAD,EAASS,CAAT,KAAe;AAChC,UAAM;AAAET,MAAAA,MAAM,EAAEU;AAAV,QAAuBV,MAA7B;AACA,UAAMD,WAAsB,GAAGW,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAG,CAAH,CAAvC;AACA,WAAOX,WAAW,GACd,IAAIV,WAAJ,CAAgBe,MAAM,CAACK,CAAD,CAAtB,EAA2BV,WAAW,CAACE,QAAZ,EAA3B,CADc,GAEdC,SAFJ;AAGD,GANM,CAAP;AAOD;;IAfeC,e;UAGEV,6B","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { Token, TokenAmount } from '@uniswap/sdk';\nimport { Interface } from '@ethersproject/abi';\nimport { useTokenContract } from 'hooks/useContract';\nimport {\n  useSingleCallResult,\n  useMultipleContractSingleData,\n} from 'state/multicall/hooks';\nimport ERC20_ABI from 'constants/abis/erc20.json';\n\n// returns undefined if input token is undefined, or fails to get token contract,\n// or contract total supply cannot be fetched\nexport function useTotalSupply(token?: Token): TokenAmount | undefined {\n  const contract = useTokenContract(token?.address, false);\n\n  const totalSupply: BigNumber = useSingleCallResult(contract, 'totalSupply')\n    ?.result?.[0];\n\n  return token && totalSupply\n    ? new TokenAmount(token, totalSupply.toString())\n    : undefined;\n}\n\nexport function useTotalSupplys(tokens: Token[]): (TokenAmount | undefined)[] {\n  const tokenAddresses = tokens.map((token) => token.address);\n  const tokenInterface = new Interface(ERC20_ABI);\n  const results = useMultipleContractSingleData(\n    tokenAddresses,\n    tokenInterface,\n    'totalSupply',\n  );\n  return results.map((result, i) => {\n    const { result: reserves } = result;\n    const totalSupply: BigNumber = reserves?.[0];\n    return totalSupply\n      ? new TokenAmount(tokens[i], totalSupply.toString())\n      : undefined;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}