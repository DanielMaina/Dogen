{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NonceTrackerSubprovider = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar inherits = require('util').inherits;\n\nvar Transaction = require('ethereumjs-tx');\n\nvar ethUtil = require('ethereumjs-util');\n\nvar Subprovider = require('@arkane-network/web3-provider-engine/subproviders/subprovider');\n\nvar blockTagForPayload = require('@arkane-network/web3-provider-engine/util/rpc-cache-utils').blockTagForPayload;\n\nvar NonceTrackerSubprovider =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(NonceTrackerSubprovider, _super);\n\n  function NonceTrackerSubprovider(opts) {\n    var _this = _super.call(this) || this;\n\n    var self = _this;\n    self.nonceCache = {};\n    self.rpcUrl = opts.rpcUrl;\n    return _this;\n  }\n\n  NonceTrackerSubprovider.prototype.handleRequest = function (payload, next, end) {\n    var self = this;\n\n    switch (payload.method) {\n      case 'eth_getTransactionCount':\n        var blockTag = blockTagForPayload(payload);\n        var address = payload.params[0].toLowerCase();\n        var cachedResult = self.nonceCache[self.rpcUrl] && self.nonceCache[self.rpcUrl][address]; // only handle requests against the 'pending' blockTag\n\n        if (blockTag === 'pending') {\n          // has a result\n          if (cachedResult) {\n            end(null, cachedResult); // fallthrough then populate cache\n          } else {\n            next(function (err, result, cb) {\n              if (err) return cb();\n\n              if (self.nonceCache[self.rpcUrl] === undefined) {\n                self.nonceCache[self.rpcUrl] = {};\n              }\n\n              if (self.nonceCache[self.rpcUrl][address] === undefined) {\n                self.nonceCache[self.rpcUrl][address] = result;\n              }\n\n              cb();\n            });\n          }\n        } else {\n          next();\n        }\n\n        return;\n\n      case 'eth_sendRawTransaction':\n        // allow the request to continue normally\n        next(function (err, result, cb) {\n          // only update local nonce if tx was submitted correctly\n          if (err) return cb(); // parse raw tx\n\n          var rawTx = payload.params[0];\n          var stripped = ethUtil.stripHexPrefix(rawTx);\n          var rawData = new Buffer(ethUtil.stripHexPrefix(rawTx), 'hex');\n          var tx = new Transaction(new Buffer(ethUtil.stripHexPrefix(rawTx), 'hex')); // extract address\n\n          var address = '0x' + tx.getSenderAddress().toString('hex').toLowerCase(); // extract nonce and increment\n\n          var nonce = ethUtil.bufferToInt(tx.nonce);\n          nonce++; // hexify and normalize\n\n          var hexNonce = nonce.toString(16);\n          if (hexNonce.length % 2) hexNonce = '0' + hexNonce;\n          hexNonce = '0x' + hexNonce; // dont update our record on the nonce until the submit was successful\n          // update cache\n\n          if (self.nonceCache[self.rpcUrl] === undefined) {\n            self.nonceCache[self.rpcUrl] = {};\n          }\n\n          self.nonceCache[self.rpcUrl][address] = hexNonce;\n          cb();\n        });\n        return;\n\n      default:\n        next();\n        return;\n    }\n  };\n\n  return NonceTrackerSubprovider;\n}(Subprovider);\n\nexports.NonceTrackerSubprovider = NonceTrackerSubprovider;","map":{"version":3,"sources":["../../src/NonceTracker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NonceTrackerSubprovider = void 0;\nvar tslib_1 = require(\"tslib\");\nvar inherits = require('util').inherits;\nvar Transaction = require('ethereumjs-tx');\nvar ethUtil = require('ethereumjs-util');\nvar Subprovider = require('@arkane-network/web3-provider-engine/subproviders/subprovider');\nvar blockTagForPayload = require('@arkane-network/web3-provider-engine/util/rpc-cache-utils').blockTagForPayload;\nvar NonceTrackerSubprovider = /** @class */ (function (_super) {\n    tslib_1.__extends(NonceTrackerSubprovider, _super);\n    function NonceTrackerSubprovider(opts) {\n        var _this = _super.call(this) || this;\n        var self = _this;\n        self.nonceCache = {};\n        self.rpcUrl = opts.rpcUrl;\n        return _this;\n    }\n    NonceTrackerSubprovider.prototype.handleRequest = function (payload, next, end) {\n        var self = this;\n        switch (payload.method) {\n            case 'eth_getTransactionCount':\n                var blockTag = blockTagForPayload(payload);\n                var address = payload.params[0].toLowerCase();\n                var cachedResult = self.nonceCache[self.rpcUrl] && self.nonceCache[self.rpcUrl][address];\n                // only handle requests against the 'pending' blockTag\n                if (blockTag === 'pending') {\n                    // has a result\n                    if (cachedResult) {\n                        end(null, cachedResult);\n                        // fallthrough then populate cache\n                    }\n                    else {\n                        next(function (err, result, cb) {\n                            if (err)\n                                return cb();\n                            if (self.nonceCache[self.rpcUrl] === undefined) {\n                                self.nonceCache[self.rpcUrl] = {};\n                            }\n                            if (self.nonceCache[self.rpcUrl][address] === undefined) {\n                                self.nonceCache[self.rpcUrl][address] = result;\n                            }\n                            cb();\n                        });\n                    }\n                }\n                else {\n                    next();\n                }\n                return;\n            case 'eth_sendRawTransaction':\n                // allow the request to continue normally\n                next(function (err, result, cb) {\n                    // only update local nonce if tx was submitted correctly\n                    if (err)\n                        return cb();\n                    // parse raw tx\n                    var rawTx = payload.params[0];\n                    var stripped = ethUtil.stripHexPrefix(rawTx);\n                    var rawData = new Buffer(ethUtil.stripHexPrefix(rawTx), 'hex');\n                    var tx = new Transaction(new Buffer(ethUtil.stripHexPrefix(rawTx), 'hex'));\n                    // extract address\n                    var address = '0x' + tx.getSenderAddress().toString('hex').toLowerCase();\n                    // extract nonce and increment\n                    var nonce = ethUtil.bufferToInt(tx.nonce);\n                    nonce++;\n                    // hexify and normalize\n                    var hexNonce = nonce.toString(16);\n                    if (hexNonce.length % 2)\n                        hexNonce = '0' + hexNonce;\n                    hexNonce = '0x' + hexNonce;\n                    // dont update our record on the nonce until the submit was successful\n                    // update cache\n                    if (self.nonceCache[self.rpcUrl] === undefined) {\n                        self.nonceCache[self.rpcUrl] = {};\n                    }\n                    self.nonceCache[self.rpcUrl][address] = hexNonce;\n                    cb();\n                });\n                return;\n            default:\n                next();\n                return;\n        }\n    };\n    return NonceTrackerSubprovider;\n}(Subprovider));\nexports.NonceTrackerSubprovider = NonceTrackerSubprovider;\n//# sourceMappingURL=NonceTracker.js.map"]},"metadata":{},"sourceType":"script"}