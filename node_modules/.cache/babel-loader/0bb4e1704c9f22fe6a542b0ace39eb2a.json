{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/CurrencyInput/CurrencyInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { Box } from '@material-ui/core';\nimport { useCurrencyBalance } from 'state/wallet/hooks';\nimport { CurrencySearchModal, CurrencyLogo, NumericalInput } from 'components';\nimport { useActiveWeb3React } from 'hooks';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport { formatTokenAmount } from 'utils';\nimport 'components/styles/CurrencyInput.scss';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CurrencyInput = _ref => {\n  _s();\n\n  var _useUSDCPrice$toSigni, _useUSDCPrice;\n\n  let {\n    handleCurrencySelect,\n    currency,\n    otherCurrency,\n    amount,\n    setAmount,\n    onMax,\n    onHalf,\n    showMaxButton,\n    showHalfButton,\n    title,\n    showPrice,\n    bgClass,\n    id\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const [modalOpen, setModalOpen] = useState(false);\n  const {\n    account\n  } = useActiveWeb3React();\n  const selectedCurrencyBalance = useCurrencyBalance(account !== null && account !== void 0 ? account : undefined, currency);\n  const usdPrice = Number((_useUSDCPrice$toSigni = (_useUSDCPrice = useUSDCPrice(currency)) === null || _useUSDCPrice === void 0 ? void 0 : _useUSDCPrice.toSignificant()) !== null && _useUSDCPrice$toSigni !== void 0 ? _useUSDCPrice$toSigni : 0);\n  const handleOpenModal = useCallback(() => {\n    setModalOpen(true);\n  }, [setModalOpen]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    id: id,\n    className: `swapBox${showPrice ? ' priceShowBox' : ''} ${bgClass !== null && bgClass !== void 0 ? bgClass : 'bg-secondary2'}`,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: \"flex justify-between\",\n      mb: 2,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: title || `${t('youPay')}:`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        children: [account && currency && showHalfButton && /*#__PURE__*/_jsxDEV(Box, {\n          className: \"maxWrapper\",\n          onClick: onHalf,\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"50%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), account && currency && showMaxButton && /*#__PURE__*/_jsxDEV(Box, {\n          className: \"maxWrapper\",\n          marginLeft: \"20px\",\n          onClick: onMax,\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: t('max')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mb: 2,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: `currencyButton ${currency ? 'currencySelected' : 'noCurrency'}`,\n        onClick: handleOpenModal,\n        children: currency ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(CurrencyLogo, {\n            currency: currency,\n            size: '28px'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"token-symbol-container\",\n            children: currency === null || currency === void 0 ? void 0 : currency.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: t('selectToken')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"inputWrapper\",\n        children: /*#__PURE__*/_jsxDEV(NumericalInput, {\n          value: amount,\n          align: \"right\",\n          placeholder: \"0.00\",\n          onUserInput: val => {\n            setAmount(val);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"flex justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        className: \"text-secondary\",\n        children: [t('balance'), \": \", formatTokenAmount(selectedCurrencyBalance)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        className: \"text-secondary\",\n        children: [\"$\", (usdPrice * Number(amount)).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(CurrencySearchModal, {\n      isOpen: modalOpen,\n      onDismiss: () => {\n        setModalOpen(false);\n      },\n      onCurrencySelect: handleCurrencySelect,\n      selectedCurrency: currency,\n      showCommonBases: true,\n      otherSelectedCurrency: otherCurrency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyInput, \"MgCwFEwsFcadRTKqrZnpzKATx/Q=\", false, function () {\n  return [useTranslation, useActiveWeb3React, useCurrencyBalance, useUSDCPrice];\n});\n\n_c = CurrencyInput;\nexport default CurrencyInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyInput\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/components/CurrencyInput/CurrencyInput.tsx"],"names":["React","useCallback","useState","Box","useCurrencyBalance","CurrencySearchModal","CurrencyLogo","NumericalInput","useActiveWeb3React","useUSDCPrice","formatTokenAmount","useTranslation","CurrencyInput","handleCurrencySelect","currency","otherCurrency","amount","setAmount","onMax","onHalf","showMaxButton","showHalfButton","title","showPrice","bgClass","id","t","modalOpen","setModalOpen","account","selectedCurrencyBalance","undefined","usdPrice","Number","toSignificant","handleOpenModal","symbol","val","toLocaleString"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { Currency } from '@uniswap/sdk';\nimport { Box } from '@material-ui/core';\nimport { useCurrencyBalance } from 'state/wallet/hooks';\nimport { CurrencySearchModal, CurrencyLogo, NumericalInput } from 'components';\nimport { useActiveWeb3React } from 'hooks';\nimport useUSDCPrice from 'utils/useUSDCPrice';\nimport { formatTokenAmount } from 'utils';\nimport 'components/styles/CurrencyInput.scss';\nimport { useTranslation } from 'react-i18next';\n\ninterface CurrencyInputProps {\n  title?: string;\n  handleCurrencySelect: (currency: Currency) => void;\n  currency: Currency | undefined;\n  otherCurrency?: Currency | undefined;\n  amount: string;\n  setAmount: (value: string) => void;\n  onMax?: () => void;\n  onHalf?: () => void;\n  showHalfButton?: boolean;\n  showMaxButton?: boolean;\n  showPrice?: boolean;\n  bgClass?: string;\n  id?: string;\n}\n\nconst CurrencyInput: React.FC<CurrencyInputProps> = ({\n  handleCurrencySelect,\n  currency,\n  otherCurrency,\n  amount,\n  setAmount,\n  onMax,\n  onHalf,\n  showMaxButton,\n  showHalfButton,\n  title,\n  showPrice,\n  bgClass,\n  id,\n}) => {\n  const { t } = useTranslation();\n  const [modalOpen, setModalOpen] = useState(false);\n  const { account } = useActiveWeb3React();\n  const selectedCurrencyBalance = useCurrencyBalance(\n    account ?? undefined,\n    currency,\n  );\n  const usdPrice = Number(useUSDCPrice(currency)?.toSignificant() ?? 0);\n\n  const handleOpenModal = useCallback(() => {\n    setModalOpen(true);\n  }, [setModalOpen]);\n\n  return (\n    <Box\n      id={id}\n      className={`swapBox${showPrice ? ' priceShowBox' : ''} ${bgClass ??\n        'bg-secondary2'}`}\n    >\n      <Box className='flex justify-between' mb={2}>\n        <p>{title || `${t('youPay')}:`}</p>\n        <Box display='flex'>\n          {account && currency && showHalfButton && (\n            <Box className='maxWrapper' onClick={onHalf}>\n              <small>50%</small>\n            </Box>\n          )}\n          {account && currency && showMaxButton && (\n            <Box className='maxWrapper' marginLeft='20px' onClick={onMax}>\n              <small>{t('max')}</small>\n            </Box>\n          )}\n        </Box>\n      </Box>\n      <Box mb={2}>\n        <Box\n          className={`currencyButton ${\n            currency ? 'currencySelected' : 'noCurrency'\n          }`}\n          onClick={handleOpenModal}\n        >\n          {currency ? (\n            <>\n              <CurrencyLogo currency={currency} size={'28px'} />\n              <p className='token-symbol-container'>{currency?.symbol}</p>\n            </>\n          ) : (\n            <p>{t('selectToken')}</p>\n          )}\n        </Box>\n        <Box className='inputWrapper'>\n          <NumericalInput\n            value={amount}\n            align='right'\n            placeholder='0.00'\n            onUserInput={(val) => {\n              setAmount(val);\n            }}\n          />\n        </Box>\n      </Box>\n      <Box className='flex justify-between'>\n        <small className='text-secondary'>\n          {t('balance')}: {formatTokenAmount(selectedCurrencyBalance)}\n        </small>\n        <small className='text-secondary'>\n          ${(usdPrice * Number(amount)).toLocaleString()}\n        </small>\n      </Box>\n      {modalOpen && (\n        <CurrencySearchModal\n          isOpen={modalOpen}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n          onCurrencySelect={handleCurrencySelect}\n          selectedCurrency={currency}\n          showCommonBases={true}\n          otherSelectedCurrency={otherCurrency}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default CurrencyInput;\n"]},"metadata":{},"sourceType":"module"}