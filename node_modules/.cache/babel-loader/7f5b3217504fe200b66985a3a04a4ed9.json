{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\nconst chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet',\n  137: 'matic',\n  2000: 'dogechain'\n};\nexport class PortisConnector extends AbstractConnector {\n  constructor(_ref) {\n    let {\n      dAppId,\n      networks,\n      config = {}\n    } = _ref;\n    const chainIds = networks.map(n => typeof n === 'number' ? n : Number(n.chainId));\n    super({\n      supportedChainIds: chainIds\n    });\n    this.dAppId = void 0;\n    this.networks = void 0;\n    this.config = void 0;\n    this.portis = void 0;\n    this.dAppId = dAppId;\n    this.networks = networks;\n    this.config = config;\n    invariant(chainIds.every(c => !!chainIdToNetwork[c]), `One or more unsupported networks ${this.networks}`);\n    this.handleOnLogout = this.handleOnLogout.bind(this);\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this);\n    this.handleOnError = this.handleOnError.bind(this);\n  }\n\n  handleOnLogout() {\n    this.emitDeactivate();\n  }\n\n  handleOnActiveWalletChanged(account) {\n    this.emitUpdate({\n      account\n    });\n  }\n\n  handleOnError(error) {\n    this.emitError(error);\n  }\n\n  async activate() {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => {\n        var _m$default;\n\n        return (_m$default = m === null || m === void 0 ? void 0 : m.default) !== null && _m$default !== void 0 ? _m$default : m;\n      });\n      this.portis = new Portis(this.dAppId, this.config);\n    }\n\n    this.portis.onLogout(this.handleOnLogout);\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged);\n    this.portis.onError(this.handleOnError);\n    const account = await this.portis.provider.enable().then(accounts => accounts[0]);\n    return {\n      provider: this.portis.provider,\n      account\n    };\n  }\n\n  async getProvider() {\n    return this.portis.provider;\n  }\n\n  async getChainId() {\n    return this.portis.provider.send('eth_chainId');\n  }\n\n  async getAccount() {\n    return this.portis.provider.send('eth_accounts').then(accounts => accounts[0]);\n  }\n\n  deactivate() {\n    this.portis.onLogout(() => {\n      console.log('logout');\n    });\n    this.portis.onActiveWalletChanged(() => {\n      console.log('wallet change');\n    });\n    this.portis.onError(() => {\n      console.log('err');\n    });\n  }\n\n  async changeNetwork(newNetwork, isGasRelayEnabled) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`);\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled);\n      this.emitUpdate({\n        chainId: newNetwork\n      });\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled);\n      this.emitUpdate({\n        chainId: Number(newNetwork.chainId)\n      });\n    }\n  }\n\n  async close() {\n    await this.portis.logout();\n    this.emitDeactivate();\n  }\n\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/connectors/Portis.ts"],"names":["AbstractConnector","invariant","chainIdToNetwork","PortisConnector","constructor","dAppId","networks","config","chainIds","map","n","Number","chainId","supportedChainIds","portis","every","c","handleOnLogout","bind","handleOnActiveWalletChanged","handleOnError","emitDeactivate","account","emitUpdate","error","emitError","activate","Portis","then","m","default","onLogout","onActiveWalletChanged","onError","provider","enable","accounts","getProvider","getChainId","send","getAccount","deactivate","console","log","changeNetwork","newNetwork","isGasRelayEnabled","close","logout"],"mappings":"AACA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,MAAMC,gBAA+C,GAAG;AACtD,KAAG,SADmD;AAEtD,KAAG,SAFmD;AAGtD,KAAG,SAHmD;AAItD,KAAG,QAJmD;AAKtD,MAAI,OALkD;AAMtD,OAAK,MANiD;AAOtD,MAAI,QAPkD;AAQtD,MAAI,eARkD;AAStD,MAAI,MATkD;AAUtD,MAAI,OAVkD;AAWtD,MAAI,SAXkD;AAYtD,KAAG,MAZmD;AAatD,OAAK,aAbiD;AActD,MAAI,oBAdkD;AAetD,OAAK,cAfiD;AAgBtD,OAAK,MAhBiD;AAiBtD,SAAO,cAjB+C;AAkBtD,OAAK,OAlBiD;AAmBtD,QAAM;AAnBgD,CAAxD;AA8BA,OAAO,MAAMC,eAAN,SAA8BH,iBAA9B,CAAgD;AAOrDI,EAAAA,WAAW,OAA8D;AAAA,QAA7D;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA,MAAM,GAAG;AAA7B,KAA6D;AACvE,UAAMC,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAcC,CAAD,IAC5B,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4BC,MAAM,CAACD,CAAC,CAACE,OAAH,CADnB,CAAjB;AAGA,UAAM;AAAEC,MAAAA,iBAAiB,EAAEL;AAArB,KAAN;AAJuE,SANxDH,MAMwD;AAAA,SALxDC,QAKwD;AAAA,SAJxDC,MAIwD;AAAA,SAFlEO,MAEkE;AAMvE,SAAKT,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AAEAN,IAAAA,SAAS,CACPO,QAAQ,CAACO,KAAT,CAAgBC,CAAD,IAAgB,CAAC,CAACd,gBAAgB,CAACc,CAAD,CAAjD,CADO,EAEN,oCAAmC,KAAKV,QAAS,EAF3C,CAAT;AAKA,SAAKW,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKC,2BAAL,GAAmC,KAAKA,2BAAL,CAAiCD,IAAjC,CACjC,IADiC,CAAnC;AAGA,SAAKE,aAAL,GAAqB,KAAKA,aAAL,CAAmBF,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAEOD,EAAAA,cAAc,GAAS;AAC7B,SAAKI,cAAL;AACD;;AAEOF,EAAAA,2BAA2B,CAACG,OAAD,EAAwB;AACzD,SAAKC,UAAL,CAAgB;AAAED,MAAAA;AAAF,KAAhB;AACD;;AAEOF,EAAAA,aAAa,CAACI,KAAD,EAAqB;AACxC,SAAKC,SAAL,CAAeD,KAAf;AACD;;AAEoB,QAARE,QAAQ,GAA6B;AAChD,QAAI,CAAC,KAAKZ,MAAV,EAAkB;AAChB,YAAMa,MAAM,GAAG,MAAM,OAAO,cAAP,EAAuBC,IAAvB,CAA6BC,CAAD;AAAA;;AAAA,6BAAOA,CAAP,aAAOA,CAAP,uBAAOA,CAAC,CAAEC,OAAV,mDAAqBD,CAArB;AAAA,OAA5B,CAArB;AACA,WAAKf,MAAL,GAAc,IAAIa,MAAJ,CAAW,KAAKtB,MAAhB,EAAwB,KAAKE,MAA7B,CAAd;AACD;;AAED,SAAKO,MAAL,CAAYiB,QAAZ,CAAqB,KAAKd,cAA1B;AACA,SAAKH,MAAL,CAAYkB,qBAAZ,CAAkC,KAAKb,2BAAvC;AACA,SAAKL,MAAL,CAAYmB,OAAZ,CAAoB,KAAKb,aAAzB;AAEA,UAAME,OAAO,GAAG,MAAM,KAAKR,MAAL,CAAYoB,QAAZ,CACnBC,MADmB,GAEnBP,IAFmB,CAEbQ,QAAD,IAAgCA,QAAQ,CAAC,CAAD,CAF1B,CAAtB;AAIA,WAAO;AAAEF,MAAAA,QAAQ,EAAE,KAAKpB,MAAL,CAAYoB,QAAxB;AAAkCZ,MAAAA;AAAlC,KAAP;AACD;;AAEuB,QAAXe,WAAW,GAAiB;AACvC,WAAO,KAAKvB,MAAL,CAAYoB,QAAnB;AACD;;AAEsB,QAAVI,UAAU,GAA6B;AAClD,WAAO,KAAKxB,MAAL,CAAYoB,QAAZ,CAAqBK,IAArB,CAA0B,aAA1B,CAAP;AACD;;AAEsB,QAAVC,UAAU,GAA2B;AAChD,WAAO,KAAK1B,MAAL,CAAYoB,QAAZ,CACJK,IADI,CACC,cADD,EAEJX,IAFI,CAEEQ,QAAD,IAAgCA,QAAQ,CAAC,CAAD,CAFzC,CAAP;AAGD;;AAEMK,EAAAA,UAAU,GAAS;AACxB,SAAK3B,MAAL,CAAYiB,QAAZ,CAAqB,MAAM;AACzBW,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KAFD;AAGA,SAAK7B,MAAL,CAAYkB,qBAAZ,CAAkC,MAAM;AACtCU,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,KAFD;AAGA,SAAK7B,MAAL,CAAYmB,OAAZ,CAAoB,MAAM;AACxBS,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,KAFD;AAGD;;AAEyB,QAAbC,aAAa,CACxBC,UADwB,EAExBC,iBAFwB,EAGT;AACf,QAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC5C,MAAAA,SAAS,CACP,CAAC,CAACC,gBAAgB,CAAC2C,UAAD,CADX,EAEN,mBAAkBA,UAAW,EAFvB,CAAT;AAIA,WAAK/B,MAAL,CAAY8B,aAAZ,CACE1C,gBAAgB,CAAC2C,UAAD,CADlB,EAEEC,iBAFF;AAIA,WAAKvB,UAAL,CAAgB;AAAEX,QAAAA,OAAO,EAAEiC;AAAX,OAAhB;AACD,KAVD,MAUO;AACL,WAAK/B,MAAL,CAAY8B,aAAZ,CAA0BC,UAA1B,EAAsCC,iBAAtC;AACA,WAAKvB,UAAL,CAAgB;AAAEX,QAAAA,OAAO,EAAED,MAAM,CAACkC,UAAU,CAACjC,OAAZ;AAAjB,OAAhB;AACD;AACF;;AAEiB,QAALmC,KAAK,GAAkB;AAClC,UAAM,KAAKjC,MAAL,CAAYkC,MAAZ,EAAN;AACA,SAAK3B,cAAL;AACD;;AA3GoD","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet',\n  137: 'matic',\n  2000: 'dogechain',\n};\n\ntype Network = number | { chainId: string; [key: string]: any };\n\ninterface PortisConnectorArguments {\n  dAppId: string;\n  networks: Network[];\n  config?: any;\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string;\n  private readonly networks: Network[];\n  private readonly config: any;\n\n  public portis: any;\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number =>\n      typeof n === 'number' ? n : Number(n.chainId),\n    );\n    super({ supportedChainIds: chainIds });\n\n    this.dAppId = dAppId;\n    this.networks = networks;\n    this.config = config;\n\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${this.networks}`,\n    );\n\n    this.handleOnLogout = this.handleOnLogout.bind(this);\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(\n      this,\n    );\n    this.handleOnError = this.handleOnError.bind(this);\n  }\n\n  private handleOnLogout(): void {\n    this.emitDeactivate();\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    this.emitUpdate({ account });\n  }\n\n  private handleOnError(error: Error): void {\n    this.emitError(error);\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then((m) => m?.default ?? m);\n      this.portis = new Portis(this.dAppId, this.config);\n    }\n\n    this.portis.onLogout(this.handleOnLogout);\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged);\n    this.portis.onError(this.handleOnError);\n\n    const account = await this.portis.provider\n      .enable()\n      .then((accounts: string[]): string => accounts[0]);\n\n    return { provider: this.portis.provider, account };\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider;\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId');\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0]);\n  }\n\n  public deactivate(): void {\n    this.portis.onLogout(() => {\n      console.log('logout');\n    });\n    this.portis.onActiveWalletChanged(() => {\n      console.log('wallet change');\n    });\n    this.portis.onError(() => {\n      console.log('err');\n    });\n  }\n\n  public async changeNetwork(\n    newNetwork: number | Network,\n    isGasRelayEnabled?: boolean,\n  ): Promise<void> {\n    if (typeof newNetwork === 'number') {\n      invariant(\n        !!chainIdToNetwork[newNetwork],\n        `Invalid chainId ${newNetwork}`,\n      );\n      this.portis.changeNetwork(\n        chainIdToNetwork[newNetwork],\n        isGasRelayEnabled,\n      );\n      this.emitUpdate({ chainId: newNetwork });\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled);\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) });\n    }\n  }\n\n  public async close(): Promise<void> {\n    await this.portis.logout();\n    this.emitDeactivate();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}