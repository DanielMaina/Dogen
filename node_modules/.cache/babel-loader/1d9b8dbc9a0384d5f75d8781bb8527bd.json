{"ast":null,"code":"var _jsxFileName = \"/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/ConvertQUICKPage/ConvertQUICKPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport { Box, Button, CircularProgress } from '@material-ui/core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport QUICKIcon from \"assets/images/quickIcon.svg\";\nimport { ReactComponent as QUICKV2Icon } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/images/QUICKV2.svg\";\nimport { ArrowForward, ArrowDownward } from '@material-ui/icons';\nimport { NumericalInput, TransactionErrorContent, TransactionConfirmationModal, ConfirmationModalContent } from 'components';\nimport { formatTokenAmount } from 'utils';\nimport { useTokenBalance } from 'state/wallet/hooks';\nimport { useActiveWeb3React } from 'hooks';\nimport { useApproveCallback, ApprovalState } from 'hooks/useApproveCallback';\nimport { GlobalConst, GlobalValue } from 'constants/index';\nimport { useQUICKConversionContract } from 'hooks/useContract';\nimport { useTransactionAdder, useTransactionFinalizer } from 'state/transactions/hooks';\nimport { tryParseAmount } from 'state/swap/hooks';\nimport 'pages/styles/convertQUICK.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConvertQUICKPage = () => {\n  _s();\n\n  var _quickBalance$toExact;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account,\n    library\n  } = useActiveWeb3React();\n  const [quickAmount, setQUICKAmount] = useState('');\n  const [quickV2Amount, setQUICKV2Amount] = useState('');\n  const [approving, setApproving] = useState(false);\n  const [attemptConverting, setAttemptConverting] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [txPending, setTxPending] = useState(false);\n  const [txHash, setTxHash] = useState('');\n  const [txError, setTxError] = useState('');\n  const quickToken = GlobalValue.tokens.COMMON.OLD_QUICK;\n  const quickBalance = useTokenBalance(account !== null && account !== void 0 ? account : undefined, quickToken);\n  const quickConvertContract = useQUICKConversionContract();\n  const parsedAmount = tryParseAmount(quickAmount, quickToken);\n  const [approval, approveCallback] = useApproveCallback(parsedAmount, quickConvertContract === null || quickConvertContract === void 0 ? void 0 : quickConvertContract.address);\n  const quickConvertingText = t('convertingQUICKtoQUICKV2', {\n    quickAmount,\n    quickV2Amount\n  });\n  const quickConvertedText = t('convertedQUICKtoQUICKV2', {\n    quickAmount,\n    quickV2Amount\n  });\n  const txSubmittedQuickConvertText = t('submittedTxQUICKConvert', {\n    quickAmount,\n    quickV2Amount\n  });\n  const successQuickConvertedText = t('successConvertedQUICKtoQUICKV2', {\n    quickAmount,\n    quickV2Amount\n  });\n  const isInsufficientQUICK = Number(quickAmount) > Number((_quickBalance$toExact = quickBalance === null || quickBalance === void 0 ? void 0 : quickBalance.toExact()) !== null && _quickBalance$toExact !== void 0 ? _quickBalance$toExact : 0);\n  const buttonText = useMemo(() => {\n    if (!quickAmount || !Number(quickAmount)) {\n      return t('enterAmount');\n    } else if (approval !== ApprovalState.APPROVED) {\n      return t('approve');\n    } else if (isInsufficientQUICK) {\n      return t('insufficientBalance');\n    } else {\n      return t('convert');\n    }\n  }, [isInsufficientQUICK, quickAmount, t, approval]);\n  const addTransaction = useTransactionAdder();\n  const finalizedTransaction = useTransactionFinalizer();\n\n  const handleDismissConfirmation = () => {\n    setShowConfirm(false);\n  };\n\n  const attemptToApprove = async () => {\n    setApproving(true);\n\n    try {\n      await approveCallback();\n      setApproving(false);\n    } catch (e) {\n      setApproving(false);\n    }\n  };\n\n  const convertQUICK = async () => {\n    if (quickConvertContract && library && parsedAmount) {\n      setAttemptConverting(true);\n      setShowConfirm(true);\n      await quickConvertContract.quickToQuickX(parsedAmount.raw.toString(), {\n        gasLimit: 300000\n      }).then(async response => {\n        setAttemptConverting(false);\n        setTxPending(true);\n        setTxError('');\n        setTxHash('');\n        addTransaction(response, {\n          summary: quickConvertingText\n        });\n\n        try {\n          const tx = await response.wait();\n          finalizedTransaction(tx, {\n            summary: quickConvertedText\n          });\n          setTxPending(false);\n          setTxHash(tx.transactionHash);\n        } catch (err) {\n          setTxPending(false);\n          setTxError(t('errorInTx'));\n        }\n      }).catch(() => {\n        setAttemptConverting(false);\n        setTxPending(false);\n        setTxHash('');\n        setTxError(t('txRejected'));\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    width: \"100%\",\n    maxWidth: 488,\n    id: \"convertQUICKPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [t('convert'), \" QUICK\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"convertQUICKWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex items-center\",\n        mb: 3,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          className: \"iconWrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: QUICKIcon,\n            alt: \"QUICK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weight-600\",\n          children: \"QUICK(OLD)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mx: 1.5,\n          className: \"convertArrow\",\n          children: /*#__PURE__*/_jsxDEV(ArrowForward, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"iconWrapper\",\n          children: /*#__PURE__*/_jsxDEV(QUICKV2Icon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weight-600\",\n          children: \"QUICK(NEW)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        className: \"text-secondary\",\n        children: /*#__PURE__*/_jsxDEV(Trans, {\n          i18nKey: \"convertQUICK\",\n          components: {\n            alink: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://quickswap-layer2.medium.com/you-voted-for-a-1-1000-token-split-to-make-quick-more-appealing-9c25c2a2dd7e\",\n              rel: \"noreferrer\",\n              target: \"_blank\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"conversionRate\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [t('conversionRate'), \": 1 QUICK(OLD) =\", ' ', GlobalConst.utils.QUICK_CONVERSION_RATE, \" QUICK(NEW)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 4,\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-secondary\",\n          children: [t('yourbalance'), \": \", formatTokenAmount(quickBalance)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: `currencyInput${isInsufficientQUICK ? ' errorInput' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(NumericalInput, {\n            placeholder: \"0.00\",\n            value: quickAmount,\n            fontSize: 18,\n            onUserInput: value => {\n              const digits = value.indexOf('.') > -1 ? value.split('.')[1].length : 0;\n              let fixedVal = value;\n\n              if (digits > quickToken.decimals) {\n                fixedVal = Number(value).toFixed(quickToken.decimals);\n              }\n\n              setQUICKAmount(fixedVal);\n              setQUICKV2Amount((Number(fixedVal) * GlobalConst.utils.QUICK_CONVERSION_RATE).toLocaleString('fullwide', {\n                useGrouping: false,\n                maximumFractionDigits: quickToken.decimals\n              }));\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mr: 1,\n            className: \"maxButton\",\n            onClick: () => {\n              if (quickBalance) {\n                setQUICKAmount(quickBalance.toExact());\n                setQUICKV2Amount((Number(quickBalance.toExact()) * GlobalConst.utils.QUICK_CONVERSION_RATE).toString());\n              }\n            },\n            children: t('max')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"weight-600\",\n            children: \"QUICK(OLD)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), isInsufficientQUICK && /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-error\",\n          children: t('insufficientBalance', {\n            symbol: 'QUICK'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        ml: 2,\n        className: \"convertArrow\",\n        children: /*#__PURE__*/_jsxDEV(ArrowDownward, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-secondary\",\n          children: [t('youwillreceive'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: \"currencyInput\",\n          children: [/*#__PURE__*/_jsxDEV(NumericalInput, {\n            placeholder: \"0.00\",\n            value: quickV2Amount,\n            fontSize: 18,\n            onUserInput: value => {\n              setQUICKV2Amount(value);\n              const quickAmount = (Number(value) / GlobalConst.utils.QUICK_CONVERSION_RATE).toLocaleString('fullwide', {\n                useGrouping: false,\n                maximumFractionDigits: quickToken.decimals\n              });\n              setQUICKAmount(quickAmount);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"weight-600\",\n            children: \"QUICK(NEW)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          disabled: approving || attemptConverting || isInsufficientQUICK || !quickAmount || !Number(quickAmount),\n          className: \"convertButton\",\n          onClick: () => {\n            if (approval === ApprovalState.APPROVED) {\n              convertQUICK();\n            } else {\n              attemptToApprove();\n            }\n          },\n          children: buttonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), showConfirm && /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n      isOpen: showConfirm,\n      onDismiss: handleDismissConfirmation,\n      attemptingTxn: attemptConverting,\n      txPending: txPending,\n      hash: txHash,\n      content: () => txError ? /*#__PURE__*/_jsxDEV(TransactionErrorContent, {\n        onDismiss: handleDismissConfirmation,\n        message: txError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n        title: t('convertingQUICK'),\n        onDismiss: handleDismissConfirmation,\n        content: () => /*#__PURE__*/_jsxDEV(Box, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mt: 6,\n            mb: 5,\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 80\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: quickConvertingText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 15\n      }, this),\n      pendingText: quickConvertingText,\n      modalContent: txPending ? txSubmittedQuickConvertText : successQuickConvertedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConvertQUICKPage, \"d5+mx0K4T5nqCAjpwjCqXoW/aj8=\", false, function () {\n  return [useTranslation, useActiveWeb3React, useTokenBalance, useQUICKConversionContract, useApproveCallback, useTransactionAdder, useTransactionFinalizer];\n});\n\n_c = ConvertQUICKPage;\nexport default ConvertQUICKPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConvertQUICKPage\");","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/pages/ConvertQUICKPage/ConvertQUICKPage.tsx"],"names":["React","useMemo","useState","Box","Button","CircularProgress","Trans","useTranslation","ArrowForward","ArrowDownward","NumericalInput","TransactionErrorContent","TransactionConfirmationModal","ConfirmationModalContent","formatTokenAmount","useTokenBalance","useActiveWeb3React","useApproveCallback","ApprovalState","GlobalConst","GlobalValue","useQUICKConversionContract","useTransactionAdder","useTransactionFinalizer","tryParseAmount","ConvertQUICKPage","t","account","library","quickAmount","setQUICKAmount","quickV2Amount","setQUICKV2Amount","approving","setApproving","attemptConverting","setAttemptConverting","showConfirm","setShowConfirm","txPending","setTxPending","txHash","setTxHash","txError","setTxError","quickToken","tokens","COMMON","OLD_QUICK","quickBalance","undefined","quickConvertContract","parsedAmount","approval","approveCallback","address","quickConvertingText","quickConvertedText","txSubmittedQuickConvertText","successQuickConvertedText","isInsufficientQUICK","Number","toExact","buttonText","APPROVED","addTransaction","finalizedTransaction","handleDismissConfirmation","attemptToApprove","e","convertQUICK","quickToQuickX","raw","toString","gasLimit","then","response","summary","tx","wait","transactionHash","err","catch","QUICKIcon","alink","utils","QUICK_CONVERSION_RATE","value","digits","indexOf","split","length","fixedVal","decimals","toFixed","toLocaleString","useGrouping","maximumFractionDigits","symbol"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport { Box, Button, CircularProgress } from '@material-ui/core';\nimport { Trans, useTranslation } from 'react-i18next';\nimport QUICKIcon from 'assets/images/quickIcon.svg';\nimport { ReactComponent as QUICKV2Icon } from 'assets/images/QUICKV2.svg';\nimport { ArrowForward, ArrowDownward } from '@material-ui/icons';\nimport {\n  NumericalInput,\n  TransactionErrorContent,\n  TransactionConfirmationModal,\n  ConfirmationModalContent,\n} from 'components';\nimport { formatTokenAmount } from 'utils';\nimport { useTokenBalance } from 'state/wallet/hooks';\nimport { useActiveWeb3React } from 'hooks';\nimport { useApproveCallback, ApprovalState } from 'hooks/useApproveCallback';\nimport { GlobalConst, GlobalValue } from 'constants/index';\nimport { useQUICKConversionContract } from 'hooks/useContract';\nimport {\n  useTransactionAdder,\n  useTransactionFinalizer,\n} from 'state/transactions/hooks';\nimport { tryParseAmount } from 'state/swap/hooks';\nimport 'pages/styles/convertQUICK.scss';\n\nconst ConvertQUICKPage: React.FC = () => {\n  const { t } = useTranslation();\n  const { account, library } = useActiveWeb3React();\n  const [quickAmount, setQUICKAmount] = useState('');\n  const [quickV2Amount, setQUICKV2Amount] = useState('');\n  const [approving, setApproving] = useState(false);\n  const [attemptConverting, setAttemptConverting] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [txPending, setTxPending] = useState(false);\n  const [txHash, setTxHash] = useState('');\n  const [txError, setTxError] = useState('');\n\n  const quickToken = GlobalValue.tokens.COMMON.OLD_QUICK;\n  const quickBalance = useTokenBalance(account ?? undefined, quickToken);\n  const quickConvertContract = useQUICKConversionContract();\n  const parsedAmount = tryParseAmount(quickAmount, quickToken);\n  const [approval, approveCallback] = useApproveCallback(\n    parsedAmount,\n    quickConvertContract?.address,\n  );\n\n  const quickConvertingText = t('convertingQUICKtoQUICKV2', {\n    quickAmount,\n    quickV2Amount,\n  });\n  const quickConvertedText = t('convertedQUICKtoQUICKV2', {\n    quickAmount,\n    quickV2Amount,\n  });\n  const txSubmittedQuickConvertText = t('submittedTxQUICKConvert', {\n    quickAmount,\n    quickV2Amount,\n  });\n  const successQuickConvertedText = t('successConvertedQUICKtoQUICKV2', {\n    quickAmount,\n    quickV2Amount,\n  });\n\n  const isInsufficientQUICK =\n    Number(quickAmount) > Number(quickBalance?.toExact() ?? 0);\n  const buttonText = useMemo(() => {\n    if (!quickAmount || !Number(quickAmount)) {\n      return t('enterAmount');\n    } else if (approval !== ApprovalState.APPROVED) {\n      return t('approve');\n    } else if (isInsufficientQUICK) {\n      return t('insufficientBalance');\n    } else {\n      return t('convert');\n    }\n  }, [isInsufficientQUICK, quickAmount, t, approval]);\n  const addTransaction = useTransactionAdder();\n  const finalizedTransaction = useTransactionFinalizer();\n\n  const handleDismissConfirmation = () => {\n    setShowConfirm(false);\n  };\n\n  const attemptToApprove = async () => {\n    setApproving(true);\n    try {\n      await approveCallback();\n      setApproving(false);\n    } catch (e) {\n      setApproving(false);\n    }\n  };\n\n  const convertQUICK = async () => {\n    if (quickConvertContract && library && parsedAmount) {\n      setAttemptConverting(true);\n      setShowConfirm(true);\n      await quickConvertContract\n        .quickToQuickX(parsedAmount.raw.toString(), {\n          gasLimit: 300000,\n        })\n        .then(async (response: TransactionResponse) => {\n          setAttemptConverting(false);\n          setTxPending(true);\n          setTxError('');\n          setTxHash('');\n          addTransaction(response, {\n            summary: quickConvertingText,\n          });\n          try {\n            const tx = await response.wait();\n            finalizedTransaction(tx, {\n              summary: quickConvertedText,\n            });\n            setTxPending(false);\n            setTxHash(tx.transactionHash);\n          } catch (err) {\n            setTxPending(false);\n            setTxError(t('errorInTx'));\n          }\n        })\n        .catch(() => {\n          setAttemptConverting(false);\n          setTxPending(false);\n          setTxHash('');\n          setTxError(t('txRejected'));\n        });\n    }\n  };\n\n  return (\n    <Box width='100%' maxWidth={488} id='convertQUICKPage'>\n      <h4>{t('convert')} QUICK</h4>\n      <Box className='convertQUICKWrapper'>\n        <Box className='flex items-center' mb={3}>\n          <Box className='iconWrapper'>\n            <img src={QUICKIcon} alt='QUICK' />\n          </Box>\n          <p className='weight-600'>QUICK(OLD)</p>\n          <Box mx={1.5} className='convertArrow'>\n            <ArrowForward />\n          </Box>\n          <Box className='iconWrapper'>\n            <QUICKV2Icon />\n          </Box>\n          <p className='weight-600'>QUICK(NEW)</p>\n        </Box>\n        <small className='text-secondary'>\n          <Trans\n            i18nKey='convertQUICK'\n            components={{\n              alink: (\n                <a\n                  href='https://quickswap-layer2.medium.com/you-voted-for-a-1-1000-token-split-to-make-quick-more-appealing-9c25c2a2dd7e'\n                  rel='noreferrer'\n                  target='_blank'\n                />\n              ),\n            }}\n          />\n        </small>\n        <Box className='conversionRate'>\n          <span>\n            {t('conversionRate')}: 1 QUICK(OLD) ={' '}\n            {GlobalConst.utils.QUICK_CONVERSION_RATE} QUICK(NEW)\n          </span>\n        </Box>\n        <Box mt={4} mb={2}>\n          <small className='text-secondary'>\n            {t('yourbalance')}: {formatTokenAmount(quickBalance)}\n          </small>\n          <Box\n            className={`currencyInput${\n              isInsufficientQUICK ? ' errorInput' : ''\n            }`}\n          >\n            <NumericalInput\n              placeholder='0.00'\n              value={quickAmount}\n              fontSize={18}\n              onUserInput={(value) => {\n                const digits =\n                  value.indexOf('.') > -1 ? value.split('.')[1].length : 0;\n                let fixedVal = value;\n                if (digits > quickToken.decimals) {\n                  fixedVal = Number(value).toFixed(quickToken.decimals);\n                }\n                setQUICKAmount(fixedVal);\n                setQUICKV2Amount(\n                  (\n                    Number(fixedVal) * GlobalConst.utils.QUICK_CONVERSION_RATE\n                  ).toLocaleString('fullwide', {\n                    useGrouping: false,\n                    maximumFractionDigits: quickToken.decimals,\n                  }),\n                );\n              }}\n            />\n            <Box\n              mr={1}\n              className='maxButton'\n              onClick={() => {\n                if (quickBalance) {\n                  setQUICKAmount(quickBalance.toExact());\n                  setQUICKV2Amount(\n                    (\n                      Number(quickBalance.toExact()) *\n                      GlobalConst.utils.QUICK_CONVERSION_RATE\n                    ).toString(),\n                  );\n                }\n              }}\n            >\n              {t('max')}\n            </Box>\n            <p className='weight-600'>QUICK(OLD)</p>\n          </Box>\n          {isInsufficientQUICK && (\n            <small className='text-error'>\n              {t('insufficientBalance', { symbol: 'QUICK' })}\n            </small>\n          )}\n        </Box>\n        <Box ml={2} className='convertArrow'>\n          <ArrowDownward />\n        </Box>\n        <Box mt={2} mb={4}>\n          <small className='text-secondary'>{t('youwillreceive')}:</small>\n          <Box className='currencyInput'>\n            <NumericalInput\n              placeholder='0.00'\n              value={quickV2Amount}\n              fontSize={18}\n              onUserInput={(value) => {\n                setQUICKV2Amount(value);\n                const quickAmount = (\n                  Number(value) / GlobalConst.utils.QUICK_CONVERSION_RATE\n                ).toLocaleString('fullwide', {\n                  useGrouping: false,\n                  maximumFractionDigits: quickToken.decimals,\n                });\n                setQUICKAmount(quickAmount);\n              }}\n            />\n            <p className='weight-600'>QUICK(NEW)</p>\n          </Box>\n        </Box>\n        <Box className='flex justify-center'>\n          <Button\n            disabled={\n              approving ||\n              attemptConverting ||\n              isInsufficientQUICK ||\n              !quickAmount ||\n              !Number(quickAmount)\n            }\n            className='convertButton'\n            onClick={() => {\n              if (approval === ApprovalState.APPROVED) {\n                convertQUICK();\n              } else {\n                attemptToApprove();\n              }\n            }}\n          >\n            {buttonText}\n          </Button>\n        </Box>\n      </Box>\n      {showConfirm && (\n        <TransactionConfirmationModal\n          isOpen={showConfirm}\n          onDismiss={handleDismissConfirmation}\n          attemptingTxn={attemptConverting}\n          txPending={txPending}\n          hash={txHash}\n          content={() =>\n            txError ? (\n              <TransactionErrorContent\n                onDismiss={handleDismissConfirmation}\n                message={txError}\n              />\n            ) : (\n              <ConfirmationModalContent\n                title={t('convertingQUICK')}\n                onDismiss={handleDismissConfirmation}\n                content={() => (\n                  <Box textAlign='center'>\n                    <Box mt={6} mb={5}>\n                      <CircularProgress size={80} />\n                    </Box>\n                    <p>{quickConvertingText}</p>\n                  </Box>\n                )}\n              />\n            )\n          }\n          pendingText={quickConvertingText}\n          modalContent={\n            txPending ? txSubmittedQuickConvertText : successQuickConvertedText\n          }\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default ConvertQUICKPage;\n"]},"metadata":{},"sourceType":"module"}