{"ast":null,"code":"import { isAddress } from 'utils';\nexport function filterTokens(tokens, search) {\n  if (search.length === 0) return tokens;\n  const searchingAddress = isAddress(search);\n\n  if (searchingAddress) {\n    return tokens.filter(token => token.address === searchingAddress);\n  }\n\n  const lowerSearchParts = search.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n\n  if (lowerSearchParts.length === 0) {\n    return tokens;\n  }\n\n  const matchesSearch = s => {\n    const sParts = s.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)));\n  };\n\n  return tokens.filter(token => {\n    const {\n      symbol,\n      name\n    } = token;\n    return symbol && matchesSearch(symbol) || name && matchesSearch(name);\n  });\n}","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/utils/filtering.ts"],"names":["isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","every","p","some","sp","startsWith","endsWith","symbol","name"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAGA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAAuCC,MAAvC,EAAgE;AACrE,MAAIA,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB,OAAOF,MAAP;AAEzB,QAAMG,gBAAgB,GAAGL,SAAS,CAACG,MAAD,CAAlC;;AAEA,MAAIE,gBAAJ,EAAsB;AACpB,WAAOH,MAAM,CAACI,MAAP,CAAeC,KAAD,IAAWA,KAAK,CAACC,OAAN,KAAkBH,gBAA3C,CAAP;AACD;;AAED,QAAMI,gBAAgB,GAAGN,MAAM,CAC5BO,WADsB,GAEtBC,KAFsB,CAEhB,KAFgB,EAGtBL,MAHsB,CAGdM,CAAD,IAAOA,CAAC,CAACR,MAAF,GAAW,CAHH,CAAzB;;AAKA,MAAIK,gBAAgB,CAACL,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,WAAOF,MAAP;AACD;;AAED,QAAMW,aAAa,GAAID,CAAD,IAAwB;AAC5C,UAAME,MAAM,GAAGF,CAAC,CACbF,WADY,GAEZC,KAFY,CAEN,KAFM,EAGZL,MAHY,CAGJM,CAAD,IAAOA,CAAC,CAACR,MAAF,GAAW,CAHb,CAAf;AAKA,WAAOK,gBAAgB,CAACM,KAAjB,CACJC,CAAD,IACEA,CAAC,CAACZ,MAAF,KAAa,CAAb,IACAU,MAAM,CAACG,IAAP,CAAaC,EAAD,IAAQA,EAAE,CAACC,UAAH,CAAcH,CAAd,KAAoBE,EAAE,CAACE,QAAH,CAAYJ,CAAZ,CAAxC,CAHG,CAAP;AAKD,GAXD;;AAaA,SAAOd,MAAM,CAACI,MAAP,CAAeC,KAAD,IAAW;AAC9B,UAAM;AAAEc,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAmBf,KAAzB;AAEA,WAAQc,MAAM,IAAIR,aAAa,CAACQ,MAAD,CAAxB,IAAsCC,IAAI,IAAIT,aAAa,CAACS,IAAD,CAAlE;AACD,GAJM,CAAP;AAKD","sourcesContent":["import { isAddress } from 'utils';\nimport { Token } from '@uniswap/sdk';\n\nexport function filterTokens(tokens: Token[], search: string): Token[] {\n  if (search.length === 0) return tokens;\n\n  const searchingAddress = isAddress(search);\n\n  if (searchingAddress) {\n    return tokens.filter((token) => token.address === searchingAddress);\n  }\n\n  const lowerSearchParts = search\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter((s) => s.length > 0);\n\n  if (lowerSearchParts.length === 0) {\n    return tokens;\n  }\n\n  const matchesSearch = (s: string): boolean => {\n    const sParts = s\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((s) => s.length > 0);\n\n    return lowerSearchParts.every(\n      (p) =>\n        p.length === 0 ||\n        sParts.some((sp) => sp.startsWith(p) || sp.endsWith(p)),\n    );\n  };\n\n  return tokens.filter((token) => {\n    const { symbol, name } = token;\n\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name));\n  });\n}\n"]},"metadata":{},"sourceType":"module"}