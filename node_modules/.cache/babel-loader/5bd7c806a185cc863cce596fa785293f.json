{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists';\nimport { GlobalConst } from 'constants/index';\nimport { updateVersion } from 'state/global/actions';\nimport { acceptSyrupUpdate, fetchSyrupList } from './actions';\nconst NEW_LIST_STATE = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null\n};\nconst {\n  DEFAULT_SYRUP_LIST_URL\n} = GlobalConst.utils;\nconst DEFAULT_LIST_OF_LISTS = [DEFAULT_SYRUP_LIST_URL];\nconst initialState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: { ...DEFAULT_LIST_OF_LISTS.reduce((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE;\n      return memo;\n    }, {})\n  },\n  selectedListUrl: DEFAULT_SYRUP_LIST_URL\n};\nexport default createReducer(initialState, builder => builder.addCase(fetchSyrupList.pending, (state, _ref) => {\n  let {\n    payload: {\n      requestId,\n      url\n    }\n  } = _ref;\n  state.byUrl[url] = { ...state.byUrl[url],\n    loadingRequestId: requestId,\n    error: null,\n    current: null,\n    pendingUpdate: null\n  };\n}).addCase(fetchSyrupList.fulfilled, (state, _ref2) => {\n  var _state$byUrl$url, _state$byUrl$url2;\n\n  let {\n    payload: {\n      requestId,\n      syrupList,\n      url\n    }\n  } = _ref2;\n  const current = (_state$byUrl$url = state.byUrl[url]) === null || _state$byUrl$url === void 0 ? void 0 : _state$byUrl$url.current;\n  const loadingRequestId = (_state$byUrl$url2 = state.byUrl[url]) === null || _state$byUrl$url2 === void 0 ? void 0 : _state$byUrl$url2.loadingRequestId; // no-op if update does nothing\n\n  if (current) {\n    const upgradeType = getVersionUpgrade(current.version, syrupList.version);\n    if (upgradeType === VersionUpgrade.NONE) return;\n\n    if (loadingRequestId === null || loadingRequestId === requestId) {\n      state.byUrl[url] = { ...state.byUrl[url],\n        loadingRequestId: null,\n        error: null,\n        current: current,\n        pendingUpdate: syrupList\n      };\n    }\n  } else {\n    state.byUrl[url] = { ...state.byUrl[url],\n      loadingRequestId: null,\n      error: null,\n      current: syrupList,\n      pendingUpdate: null\n    };\n  }\n}).addCase(fetchSyrupList.rejected, (state, _ref3) => {\n  var _state$byUrl$url3;\n\n  let {\n    payload: {\n      url,\n      requestId,\n      errorMessage\n    }\n  } = _ref3;\n\n  if (((_state$byUrl$url3 = state.byUrl[url]) === null || _state$byUrl$url3 === void 0 ? void 0 : _state$byUrl$url3.loadingRequestId) !== requestId) {\n    // no-op since it's not the latest request\n    return;\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    loadingRequestId: null,\n    error: errorMessage,\n    current: null,\n    pendingUpdate: null\n  };\n}).addCase(acceptSyrupUpdate, (state, _ref4) => {\n  var _state$byUrl$url4;\n\n  let {\n    payload: url\n  } = _ref4;\n\n  if (!((_state$byUrl$url4 = state.byUrl[url]) !== null && _state$byUrl$url4 !== void 0 && _state$byUrl$url4.pendingUpdate)) {\n    throw new Error('accept list update called without pending update');\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    pendingUpdate: null,\n    current: state.byUrl[url].pendingUpdate\n  };\n}).addCase(updateVersion, state => {\n  // state loaded from localStorage, but new lists have never been initialized\n  if (!state.lastInitializedDefaultListOfLists) {\n    state.byUrl = initialState.byUrl;\n    state.selectedListUrl = DEFAULT_SYRUP_LIST_URL;\n  } else if (state.lastInitializedDefaultListOfLists) {\n    const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce((s, l) => s.add(l), new Set());\n    const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce((s, l) => s.add(l), new Set());\n    DEFAULT_LIST_OF_LISTS.forEach(listUrl => {\n      if (!lastInitializedSet.has(listUrl)) {\n        state.byUrl[listUrl] = NEW_LIST_STATE;\n      }\n    });\n    state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n      if (!newListOfListsSet.has(listUrl)) {\n        delete state.byUrl[listUrl];\n      }\n    });\n  }\n\n  state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS;\n\n  if (!state.selectedListUrl) {\n    state.selectedListUrl = DEFAULT_SYRUP_LIST_URL;\n\n    if (!state.byUrl[DEFAULT_SYRUP_LIST_URL]) {\n      state.byUrl[DEFAULT_SYRUP_LIST_URL] = NEW_LIST_STATE;\n    }\n  }\n}));","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/syrups/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","GlobalConst","updateVersion","acceptSyrupUpdate","fetchSyrupList","NEW_LIST_STATE","error","current","loadingRequestId","pendingUpdate","DEFAULT_SYRUP_LIST_URL","utils","DEFAULT_LIST_OF_LISTS","initialState","lastInitializedDefaultListOfLists","byUrl","reduce","memo","listUrl","selectedListUrl","builder","addCase","pending","state","payload","requestId","url","fulfilled","syrupList","upgradeType","version","NONE","rejected","errorMessage","Error","lastInitializedSet","s","l","add","Set","newListOfListsSet","forEach","has"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists';\nimport { GlobalConst } from 'constants/index';\nimport { updateVersion } from 'state/global/actions';\nimport { SyrupListInfo } from 'types';\nimport { acceptSyrupUpdate, fetchSyrupList } from './actions';\n\nexport interface SyrupsListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: SyrupListInfo | null;\n      readonly pendingUpdate: SyrupListInfo | null;\n      readonly loadingRequestId: string | null;\n      readonly error: string | null;\n    };\n  };\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[];\n  readonly selectedListUrl: string | undefined;\n}\n\ntype ListState = SyrupsListsState['byUrl'][string];\n\nconst NEW_LIST_STATE: ListState = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null,\n};\n\nconst { DEFAULT_SYRUP_LIST_URL } = GlobalConst.utils;\n\nconst DEFAULT_LIST_OF_LISTS = [DEFAULT_SYRUP_LIST_URL];\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P];\n};\n\nconst initialState: SyrupsListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: {\n    ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<SyrupsListsState['byUrl']>>(\n      (memo, listUrl) => {\n        memo[listUrl] = NEW_LIST_STATE;\n        return memo;\n      },\n      {},\n    ),\n  },\n  selectedListUrl: DEFAULT_SYRUP_LIST_URL,\n};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(\n      fetchSyrupList.pending,\n      (state, { payload: { requestId, url } }) => {\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: requestId,\n          error: null,\n          current: null,\n          pendingUpdate: null,\n        };\n      },\n    )\n    .addCase(\n      fetchSyrupList.fulfilled,\n      (state, { payload: { requestId, syrupList, url } }) => {\n        const current = state.byUrl[url]?.current;\n        const loadingRequestId = state.byUrl[url]?.loadingRequestId;\n\n        // no-op if update does nothing\n        if (current) {\n          const upgradeType = getVersionUpgrade(\n            current.version,\n            syrupList.version,\n          );\n          if (upgradeType === VersionUpgrade.NONE) return;\n          if (loadingRequestId === null || loadingRequestId === requestId) {\n            state.byUrl[url] = {\n              ...state.byUrl[url],\n              loadingRequestId: null,\n              error: null,\n              current: current,\n              pendingUpdate: syrupList,\n            };\n          }\n        } else {\n          state.byUrl[url] = {\n            ...state.byUrl[url],\n            loadingRequestId: null,\n            error: null,\n            current: syrupList,\n            pendingUpdate: null,\n          };\n        }\n      },\n    )\n    .addCase(\n      fetchSyrupList.rejected,\n      (state, { payload: { url, requestId, errorMessage } }) => {\n        if (state.byUrl[url]?.loadingRequestId !== requestId) {\n          // no-op since it's not the latest request\n          return;\n        }\n\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: errorMessage,\n          current: null,\n          pendingUpdate: null,\n        };\n      },\n    )\n    .addCase(acceptSyrupUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update');\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        pendingUpdate: null,\n        current: state.byUrl[url].pendingUpdate,\n      };\n    })\n    .addCase(updateVersion, (state) => {\n      // state loaded from localStorage, but new lists have never been initialized\n      if (!state.lastInitializedDefaultListOfLists) {\n        state.byUrl = initialState.byUrl;\n        state.selectedListUrl = DEFAULT_SYRUP_LIST_URL;\n      } else if (state.lastInitializedDefaultListOfLists) {\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<\n          Set<string>\n        >((s, l) => s.add(l), new Set());\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>(\n          (s, l) => s.add(l),\n          new Set(),\n        );\n\n        DEFAULT_LIST_OF_LISTS.forEach((listUrl) => {\n          if (!lastInitializedSet.has(listUrl)) {\n            state.byUrl[listUrl] = NEW_LIST_STATE;\n          }\n        });\n\n        state.lastInitializedDefaultListOfLists.forEach((listUrl) => {\n          if (!newListOfListsSet.has(listUrl)) {\n            delete state.byUrl[listUrl];\n          }\n        });\n      }\n\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS;\n\n      if (!state.selectedListUrl) {\n        state.selectedListUrl = DEFAULT_SYRUP_LIST_URL;\n        if (!state.byUrl[DEFAULT_SYRUP_LIST_URL]) {\n          state.byUrl[DEFAULT_SYRUP_LIST_URL] = NEW_LIST_STATE;\n        }\n      }\n    }),\n);\n"]},"metadata":{},"sourceType":"module"}