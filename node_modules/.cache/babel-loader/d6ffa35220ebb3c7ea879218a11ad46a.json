{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { isMobile } from 'react-device-detect';\nimport { injected, safeApp } from 'connectors';\nimport { GlobalConst } from 'constants/index';\nimport { useDispatch } from 'react-redux';\n\n/* eslint-disable */\n// @ts-ignore\nimport transakSDK from '@transak/transak-sdk';\nimport { addPopup } from 'state/application/actions';\nimport { useSingleCallResult, NEVER_RELOAD } from 'state/multicall/hooks';\nimport { useArgentWalletDetectorContract } from './useContract';\nexport function useActiveWeb3React() {\n  _s();\n\n  const context = useWeb3ReactCore();\n  const contextNetwork = useWeb3ReactCore(GlobalConst.utils.NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\n\n_s(useActiveWeb3React, \"WFPFKE/y5H/nwl1Zbqr6M/3MM8c=\", false, function () {\n  return [useWeb3ReactCore, useWeb3ReactCore];\n});\n\nexport function useIsArgentWallet() {\n  _s2();\n\n  var _call$result$, _call$result;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const argentWalletDetector = useArgentWalletDetectorContract();\n  const call = useSingleCallResult(argentWalletDetector, 'isArgentWallet', [account !== null && account !== void 0 ? account : undefined], NEVER_RELOAD);\n  return (_call$result$ = call === null || call === void 0 ? void 0 : (_call$result = call.result) === null || _call$result === void 0 ? void 0 : _call$result[0]) !== null && _call$result$ !== void 0 ? _call$result$ : false;\n}\n\n_s2(useIsArgentWallet, \"LZfrnRl5+UP5gtjhAYNuSqsKVIE=\", false, function () {\n  return [useActiveWeb3React, useArgentWalletDetectorContract, useSingleCallResult];\n});\n\nexport function useInitTransak() {\n  _s3();\n\n  const dispatch = useDispatch();\n\n  const initTransak = (account, mobileWindowSize) => {\n    const transak = new transakSDK({\n      apiKey: process.env.REACT_APP_TRANSAK_KEY,\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: 'wwDOGE',\n      walletAddress: account,\n      // Your customer's wallet address\n      themeColor: '2891f9',\n      // App theme color\n      redirectURL: 'window.location.origin',\n      hostURL: window.location.origin,\n      widgetHeight: mobileWindowSize ? '450px' : '600px',\n      widgetWidth: mobileWindowSize ? '360px' : '450px',\n      networks: 'doge'\n    });\n    transak.init(); // To get all the events\n\n    transak.on(transak.TRANSAK_ORDER_FAILED, data => {\n      dispatch(addPopup({\n        key: 'abc',\n        content: {\n          txn: {\n            hash: '',\n            summary: 'Buy order failed',\n            success: false\n          }\n        }\n      }));\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, orderData => {\n      dispatch(addPopup({\n        key: 'abc',\n        content: {\n          txn: {\n            hash: '',\n            summary: 'Buy ' + orderData.status.cryptoAmount + ' ' + orderData.status.cryptocurrency + ' for ' + orderData.status.fiatAmount + ' ' + orderData.status.fiatCurrency,\n            success: true\n          }\n        }\n      }));\n      console.log(orderData);\n      transak.close();\n    });\n  };\n\n  return {\n    initTransak\n  };\n}\n\n_s3(useInitTransak, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useEagerConnect() {\n  _s4();\n\n  const {\n    activate,\n    active\n  } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n\n  const [tried, setTried] = useState(false);\n  const checkInjected = useCallback(() => {\n    return injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]);\n  useEffect(() => {\n    Promise.race([safeApp.getSafeInfo(), new Promise(resolve => setTimeout(resolve, 100))]).then(safe => {\n      if (safe) activate(safeApp, undefined, true);else checkInjected();\n    }, () => {\n      checkInjected();\n    });\n  }, [activate, checkInjected]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\n\n_s4(useEagerConnect, \"E4GY3T2BD2xsqpwuol3GCCN1PGU=\", false, function () {\n  return [useWeb3ReactCore];\n});\n\nexport function useInactiveListener() {\n  _s5();\n\n  let suppress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(error => {\n          console.error('Failed to activate after chain changed', error);\n        });\n      };\n\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(error => {\n            console.error('Failed to activate after accounts changed', error);\n          });\n        }\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n\n    return undefined;\n  }, [active, error, suppress, activate]);\n}\n\n_s5(useInactiveListener, \"jN4RZ0OvqgaQw3T0lu1/qJ1z0K8=\", false, function () {\n  return [useWeb3ReactCore];\n});","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/hooks/index.ts"],"names":["useEffect","useState","useCallback","useWeb3React","useWeb3ReactCore","isMobile","injected","safeApp","GlobalConst","useDispatch","transakSDK","addPopup","useSingleCallResult","NEVER_RELOAD","useArgentWalletDetectorContract","useActiveWeb3React","context","contextNetwork","utils","NetworkContextName","active","useIsArgentWallet","account","argentWalletDetector","call","undefined","result","useInitTransak","dispatch","initTransak","mobileWindowSize","transak","apiKey","process","env","REACT_APP_TRANSAK_KEY","environment","defaultCryptoCurrency","walletAddress","themeColor","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","networks","init","on","TRANSAK_ORDER_FAILED","data","key","content","txn","hash","summary","success","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","status","cryptoAmount","cryptocurrency","fiatAmount","fiatCurrency","close","useEagerConnect","activate","tried","setTried","checkInjected","isAuthorized","then","catch","ethereum","Promise","race","getSafeInfo","resolve","setTimeout","safe","useInactiveListener","suppress","error","handleChainChanged","handleAccountsChanged","accounts","length","removeListener"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\nimport { ChainId } from '@uniswap/sdk';\nimport { isMobile } from 'react-device-detect';\nimport { injected, safeApp } from 'connectors';\nimport { GlobalConst } from 'constants/index';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from 'state';\n/* eslint-disable */\n// @ts-ignore\nimport transakSDK from '@transak/transak-sdk';\nimport { addPopup } from 'state/application/actions';\nimport { useSingleCallResult, NEVER_RELOAD } from 'state/multicall/hooks';\nimport { useArgentWalletDetectorContract } from './useContract';\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<\n  Web3Provider\n> & {\n  chainId?: ChainId;\n} {\n  const context = useWeb3ReactCore<Web3Provider>();\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(\n    GlobalConst.utils.NetworkContextName,\n  );\n  return context.active ? context : contextNetwork;\n}\n\nexport function useIsArgentWallet(): boolean {\n  const { account } = useActiveWeb3React();\n  const argentWalletDetector = useArgentWalletDetectorContract();\n  const call = useSingleCallResult(\n    argentWalletDetector,\n    'isArgentWallet',\n    [account ?? undefined],\n    NEVER_RELOAD,\n  );\n  return call?.result?.[0] ?? false;\n}\n\nexport function useInitTransak() {\n  const dispatch = useDispatch<AppDispatch>();\n  const initTransak = (account: any, mobileWindowSize: boolean) => {\n    const transak = new transakSDK({\n      apiKey: process.env.REACT_APP_TRANSAK_KEY, // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: 'wwDOGE',\n      walletAddress: account, // Your customer's wallet address\n      themeColor: '2891f9', // App theme color\n      redirectURL: 'window.location.origin',\n      hostURL: window.location.origin,\n      widgetHeight: mobileWindowSize ? '450px' : '600px',\n      widgetWidth: mobileWindowSize ? '360px' : '450px',\n      networks: 'doge',\n    });\n\n    transak.init();\n\n    // To get all the events\n    transak.on(transak.TRANSAK_ORDER_FAILED, (data: any) => {\n      dispatch(\n        addPopup({\n          key: 'abc',\n          content: {\n            txn: { hash: '', summary: 'Buy order failed', success: false },\n          },\n        }),\n      );\n      console.log(data);\n    });\n\n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData: any) => {\n      dispatch(\n        addPopup({\n          key: 'abc',\n          content: {\n            txn: {\n              hash: '',\n              summary:\n                'Buy ' +\n                orderData.status.cryptoAmount +\n                ' ' +\n                orderData.status.cryptocurrency +\n                ' for ' +\n                orderData.status.fiatAmount +\n                ' ' +\n                orderData.status.fiatCurrency,\n              success: true,\n            },\n          },\n        }),\n      );\n      console.log(orderData);\n      transak.close();\n    });\n  };\n\n  return { initTransak };\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false);\n\n  const checkInjected = useCallback(() => {\n    return injected.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]);\n\n  useEffect(() => {\n    Promise.race([\n      safeApp.getSafeInfo(),\n      new Promise((resolve) => setTimeout(resolve, 100)),\n    ]).then(\n      (safe) => {\n        if (safe) activate(safeApp, undefined, true);\n        else checkInjected();\n      },\n      () => {\n        checkInjected();\n      },\n    );\n  }, [activate, checkInjected]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n\n  return tried;\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch((error) => {\n          console.error('Failed to activate after chain changed', error);\n        });\n      };\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch((error) => {\n            console.error('Failed to activate after accounts changed', error);\n          });\n        }\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n    return undefined;\n  }, [active, error, suppress, activate]);\n}\n"]},"metadata":{},"sourceType":"module"}