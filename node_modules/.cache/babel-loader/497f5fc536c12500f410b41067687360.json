{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/;\nexport function toCallKey(call) {\n  if (!ADDRESS_REGEX.test(call.address)) {\n    throw new Error(`Invalid address: ${call.address}`);\n  }\n\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\n    throw new Error(`Invalid hex: ${call.callData}`);\n  }\n\n  return `${call.address}-${call.callData}`;\n}\nexport function parseCallKey(callKey) {\n  const pcs = callKey.split('-');\n\n  if (pcs.length !== 2) {\n    throw new Error(`Invalid call key: ${callKey}`);\n  }\n\n  return {\n    address: pcs[0],\n    callData: pcs[1]\n  };\n}\nexport const addMulticallListeners = createAction('multicall/addMulticallListeners');\nexport const removeMulticallListeners = createAction('multicall/removeMulticallListeners');\nexport const fetchingMulticallResults = createAction('multicall/fetchingMulticallResults');\nexport const errorFetchingMulticallResults = createAction('multicall/errorFetchingMulticallResults');\nexport const updateMulticallResults = createAction('multicall/updateMulticallResults');","map":{"version":3,"sources":["/Users/danielmaina/Downloads/_newCrptProj/clientBase/DEX/interface-v2-master/src/state/multicall/actions.ts"],"names":["createAction","ADDRESS_REGEX","LOWER_HEX_REGEX","toCallKey","call","test","address","Error","callData","parseCallKey","callKey","pcs","split","length","addMulticallListeners","removeMulticallListeners","fetchingMulticallResults","errorFetchingMulticallResults","updateMulticallResults"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AAQA,MAAMC,aAAa,GAAG,qBAAtB;AACA,MAAMC,eAAe,GAAG,eAAxB;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAuC;AAC5C,MAAI,CAACH,aAAa,CAACI,IAAd,CAAmBD,IAAI,CAACE,OAAxB,CAAL,EAAuC;AACrC,UAAM,IAAIC,KAAJ,CAAW,oBAAmBH,IAAI,CAACE,OAAQ,EAA3C,CAAN;AACD;;AACD,MAAI,CAACJ,eAAe,CAACG,IAAhB,CAAqBD,IAAI,CAACI,QAA1B,CAAL,EAA0C;AACxC,UAAM,IAAID,KAAJ,CAAW,gBAAeH,IAAI,CAACI,QAAS,EAAxC,CAAN;AACD;;AACD,SAAQ,GAAEJ,IAAI,CAACE,OAAQ,IAAGF,IAAI,CAACI,QAAS,EAAxC;AACD;AAED,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA6C;AAClD,QAAMC,GAAG,GAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAZ;;AACA,MAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AACpB,UAAM,IAAIN,KAAJ,CAAW,qBAAoBG,OAAQ,EAAvC,CAAN;AACD;;AACD,SAAO;AACLJ,IAAAA,OAAO,EAAEK,GAAG,CAAC,CAAD,CADP;AAELH,IAAAA,QAAQ,EAAEG,GAAG,CAAC,CAAD;AAFR,GAAP;AAID;AAOD,OAAO,MAAMG,qBAAqB,GAAGd,YAAY,CAI9C,iCAJ8C,CAA1C;AAKP,OAAO,MAAMe,wBAAwB,GAAGf,YAAY,CAIjD,oCAJiD,CAA7C;AAKP,OAAO,MAAMgB,wBAAwB,GAAGhB,YAAY,CAIjD,oCAJiD,CAA7C;AAKP,OAAO,MAAMiB,6BAA6B,GAAGjB,YAAY,CAItD,yCAJsD,CAAlD;AAKP,OAAO,MAAMkB,sBAAsB,GAAGlB,YAAY,CAM/C,kCAN+C,CAA3C","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport interface Call {\n  address: string;\n  callData: string;\n  gasRequired?: number;\n}\n\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/;\nexport function toCallKey(call: Call): string {\n  if (!ADDRESS_REGEX.test(call.address)) {\n    throw new Error(`Invalid address: ${call.address}`);\n  }\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\n    throw new Error(`Invalid hex: ${call.callData}`);\n  }\n  return `${call.address}-${call.callData}`;\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-');\n  if (pcs.length !== 2) {\n    throw new Error(`Invalid call key: ${callKey}`);\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1],\n  };\n}\n\nexport interface ListenerOptions {\n  // how often this data should be fetched, by default 1\n  readonly blocksPerFetch?: number;\n}\n\nexport const addMulticallListeners = createAction<{\n  chainId: number;\n  calls: Call[];\n  options?: ListenerOptions;\n}>('multicall/addMulticallListeners');\nexport const removeMulticallListeners = createAction<{\n  chainId: number;\n  calls: Call[];\n  options?: ListenerOptions;\n}>('multicall/removeMulticallListeners');\nexport const fetchingMulticallResults = createAction<{\n  chainId: number;\n  calls: Call[];\n  fetchingBlockNumber: number;\n}>('multicall/fetchingMulticallResults');\nexport const errorFetchingMulticallResults = createAction<{\n  chainId: number;\n  calls: Call[];\n  fetchingBlockNumber: number;\n}>('multicall/errorFetchingMulticallResults');\nexport const updateMulticallResults = createAction<{\n  chainId: number;\n  blockNumber: number;\n  results: {\n    [callKey: string]: string | null;\n  };\n}>('multicall/updateMulticallResults');\n"]},"metadata":{},"sourceType":"module"}