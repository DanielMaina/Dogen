import { ArkaneConnect, AuthenticationOptions, AuthenticationResult } from "@arkane-network/arkane-connect/dist/src/connect/connect";
import { Account } from '@arkane-network/arkane-connect/dist/src/models/Account';
import { Provider } from 'ethereum-types';
import { SecretType } from '@arkane-network/arkane-connect';
declare class ArkaneSubProvider {
    private ac?;
    private rpcSubprovider;
    private nonceSubProvider;
    private signedVersionedTypedDataSubProvider;
    private arkaneSubProvider?;
    private engine?;
    arkaneConnect(): ArkaneConnect | undefined;
    changeSecretType(secretType?: SecretType): Promise<Provider | undefined>;
    checkAuthenticated(): Promise<AuthenticationResult>;
    authenticate(authenticationOptions?: AuthenticationOptions): Promise<Account | {}>;
    createArkaneProviderEngine(options: ArkaneSubProviderOptions): Promise<Provider>;
    private getConnectionDetails;
    private startEngine;
}
export interface ArkaneSubProviderOptions {
    clientId: string;
    environment?: string;
    /** Deprecated, use windowMode instead */
    signMethod?: string;
    windowMode?: string;
    bearerTokenProvider?: () => string;
    secretType?: SecretType;
    authenticationOptions?: AuthenticationOptions;
    skipAuthentication: boolean;
    pollingInterval?: number;
}
export declare const Arkane: ArkaneSubProvider;
export {};
